[{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 CodelistGenerator authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"creating-a-codelist-for-dementia","dir":"Articles","previous_headings":"","what":"Creating a codelist for dementia","title":"01 Introduction to CodelistGenerator","text":"example going generate candidate codelist dementia, looking codes condition domain.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"getting-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Getting the OMOP CDM vocabularies","title":"01 Introduction to CodelistGenerator","text":"ready access database data OMOP CDM format (necessarily contain vocabulary tables), first need obtain OMOP CDM vocabularies https://athena.ohdsi.org. downloaded, can make vocabulary database like : structure tables described detail : https://ohdsi.github.io/CommonDataModel/cdm53.html#Vocabulary_Tables","code":"library(readr) library(DBI) library(RSQLite) library(here) vocab.folder<-Sys.getenv(\"omop_cdm_vocab_path\") # path to directory of unzipped files concept<-read_delim(paste0(vocab.folder,\"/CONCEPT.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_relationship<-read_delim(paste0(vocab.folder,\"/CONCEPT_RELATIONSHIP.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  concept_ancestor<-read_delim(paste0(vocab.folder,\"/CONCEPT_ANCESTOR.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_synonym<-read_delim(paste0(vocab.folder,\"/CONCEPT_SYNONYM.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) vocabulary<-read_delim(paste0(vocab.folder,\"/VOCABULARY.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  db <- dbConnect(RSQLite::SQLite(), \":memory:\") dbWriteTable(db, \"concept\", concept, overwrite=TRUE) dbWriteTable(db, \"concept_relationship\", concept_relationship, overwrite=TRUE) dbWriteTable(db, \"concept_ancestor\", concept_ancestor, overwrite=TRUE) dbWriteTable(db, \"concept_synonym\", concept_synonym, overwrite=TRUE) dbWriteTable(db, \"vocabulary\", vocabulary) rm(concept,concept_relationship, concept_ancestor, concept_synonym, vocabulary) vocabulary_database_schema<-\"main\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"check-version-of-the-vocabularies","dir":"Articles","previous_headings":"","what":"Check version of the vocabularies","title":"01 Introduction to CodelistGenerator","text":"important note results CodelistGenerator specific particular version OMOP CDM vocabularies. can see version vocabulary used like ","code":"get_vocab_version(db=db,                   vocabulary_database_schema = \"main\") #> [1] \"v5.0 04-FEB-22\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"codelist-from-dementia-4182210-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “Dementia” (4182210) and its descendants","title":"01 Introduction to CodelistGenerator","text":"simplest approach identifying potential codes take high-level code include descendants. looks pick relevant codes. , approach misses codes descendant 4182210. example, codes “Wandering due dementia” (37312577; https://athena.ohdsi.org/search-terms/terms/37312577) “Anxiety due dementia” (37312031; https://athena.ohdsi.org/search-terms/terms/37312031) picked .","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id==\"4182210\") %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"01 Introduction to CodelistGenerator","text":"try include terms included can use CodelistGenerator. First, let’s simple search single keyword “dementia”, including descendants identified codes. difference codelist one 4182210 descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) dementia_codes1<-get_candidate_codes(keywords=\"dementia\",                     domains=\"Condition\",                     include_descendants = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(dementia_codes1,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"4182210 and descendants\"),                       dementia_codes1  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                      \"Only 4182210 and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"review-mappings-from-source-vocabularies","dir":"Articles","previous_headings":"","what":"Review mappings from source vocabularies","title":"01 Introduction to CodelistGenerator","text":"Perhaps want see ICD10CM codes map candidate codelist. can get running","code":"icd_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"ICD10CM\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(icd_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) read_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"Read\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(read_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"creating-a-codelist-for-osteoarthritis","dir":"Articles","previous_headings":"","what":"Creating a codelist for osteoarthritis","title":"02 Options for CodelistGenerator","text":"example going generate candidate codelist osteoarthritis, looking impact alternative search strategies.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"02 Options for CodelistGenerator","text":"","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"condition-domain-without-searching-synonyms-without-fuzzy-match-with-exclusions-without-including-descendants-or-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Condition domain, without searching synonyms, without fuzzy match, with exclusions, without including descendants or ancestor","title":"02 Options for CodelistGenerator","text":"start search “osteoarthritis”, excluding “post-infection” “post-traumatic”, without searching synonyms, without searching via source codes, without fuzzy matching, without including descendants direct ancestor included concepts. candidate codelist?","code":"oa_codes1<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(oa_codes1,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,250)))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"including-descendants","dir":"Articles","previous_headings":"Search strategies","what":"Including descendants","title":"02 Options for CodelistGenerator","text":"Now also include descendants included concepts. new codes pick ?","code":"oa_codes2<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = TRUE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_2<-bind_rows(oa_codes1, oa_codes2) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"including-observation-domain","dir":"Articles","previous_headings":"Search strategies","what":"Including observation domain","title":"02 Options for CodelistGenerator","text":"Now search observation domain well condition domain. new codes pick ?","code":"oa_codes3<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=c(\"Condition\",\"Observation\"),                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_3<-bind_rows(oa_codes1, oa_codes3) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_3,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"search-synonyms","dir":"Articles","previous_headings":"Search strategies","what":"Search synonyms","title":"02 Options for CodelistGenerator","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes4<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = TRUE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_4<-bind_rows(oa_codes1, oa_codes4) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_4,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"search-via-source","dir":"Articles","previous_headings":"Search strategies","what":"Search via source","title":"02 Options for CodelistGenerator","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes5<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=TRUE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_5<-bind_rows(oa_codes1, oa_codes5) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_5,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"using-a-fuzzy-search","dir":"Articles","previous_headings":"Search strategies","what":"Using a fuzzy search","title":"02 Options for CodelistGenerator","text":"Now use approximate search. See https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/agrep details (running hood). Note, using defaults 0.1 substitutions, deletions, insertions. new codes pick ?","code":"oa_codes6<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = TRUE,                     max_distance_substitutions = 0.1,                     max_distance_deletions = 0.1,                     max_distance_insertions = 0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_6<-bind_rows(oa_codes1, oa_codes6) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_6,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"using-a-more-generous-fuzzy-search","dir":"Articles","previous_headings":"Search strategies","what":"Using a more generous fuzzy search","title":"02 Options for CodelistGenerator","text":"widen approximate searching, increasing maximum distance allowed match 0.2 substitutions, deletions, insertions. new codes pick ?","code":"oa_codes7<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = TRUE,                     max_distance_substitutions = 0.2,                     max_distance_deletions = 0.2,                     max_distance_insertions = 0.2,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_7<-bind_rows(oa_codes1, oa_codes7) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_7,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a02_Options_for_CodelistGenerator.html","id":"include-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Include ancestor","title":"02 Options for CodelistGenerator","text":"Now include direct ancestor included terms. new codes pick ?","code":"oa_codes8<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     max_distance_substitutions = 0.1,                     max_distance_deletions = 0.1,                     max_distance_insertions = 0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_8<-bind_rows(oa_codes1, oa_codes8) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_8,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"creating-a-codelists-for-colonoscopy","dir":"Articles","previous_headings":"","what":"Creating a codelists for colonoscopy","title":"03 Generating a codelist for procedures","text":"vignette going create codelists identifying colonoscopy. example going generate candidate codelists looking codes either procedure measurement domain.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"03 Generating a codelist for procedures","text":"described previously alternative ways link vocabularies. connection existing database can made like :","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"codelist-from-colonoscopy-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “colonoscopy” and its descendants","title":"03 Generating a codelist for procedures","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id %in% c(\"4249893\", \"937652\", \"40480729\")) %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"03 Generating a codelist for procedures","text":"can also use CodelistGenerator generate candidate codelist colonoscopy. Let’s search single keyword “colonoscopy” without exclusions including descendants difference codelist one based descendants? extra codes picked CodelistGenerator? , codes specified codes descendants picked CodelistGenerator?","code":"library(CodelistGenerator) colonoscopy_codes2<-get_candidate_codes(keywords=\"colonoscopy\",                     domains=c(\"Procedure\",\"Measurement\"),                     exclude = NULL,                     include_descendants = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(colonoscopy_codes2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"Specified codes and descendants\"),                       colonoscopy_codes2  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                     \"Only specified codes and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) #> Joining, by = c(\"concept_id\", \"concept_name\", \"domain_id\", #> \"vocabulary_id\") kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) datatable(code_comparison %>%              filter(type==\"Only specified codes and descendants\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"creating-a-codelists-for-metformin","dir":"Articles","previous_headings":"","what":"Creating a codelists for metformin","title":"04 Codelists for medications","text":"vignette going create codelists identifying metformin, looking drug domain.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"04 Codelists for medications","text":"","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"codelist-from-metformin-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “metformin” and its descendants","title":"04 Codelists for medications","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,   sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%   filter(ancestor_concept_id %in% c(\"1503297\")) %>%   select(\"descendant_concept_id\") %>%   rename(\"concept_id\"=\"descendant_concept_id\") %>%   inner_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",          \"domain_id\", \"vocabulary_id\") %>%   collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"04 Codelists for medications","text":"can also use CodelistGenerator generate candidate codelist metformin, Let’s search single keyword “metformin”, including descendants. difference codelist one based descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) metformin_codes2<-get_candidate_codes(keywords=\"metformin\",                     domains=c(\"Drug\"),                     include_descendants = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(metformin_codes2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"Specified codes and descendants\"),                       metformin_codes2  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                     \"Only specified codes and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) #> Joining, by = c(\"concept_id\", \"concept_name\", \"domain_id\", #> \"vocabulary_id\") kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E (2022). CodelistGenerator: Generate Candidate Codelists OMOP CDM. R package version 0.0.0.9000, https://oxford-pharmacoepi.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Generate Candidate Codelists for the OMOP CDM},   author = {Edward Burn},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://oxford-pharmacoepi.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate Candidate Codelists for the OMOP CDM","text":"CodelistGenerator used create candidate set codes helping define patient cohorts data mapped OMOP common data model. little like process systematic review, idea specified search strategy, CodelistGenerator identify set concepts may relevant, screened remove irrelevant codes.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Candidate Codelists for the OMOP CDM","text":"can install development version CodelistGenerator like :","code":"install.packages(\"remotes\") remotes::install_github(\"darwin-eu/CodelistGenerator\")"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"option-1-connect-to-a-live-omop-cdm-database","dir":"","previous_headings":"Connecting to the OMOP CDM vocabularies","what":"Option 1: Connect to a live OMOP CDM database","title":"Generate Candidate Codelists for the OMOP CDM","text":"","code":"# example with postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- DBI::dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-Sys.getenv(\"vocabulary_schema\")"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"option-2-download-the-vocabularies-from-athena","dir":"","previous_headings":"Connecting to the OMOP CDM vocabularies","what":"Option 2: Download the vocabularies from Athena","title":"Generate Candidate Codelists for the OMOP CDM","text":"first need obtain OMOP CDM vocabularies https://athena.ohdsi.org. downloaded, can make vocabulary SQLite database like :","code":"vocab.folder<-Sys.getenv(\"omop_cdm_vocab_path\") # path to directory of unzipped files concept<-read_delim(paste0(vocab.folder,\"/CONCEPT.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_relationship<-read_delim(paste0(vocab.folder,\"/CONCEPT_RELATIONSHIP.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  concept_ancestor<-read_delim(paste0(vocab.folder,\"/CONCEPT_ANCESTOR.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_synonym<-read_delim(paste0(vocab.folder,\"/CONCEPT_SYNONYM.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) vocabulary<-read_delim(paste0(vocab.folder,\"/VOCABULARY.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  db <- dbConnect(RSQLite::SQLite(), \":memory:\") dbWriteTable(db, \"concept\", concept, overwrite=TRUE) dbWriteTable(db, \"concept_relationship\", concept_relationship, overwrite=TRUE) dbWriteTable(db, \"concept_ancestor\", concept_ancestor, overwrite=TRUE) dbWriteTable(db, \"concept_synonym\", concept_synonym, overwrite=TRUE) dbWriteTable(db, \"vocabulary\", vocabulary) rm(concept,concept_relationship, concept_ancestor, concept_synonym, vocabulary)  vocabulary_database_schema<-\"main\""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"option-3-use-eunomia-for-testing-and-examples-only---eunomia-does-not-include-a-full-set-of-vocabularies","dir":"","previous_headings":"Connecting to the OMOP CDM vocabularies","what":"Option 3: Use Eunomia (for testing and examples only - Eunomia does not include a full set of vocabularies)","title":"Generate Candidate Codelists for the OMOP CDM","text":"","code":"library(CodelistGenerator) library(Eunomia) library(RSQLite) library(DBI) untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\", package = \"Eunomia\"), open = \"rb\"),         exdir =  tempdir()) db <- DBI::dbConnect(RSQLite::SQLite(), paste0(tempdir(),\"\\\\cdm.sqlite\"))"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"example-search-using-eunomia","dir":"","previous_headings":"","what":"Example search using Eunomia","title":"Generate Candidate Codelists for the OMOP CDM","text":"Every codelist specific version OMOP CDM vocabularies, can first check version. can search asthma like Perhaps want exclude asthma children part search strategy, case can added like Please see vignettes details.","code":"get_vocab_version(db=db,                   vocabulary_database_schema = \"main\") #> [1] \"v5.0 18-JAN-19\" get_candidate_codes(keywords=\"asthma\",                     domains = \"Condition\",                     db=db,                     vocabulary_database_schema = \"main\") #> # A tibble: 2 x 4 #>   concept_id concept_name     domain_id vocabulary_id #>        <dbl> <chr>            <chr>     <chr>         #> 1    4051466 Childhood asthma Condition SNOMED        #> 2     317009 Asthma           Condition SNOMED get_candidate_codes(keywords=\"asthma\",                     domains = \"Condition\",                     exclude = \"Childhood asthma\",                     db=db,                     vocabulary_database_schema = \"main\") #> # A tibble: 1 x 4 #>   concept_id concept_name domain_id vocabulary_id #>        <dbl> <chr>        <chr>     <chr>         #> 1     317009 Asthma       Condition SNOMED"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/index.html","id":"development-status","dir":"","previous_headings":"","what":"Development status","title":"Generate Candidate Codelists for the OMOP CDM","text":"Alpha","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"get_candidate_codes(   keywords,   domains = c(\"Condition\", \"Drug\", \"Observation\", \"Procedure\"),   standard_concept = \"Standard\",   search_synonyms = FALSE,   search_source = FALSE,   fuzzy_match = FALSE,   max_distance_substitutions = 0.1,   max_distance_deletions = 0.1,   max_distance_insertions = 0.1,   exclude = NULL,   include_descendants = TRUE,   include_ancestor = FALSE,   verbose = FALSE,   db,   vocabulary_database_schema )"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. domains Character vector one OMOP CDM domain. standard_concept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. search_synonyms Either TRUE FALSE. TRUE code also search via concept synonym table. search_source Either TRUE FALSE. TRUE code also search via source concepts. fuzzy_match Either TRUE FALSE. TRUE fuzzy matching used, approximate matches identified. max_distance_substitutions, maximum distance parameter substitution fuzzy matching (see ??base::agrep details). max_distance_deletions, maximum distance parameter deletion fuzzy matching (see ??base::agrep details). max_distance_insertions, maximum distance parameter insertion fuzzy matching (see ??base::agrep details). exclude Character vector words identify concepts exclude. include_descendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. include_ancestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist. verbose Either TRUE FALSE. TRUE, progress reported. db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"Dataframe","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"### note, Eunomia, used in the example below, ### does not include a full set of vocabularies. ### The full set can be downloaded from https://athena.ohdsi.org if (FALSE) { library(Eunomia) library(DBI) library(RSQLite) untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\",   package = \"Eunomia\" ), open = \"rb\"), exdir = tempdir() ) db <- DBI::dbConnect(   RSQLite::SQLite(),   paste0(tempdir(), \"\\\\cdm.sqlite\") ) get_candidate_codes(   keywords = \"asthma\",   search_synonyms = TRUE,   fuzzy_match = TRUE,   exclude = NULL,   include_descendants = TRUE,   include_ancestor = FALSE,   db = db,   vocabulary_database_schema = \"main\" ) }"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vocabulary version — get_vocab_version","title":"Get vocabulary version — get_vocab_version","text":"Get vocabulary version","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vocabulary version — get_vocab_version","text":"","code":"get_vocab_version(db, vocabulary_database_schema)"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vocabulary version — get_vocab_version","text":"db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vocabulary version — get_vocab_version","text":"Character vector","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/get_vocab_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get vocabulary version — get_vocab_version","text":"","code":"library(Eunomia) #> Loading required package: DatabaseConnector library(DBI) library(RSQLite) if (FALSE) { untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\",   package = \"Eunomia\" ), open = \"rb\"), exdir = tempdir() ) db <- DBI::dbConnect(RSQLite::SQLite(), paste0(tempdir(), \"\\\\cdm.sqlite\")) get_vocab_version(   db = db,   vocabulary_database_schema = \"main\" ) }"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from source vocabularies to standard — show_mappings","title":"Show mappings from source vocabularies to standard — show_mappings","text":"Show mappings source vocabularies standard","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"show_mappings(   candidate_codelist,   source_vocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\", \"LOINC\",     \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\"),   db,   vocabulary_database_schema )"},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from source vocabularies to standard — show_mappings","text":"candidate_codelist Dataframe source_vocabularies Character vector db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from source vocabularies to standard — show_mappings","text":"Dataframe","code":""},{"path":"https://oxford-pharmacoepi.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"### note, Eunomia, which is used for the example below, ### does not include a full set of vocabularies. ### The full set can be downloaded from https://athena.ohdsi.org library(Eunomia) library(RSQLite) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(DBI) untar(xzfile(system.file(\"sqlite\", \"cdm.tar.xz\",   package = \"Eunomia\" ), open = \"rb\"), exdir = tempdir() ) db <- DBI::dbConnect(RSQLite::SQLite(), paste0(tempdir(), \"\\\\cdm.sqlite\")) asthma_codes <- get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = \"main\" ) #> Error: no such table: main.concept show_mappings(   candidate_codelist = asthma_codes,   db = db,   vocabulary_database_schema = \"main\" ) #> Error in isTRUE(lhs): object 'asthma_codes' not found"}]
