[{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to CodelistGenerator","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"contributing-code-or-documentation","dir":"","previous_headings":"","what":"Contributing code or documentation","title":"Contributing to CodelistGenerator","text":"package developed part DARWIN EU(R) project closed external contributions. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Contributing code or documentation","what":"Documenting the package","title":"Contributing to CodelistGenerator","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Contributing code or documentation","what":"Run tests","title":"Contributing to CodelistGenerator","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:CodelistGenerator\", unload=TRUE) devtools::test_coverage()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Contributing code or documentation","what":"Adhere to code style","title":"Contributing to CodelistGenerator","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Contributing code or documentation","what":"Run check() before opening a pull request","title":"Contributing to CodelistGenerator","text":"opening pull request please make sure run: warnings seen. package CRAN close submitted CRAN please also run: Also can worth checking spelling urls","code":"devtools::check() rcmdcheck::rcmdcheck(args = c(\"--no-manual\", \"--as-cran\")) devtools::check_win_devel() spelling::spell_check_package() urlchecker::url_check()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"precompute-vignette-data","dir":"","previous_headings":"Contributing code or documentation","what":"Precompute vignette data","title":"Contributing to CodelistGenerator","text":"search results presented vignettes precomputed database full vocabulary. making changes affect results, recomputed. Note may need change database connection details script.","code":"source(here::here(\"extras\", \"precomputeVignetteData.R\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_GettingOmopCdmVocabularies.html","id":"connect-to-an-existing-omop-cdm-database","dir":"Articles","previous_headings":"","what":"Connect to an existing OMOP CDM database","title":"Getting the OMOP CDM vocabularies","text":"already access database data OMOP CDM format, can use CodelistGenerator first creating cdm reference include vocabulary tables. can see know various OMOP CDM vocabulary tables can work . important remember results tied vocabulary version used OMOP CDM database created. Moreover, also take note vocabularies included. couple CodelistGenerator utility functions can help us find information.","code":"library(DBI) library(duckdb) library(dplyr) library(CDMConnector) library(CodelistGenerator) requireEunomia() db <- dbConnect(duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(db,                    cdmSchema = \"main\",                    writeSchema = \"main\",                    writePrefix = \"cg_\") cdm #>  #> ── # OMOP CDM reference (duckdb) of Synthea ──────────────────────────────────── #> • omop tables: person, observation_period, visit_occurrence, visit_detail, #> condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, #> measurement, observation, death, note, note_nlp, specimen, fact_relationship, #> location, care_site, provider, payer_plan_period, cost, drug_era, dose_era, #> condition_era, metadata, cdm_source, concept, vocabulary, domain, #> concept_class, concept_relationship, relationship, concept_synonym, #> concept_ancestor, source_to_concept_map, drug_strength #> • cohort tables: - #> • achilles tables: - #> • other tables: - cdm$concept |> glimpse() #> Rows: ?? #> Columns: 10 #> Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpK7PHF3/file227323e540e.duckdb] #> $ concept_id       <int> 35208414, 1118088, 40213201, 1557272, 4336464, 429588… #> $ concept_name     <chr> \"Gastrointestinal hemorrhage, unspecified\", \"celecoxi… #> $ domain_id        <chr> \"Condition\", \"Drug\", \"Drug\", \"Drug\", \"Procedure\", \"Pr… #> $ vocabulary_id    <chr> \"ICD10CM\", \"RxNorm\", \"CVX\", \"RxNorm\", \"SNOMED\", \"SNOM… #> $ concept_class_id <chr> \"4-char billing code\", \"Branded Drug\", \"CVX\", \"Ingred… #> $ standard_concept <chr> NA, \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", NA, NA, \"S\", \"… #> $ concept_code     <chr> \"K92.2\", \"213469\", \"33\", \"46041\", \"232717009\", \"76601… #> $ valid_start_date <date> 2007-01-01, 1970-01-01, 2008-12-01, 1970-01-01, 1970… #> $ valid_end_date   <date> 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099… #> $ invalid_reason   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… cdm$concept_relationship |> glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpK7PHF3/file227323e540e.duckdb] #> $ concept_id_1     <int> 192671, 1118088, 1569708, 35208414, 35208414, 4016235… #> $ concept_id_2     <int> 35208414, 44923712, 35208414, 192671, 1569708, 450118… #> $ relationship_id  <chr> \"Mapped from\", \"Mapped from\", \"Subsumes\", \"Maps to\", … #> $ valid_start_date <date> 1970-01-01, 1970-01-01, 2016-03-25, 1970-01-01, 2016… #> $ valid_end_date   <date> 2099-12-31, 2099-12-31, 2099-12-31, 2099-12-31, 2099… #> $ invalid_reason   <chr> NA, NA, NA, NA, NA, NA, NA, NA cdm$concept_ancestor |> glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpK7PHF3/file227323e540e.duckdb] #> $ ancestor_concept_id      <int> 4180628, 4179141, 21500574, 21505770, 2150396… #> $ descendant_concept_id    <int> 313217, 4146173, 1118084, 1119510, 40162522, … #> $ min_levels_of_separation <int> 5, 2, 4, 0, 5, 4, 0, 4, 2, 2, 0, 0, 0, 0, 0, … #> $ max_levels_of_separation <int> 6, 2, 4, 0, 6, 4, 0, 4, 2, 2, 0, 0, 0, 0, 0, … cdm$concept_synonym |> glimpse() #> Rows: ?? #> Columns: 3 #> Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpK7PHF3/file227323e540e.duckdb] #> $ concept_id           <int> 964261, 1322184, 441267, 1718412, 4336464, 410212… #> $ concept_synonym_name <chr> \"cyanocobalamin 5000 MCG/ML Injectable Solution\",… #> $ language_concept_id  <int> 4180186, 4180186, 4180186, 4180186, 4180186, 4180… cdm$drug_strength |> glimpse() #> Rows: ?? #> Columns: 12 #> Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpK7PHF3/file227323e540e.duckdb] #> $ drug_concept_id             <int>  #> $ ingredient_concept_id       <int>  #> $ amount_value                <dbl>  #> $ amount_unit_concept_id      <int>  #> $ numerator_value             <dbl>  #> $ numerator_unit_concept_id   <int>  #> $ denominator_value           <dbl>  #> $ denominator_unit_concept_id <int>  #> $ box_size                    <int>  #> $ valid_start_date            <date>  #> $ valid_end_date              <date>  #> $ invalid_reason              <chr> getVocabVersion(cdm) #> [1] \"v5.0 18-JAN-19\" getVocabularies(cdm) #> [1] \"CVX\"     \"Gender\"  \"ICD10CM\" \"LOINC\"   \"NDC\"     \"None\"    \"RxNorm\"  #> [8] \"SNOMED\"  \"Visit\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_GettingOmopCdmVocabularies.html","id":"create-a-local-vocabulary-database","dir":"Articles","previous_headings":"","what":"Create a local vocabulary database","title":"Getting the OMOP CDM vocabularies","text":"don’t access OMOP CDM database want work specific vocabulary version set vocabularies can create vocabulary database.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_GettingOmopCdmVocabularies.html","id":"download-vocabularies-from-athena","dir":"Articles","previous_headings":"Create a local vocabulary database","what":"Download vocabularies from athena","title":"Getting the OMOP CDM vocabularies","text":"first step get vocabulary tables OMOP CDM. go https://athena.ohdsi.org/. can, creating free account, download vocabularies. default getting latest version default set vocabularies. can though choose download older version expand selection vocabularies. general suggest select available vocabularies.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_GettingOmopCdmVocabularies.html","id":"create-a-duckdb-database","dir":"Articles","previous_headings":"Create a local vocabulary database","what":"Create a duckdb database","title":"Getting the OMOP CDM vocabularies","text":"downloading vocabularies set csvs (along tool add CPT-4 codes wish). quickly create duckdb vocab database use following code. , pointing unzipped folder containg csvs, ’ll read table memory write duckdb database ’ll save folder. ’ll also add empty person observation period table can create cdm reference end. Now create cdm reference OMOP CDM vocabulary database. vocabulary database can used various functions identifying codes interest. However, doesn’t contain patient-level records won’t relevant functions summarising use codes, etc. shown make local duckdb database, similar approach also used database management systems.","code":"library(readr) library(DBI) library(duckdb) library(omopgenerics)  vocab_folder <- here() # add path to directory  # read in files concept <- read_delim(here(vocab_folder, \"CONCEPT.csv\"),                       \"\\t\",                       escape_double = FALSE, trim_ws = TRUE ) concept_relationship <- read_delim(here(vocab_folder, \"CONCEPT_RELATIONSHIP.csv\"),                                    \"\\t\",                                    escape_double = FALSE, trim_ws = TRUE ) concept_ancestor <- read_delim(here(vocab_folder, \"CONCEPT_ANCESTOR.csv\"),                                \"\\t\",                                escape_double = FALSE, trim_ws = TRUE ) concept_synonym <- read_delim(here(vocab_folder, \"CONCEPT_SYNONYM.csv\"),                               \"\\t\",                               escape_double = FALSE, trim_ws = TRUE ) vocabulary <- read_delim(here(vocab_folder, \"VOCABULARY.csv\"), \"\\t\",                          escape_double = FALSE, trim_ws = TRUE )  # write to duckdb db <- dbConnect(duckdb(), here(vocab_folder,\"vocab.duckdb\")) dbWriteTable(db, \"concept\", concept, overwrite = TRUE) dbWriteTable(db, \"concept_relationship\", concept_relationship, overwrite = TRUE) dbWriteTable(db, \"concept_ancestor\", concept_ancestor, overwrite = TRUE) dbWriteTable(db, \"concept_synonym\", concept_synonym, overwrite = TRUE) dbWriteTable(db, \"vocabulary\", vocabulary, overwrite = TRUE) # add empty person and observation period tables person_cols <- omopColumns(\"person\") person <- data.frame(matrix(ncol = length(person_cols), nrow = 0)) colnames(person) <- person_cols dbWriteTable(db, \"person\", person, overwrite = TRUE) observation_period_cols <- omopColumns(\"observation_period\") observation_period <- data.frame(matrix(ncol = length(observation_period_cols), nrow = 0)) colnames(observation_period) <- observation_period_cols dbWriteTable(db, \"observation_period\", observation_period, overwrite = TRUE) dbDisconnect(db) db <- dbConnect(duckdb(), here(vocab_folder,\"vocab.duckdb\")) cdm <- cdmFromCon(db, \"main\", \"main\", cdmName = \"vocabularise\", .softValidation = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_ExploreCDMvocabulary.html","id":"vocabulary-characteristics","dir":"Articles","previous_headings":"","what":"Vocabulary characteristics","title":"Exploring the OMOP CDM vocabulary tables","text":"can first start getting vocabulary version CDM object: available vocabularies, correspond column vocabulary_id concept table:","code":"getVocabVersion(cdm) #> [1] \"v5.0 06-AUG-21\" getVocabularies(cdm) #>  [1] \"APC\"                  \"ATC\"                  \"BDPM\"                 #>  [4] \"CMS Place of Service\" \"Cohort\"               \"Concept Class\"        #>  [7] \"Condition Type\"       \"CPT4\"                 \"Currency\"             #> [10] \"Death Type\"           \"Device Type\"          \"Domain\"               #> [13] \"DPD\"                  \"DRG\"                  \"Drug Type\"            #> [16] \"Ethnicity\"            \"Gemscript\"            \"Gender\"               #> [19] \"HCPCS\"                \"HES Specialty\"        \"ICD10\"                #> [22] \"ICD10CM\"              \"ICD9CM\"               \"ICD9Proc\"             #> [25] \"LOINC\"                \"MDC\"                  \"Meas Type\"            #> [28] \"Multilex\"             \"Multum\"               \"NDC\"                  #> [31] \"NDFRT\"                \"None\"                 \"Note Type\"            #> [34] \"NUCC\"                 \"Obs Period Type\"      \"Observation Type\"     #> [37] \"OPCS4\"                \"OXMIS\"                \"PCORNet\"              #> [40] \"Procedure Type\"       \"Provider\"             \"Race\"                 #> [43] \"Read\"                 \"Relationship\"         \"Revenue Code\"         #> [46] \"RxNorm\"               \"RxNorm Extension\"     \"SMQ\"                  #> [49] \"SNOMED\"               \"SPL\"                  \"Supplier\"             #> [52] \"UCUM\"                 \"VA Class\"             \"VA Product\"           #> [55] \"Visit\"                \"Visit Type\"           \"Vocabulary\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_ExploreCDMvocabulary.html","id":"domains","dir":"Articles","previous_headings":"","what":"Domains","title":"Exploring the OMOP CDM vocabulary tables","text":"can also explore domains CDM object , column domain_id concept table: restrict search among standard concepts:","code":"getDomains(cdm) #>  [1] \"Drug\"                \"Provider\"            \"Device\"              #>  [4] \"Procedure\"           \"Meas Value\"          \"Metadata\"            #>  [7] \"Ethnicity\"           \"Race\"                \"Gender\"              #> [10] \"Measurement\"         \"Spec Anatomic Site\"  \"Meas Value Operator\" #> [13] \"Revenue Code\"        \"Unit\"                \"Visit\"               #> [16] \"Observation\"         \"Condition\"           \"Relationship\"        #> [19] \"Specimen\"            \"Route\"               \"Currency\"            #> [22] \"Spec Disease Status\" getDomains(cdm,             standardConcept = \"Standard\") #>  [1] \"Observation\"         \"Condition\"           \"Unit\"                #>  [4] \"Visit\"               \"Measurement\"         \"Spec Anatomic Site\"  #>  [7] \"Meas Value Operator\" \"Revenue Code\"        \"Drug\"                #> [10] \"Device\"              \"Meas Value\"          \"Procedure\"           #> [13] \"Provider\"            \"Gender\"              \"Race\"                #> [16] \"Ethnicity\"           \"Metadata\"            \"Relationship\"        #> [19] \"Specimen\"            \"Route\"               \"Spec Disease Status\" #> [22] \"Currency\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_ExploreCDMvocabulary.html","id":"concept-class","dir":"Articles","previous_headings":"","what":"Concept class","title":"Exploring the OMOP CDM vocabulary tables","text":"can explore different classes (reported concept_class_id column concept table): restrict search among non-standard concepts condition domain:","code":"getConceptClassId(cdm) #>  [1] \"2-dig nonbill code\"   \"3-dig billing code\"   \"3-dig nonbill code\"   #>  [4] \"4-dig billing code\"   \"Admitting Source\"     \"Answer\"               #>  [7] \"APC\"                  \"Attribute\"            \"Body Structure\"       #> [10] \"Branded Drug\"         \"Branded Drug Box\"     \"Branded Drug Comp\"    #> [13] \"Branded Drug Form\"    \"Branded Pack\"         \"Branded Pack Box\"     #> [16] \"Canonical Unit\"       \"Claims Attachment\"    \"Clinical Drug\"        #> [19] \"Clinical Drug Box\"    \"Clinical Drug Comp\"   \"Clinical Drug Form\"   #> [22] \"Clinical Finding\"     \"Clinical Observation\" \"Clinical Pack\"        #> [25] \"Clinical Pack Box\"    \"Context-dependent\"    \"CPT4\"                 #> [28] \"CPT4 Hierarchy\"       \"CPT4 Modifier\"        \"Currency\"             #> [31] \"Device\"               \"Discharge Status\"     \"Disposition\"          #> [34] \"Doc Kind\"             \"Doc Role\"             \"Doc Setting\"          #> [37] \"Doc Subject Matter\"   \"Doc Type of Service\"  \"Dose Form\"            #> [40] \"Ethnicity\"            \"Event\"                \"Gemscript\"            #> [43] \"Gemscript THIN\"       \"Gender\"               \"HCPCS\"                #> [46] \"HCPCS Modifier\"       \"Ingredient\"           \"Lab Test\"             #> [49] \"Linkage Assertion\"    \"Location\"             \"Marketed Product\"     #> [52] \"MDC\"                  \"Morph Abnormality\"    \"MS-DRG\"               #> [55] \"Observable Entity\"    \"Observation\"          \"Organism\"             #> [58] \"Pharma/Biol Product\"  \"Physical Force\"       \"Physical Object\"      #> [61] \"Physician Specialty\"  \"Procedure\"            \"Provider\"             #> [64] \"Qualifier Value\"      \"Quant Branded Box\"    \"Quant Branded Drug\"   #> [67] \"Quant Clinical Box\"   \"Quant Clinical Drug\"  \"Race\"                 #> [70] \"Relationship\"         \"Revenue Code\"         \"Social Context\"       #> [73] \"Specimen\"             \"Staging / Scales\"     \"Substance\"            #> [76] \"Survey\"               \"Unit\"                 \"Visit\" getConceptClassId(cdm,                    standardConcept = \"Non-standard\",                    domain = \"Condition\") #>  [1] \"3-char billing code\"  \"3-char nonbill code\"  \"3-dig billing code\"   #>  [4] \"3-dig billing E code\" \"3-dig billing V code\" \"3-dig nonbill code\"   #>  [7] \"3-dig nonbill E code\" \"3-dig nonbill V code\" \"4-char billing code\"  #> [10] \"4-char nonbill code\"  \"4-dig billing code\"   \"4-dig billing E code\" #> [13] \"4-dig billing V code\" \"4-dig nonbill code\"   \"4-dig nonbill V code\" #> [16] \"5-char billing code\"  \"5-char nonbill code\"  \"5-dig billing code\"   #> [19] \"5-dig billing V code\" \"6-char billing code\"  \"6-char nonbill code\"  #> [22] \"7-char billing code\"  \"Admin Concept\"        \"Clinical Finding\"     #> [25] \"Context-dependent\"    \"Event\"                \"ICD10 code\"           #> [28] \"ICD10 Hierarchy\"      \"ICD10 SubChapter\"     \"ICD9CM code\"          #> [31] \"Morph Abnormality\"    \"Navi Concept\"         \"Observable Entity\"    #> [34] \"Organism\"             \"OXMIS\"                \"Pharma/Biol Product\"  #> [37] \"Physical Object\"      \"Procedure\"            \"Qualifier Value\"      #> [40] \"Read\"                 \"SMQ\"                  \"Social Context\"       #> [43] \"Staging / Scales\"     \"Substance\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_ExploreCDMvocabulary.html","id":"relationships","dir":"Articles","previous_headings":"","what":"Relationships","title":"Exploring the OMOP CDM vocabulary tables","text":"can also explore different relationships present CDM: narrow search among standard concepts domain observation:","code":"getRelationshipId(cdm) #>  [1] \"Asso finding of\"   \"Asso with finding\" \"Due to of\"         #>  [4] \"Finding asso with\" \"Followed by\"       \"Follows\"           #>  [7] \"Has asso finding\"  \"Has due to\"        \"Has manifestation\" #> [10] \"Is a\"              \"Manifestation of\"  \"Mapped from\"       #> [13] \"Maps to\"           \"Occurs after\"      \"Occurs before\"     #> [16] \"Subsumes\" getRelationshipId(cdm,                   standardConcept1 = \"standard\",                   standardConcept2 = \"standard\",                   domains1 = \"observation\",                   domains2 = \"observation\") #>   [1] \"Access of\"            \"Admin method of\"      \"Asso finding of\"      #>   [4] \"Asso morph of\"        \"Asso proc of\"         \"Asso with finding\"    #>   [7] \"Basic dose form of\"   \"Causative agent of\"   \"Characterizes\"        #>  [10] \"Clinical course of\"   \"Component of\"         \"Contained in panel\"   #>  [13] \"CPT4 - SNOMED cat\"    \"CPT4 - SNOMED eq\"     \"Dir morph of\"         #>  [16] \"Dir subst of\"         \"Disp dose form of\"    \"Dose form of\"         #>  [19] \"DRG - MDC cat\"        \"Due to of\"            \"Energy used by\"       #>  [22] \"Finding asso with\"    \"Finding context of\"   \"Finding inform of\"    #>  [25] \"Focus of\"             \"Has access\"           \"Has admin method\"     #>  [28] \"Has asso finding\"     \"Has asso morph\"       \"Has asso proc\"        #>  [31] \"Has basic dose form\"  \"Has causative agent\"  \"Has clinical course\"  #>  [34] \"Has component\"        \"Has dir morph\"        \"Has dir subst\"        #>  [37] \"Has disp dose form\"   \"Has dose form\"        \"Has due to\"           #>  [40] \"Has finding context\"  \"Has focus\"            \"Has intended site\"    #>  [43] \"Has intent\"           \"Has interprets\"       \"Has laterality\"       #>  [46] \"Has method\"           \"Has modification\"     \"Has occurrence\"       #>  [49] \"Has pathology\"        \"Has priority\"         \"Has proc context\"     #>  [52] \"Has proc duration\"    \"Has proc morph\"       \"Has process output\"   #>  [55] \"Has property\"         \"Has recipient cat\"    \"Has relat context\"    #>  [58] \"Has release charact\"  \"Has scale type\"       \"Has severity\"         #>  [61] \"Has spec active ing\"  \"Has state of matter\"  \"Has technique\"        #>  [64] \"Has temp finding\"     \"Has temporal context\" \"Has time aspect\"      #>  [67] \"Has transformation\"   \"Intended site of\"     \"Intent of\"            #>  [70] \"Interprets of\"        \"Is a\"                 \"Is characterized by\"  #>  [73] \"Laterality of\"        \"Mapped from\"          \"Maps to\"              #>  [76] \"Maps to value\"        \"MDC cat - DRG\"        \"Method of\"            #>  [79] \"Modification of\"      \"Occurrence of\"        \"Panel contains\"       #>  [82] \"Pathology of\"         \"Plays role\"           \"Priority of\"          #>  [85] \"Proc context of\"      \"Proc duration of\"     \"Proc morph of\"        #>  [88] \"Process output of\"    \"Property of\"          \"Recipient cat of\"     #>  [91] \"Relat context of\"     \"Relative to\"          \"Relative to of\"       #>  [94] \"Release charact of\"   \"Role played by\"       \"Scale type of\"        #>  [97] \"Severity of\"          \"SNOMED - CPT4 eq\"     \"SNOMED cat - CPT4\"    #> [100] \"Spec active ing of\"   \"State of matter of\"   \"Subst used by\"        #> [103] \"Subsumes\"             \"Technique of\"         \"Temp related to\"      #> [106] \"Temporal context of\"  \"Time aspect of\"       \"Transformation of\"    #> [109] \"Using energy\"         \"Using finding inform\" \"Using subst\"          #> [112] \"Value mapped from\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_ExploreCDMvocabulary.html","id":"codes-in-use","dir":"Articles","previous_headings":"","what":"Codes in use","title":"Exploring the OMOP CDM vocabulary tables","text":"Finally, can easily get codes use (means, recorded least one time database): Notice achilles tables used function. CDM loaded, empty result returned. can restrict search within specific CDM tables (example, condition_occurrence device_exposure table):","code":"result <- sourceCodesInUse(cdm) head(result, n = 5) # Only the first 5 will be shown #> [1] 2615112 2615874 2720866 2614744 2615154 result <- sourceCodesInUse(cdm, table = c(\"device_exposure\", \"condition_occurrence\")) head(result, n = 5) # Only the first 5 will be shown #> [1]  2617384 44834363 44836641  2617225 44832475"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"search-for-keyword-match","dir":"Articles","previous_headings":"","what":"Search for keyword match","title":"Generate a candidate codelist","text":"start creating codelist keywords match. Let’s say want find codes contain “Musculoskeletal disorder” concept_name: Note also identify based partial match based combinations match. Notice currently looking concepts domain = \"Condition\". However, can expand search domains using domain = NULL.","code":"getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",    standardConcept = \"Standard\",   includeDescendants = FALSE,   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeAncestor = FALSE ) #> # A tibble: 1 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal\",   domains = \"Condition\",   standardConcept = \"Standard\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeDescendants = FALSE,   includeAncestor = FALSE ) #> # A tibble: 1 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S  getCandidateCodes(   cdm = cdm,   keywords = \"Disorder musculoskeletal\",   domains = \"Condition\",   standardConcept = \"Standard\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeDescendants = FALSE,   includeAncestor = FALSE ) #> # A tibble: 1 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"include-non-standard-concepts","dir":"Articles","previous_headings":"","what":"Include non-standard concepts","title":"Generate a candidate codelist","text":"Now include standard non-standard concepts initial search. setting standardConcept = c(\"Non-standard\", \"Standard\"), allow function return, final candidate codelist, non-standard standard codes found.","code":"getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   standardConcept = c(\"Non-standard\", \"Standard\"),   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeDescendants = FALSE,   includeAncestor = FALSE ) #> # A tibble: 2 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S                #> 2         24 From initial… Other muscu… Condition SNOMED        NA"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"multiple-search-terms","dir":"Articles","previous_headings":"","what":"Multiple search terms","title":"Generate a candidate codelist","text":"can also search multiple keywords simultaneously, capturing following search:","code":"getCandidateCodes(   cdm = cdm,   keywords = c(     \"Musculoskeletal disorder\",     \"arthritis\"   ),   domains = \"Condition\",   standardConcept = c(\"Standard\"),   includeDescendants = FALSE,   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeAncestor = FALSE ) #> # A tibble: 4 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S                #> 2          3 From initial… Arthritis    Condition SNOMED        S                #> 3          4 From initial… Osteoarthri… Condition SNOMED        S                #> 4          5 From initial… Osteoarthri… Condition SNOMED        S"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"add-descendants","dir":"Articles","previous_headings":"","what":"Add descendants","title":"Generate a candidate codelist","text":"Now include descendants identified code using includeDescendants argument Notice now, column found_from, can see obtain concept_id=1 initial search, concept_id_=c(2,3,4,5) searching descendants concept_id 1.","code":"getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   standardConcept = \"Standard\",   includeDescendants = TRUE,   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeAncestor = FALSE ) #> # A tibble: 5 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S                #> 2          2 From descend… Osteoarthro… Condition SNOMED        S                #> 3          3 From descend… Arthritis    Condition SNOMED        S                #> 4          4 From descend… Osteoarthri… Condition SNOMED        S                #> 5          5 From descend… Osteoarthri… Condition SNOMED        S"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"with-exclusions","dir":"Articles","previous_headings":"","what":"With exclusions","title":"Generate a candidate codelist","text":"can also exclude specific keywords using argument exclude","code":"getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   exclude = c(\"Osteoarthrosis\", \"knee\"),   standardConcept = \"Standard\",   includeDescendants = TRUE,   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeAncestor = FALSE ) #> # A tibble: 3 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          1 From initial… Musculoskel… Condition SNOMED        S                #> 2          3 From descend… Arthritis    Condition SNOMED        S                #> 3          5 From descend… Osteoarthri… Condition SNOMED        S"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"add-ancestor","dir":"Articles","previous_headings":"","what":"Add ancestor","title":"Generate a candidate codelist","text":"include ancestors one level identified concepts, can use argument includeAncestor","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Osteoarthritis of knee\",   includeAncestor = TRUE,   domains = \"Condition\",   standardConcept = \"Standard\",   includeDescendants = TRUE,   searchInSynonyms = FALSE,   searchNonStandard = FALSE, )  codes #> # A tibble: 2 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          4 From initial… Osteoarthri… Condition SNOMED        S                #> 2          3 From ancestor Arthritis    Condition SNOMED        S"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"search-using-synonyms","dir":"Articles","previous_headings":"","what":"Search using synonyms","title":"Generate a candidate codelist","text":"can also pick codes based synonyms. example, Osteoarthrosis synonym Arthritis. Notice includeDescendants = TRUE, Arthritis descendants also included:","code":"getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthrosis\",   domains = \"Condition\",   searchInSynonyms = TRUE,   standardConcept = \"Standard\",   includeDescendants = FALSE,   searchNonStandard = FALSE,   includeAncestor = FALSE ) #> # A tibble: 2 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          2 From initial… Osteoarthro… Condition SNOMED        S                #> 2          3 In synonyms   Arthritis    Condition SNOMED        S getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthrosis\",   domains = \"Condition\",   searchInSynonyms = TRUE,   standardConcept = \"Standard\",   includeDescendants = TRUE,   searchNonStandard = FALSE,   includeAncestor = FALSE ) #> # A tibble: 4 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          2 From initial… Osteoarthro… Condition SNOMED        S                #> 2          3 In synonyms   Arthritis    Condition SNOMED        S                #> 3          4 From descend… Osteoarthri… Condition SNOMED        S                #> 4          5 From descend… Osteoarthri… Condition SNOMED        S"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_GenerateCandidateCodelist.html","id":"search-via-non-standard","dir":"Articles","previous_headings":"","what":"Search via non-standard","title":"Generate a candidate codelist","text":"can also pick concepts associated keyword via non-standard search. Let’s take moment focus standardConcept searchNonStandard arguments clarify difference . standardConcept specifies whether want standard concepts also include non-standard concepts final candidate codelist. searchNonStandard determines whether want search keywords among non-standard concepts. previous example, since set standardConcept = \"Standard\", retrieved code Osteoarthrosis non-standard search. However, obtain non-standard code degenerative arthropathy initial search. allow non-standard concepts final candidate codelist, retireve codes:","code":"codes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"Degenerative\",   domains = \"Condition\",   standardConcept = \"Standard\",   searchNonStandard = TRUE,   includeDescendants = FALSE,   searchInSynonyms = FALSE,   includeAncestor = FALSE ) codes1 #> # A tibble: 1 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          2 From non-sta… Osteoarthro… Condition SNOMED        S codes2 <- getCandidateCodes(   cdm = cdm,   keywords = \"Degenerative\",   domains = \"Condition\",   standardConcept = c(\"Non-standard\", \"Standard\"),   searchNonStandard = FALSE,   includeDescendants = FALSE,   searchInSynonyms = FALSE,   includeAncestor = FALSE ) codes2 #> # A tibble: 1 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          7 From initial… Degenerativ… Condition Read          NA"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_GenerateVocabularyBasedCodelist.html","id":"ingredient-based-codelists","dir":"Articles","previous_headings":"","what":"Ingredient based codelists","title":"Generating vocabulary based codelists for medications","text":"getDrugIngredientCodes() function can used generate medication codelists based ingredient codes. can see many drug ingredients create codelists. likely interested specific drug ingredients interest. Say example like codelist acetaminophen can get easily enough. Notice either concept name concept ID can specified find relevant codes. Instead getting back concepts acetaminophen, can use ingredientRange argument return concepts associated acetaminophen least one drug ingredient (.e. combination therapies). instead returning codelist concept IDs, get details can see concept names. instead return concepts associated acetaminophen drug ingredient.","code":"availableIngredients(cdm) |> glimpse() #>  chr [1:15440] \"Abies Nigra\" \"Achyranthes Calea\" \"Adamas\" ... acetaminophen_codes <- getDrugIngredientCodes(   cdm = cdm,   name = c(\"acetaminophen\") )  acetaminophen_codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 161_acetaminophen (23935 codes) acetaminophen_codes <- getDrugIngredientCodes(   cdm = cdm,   name = 1125315 )  acetaminophen_codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 161_acetaminophen (23935 codes) acetaminophen_two_or_more_ingredients <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   ingredientRange = c(2, Inf),   type = \"codelist_with_details\" )  acetaminophen_two_or_more_ingredients #>  #> ── 1 codelist with details ───────────────────────────────────────────────────── #>  #> - 161_acetaminophen (15309 codes)  acetaminophen_two_or_more_ingredients[[1]] |>    pull(\"concept_name\") |>    head(n = 5) # Only the first five will be shown #> [1] \"Acetaminophen 80 MG / Pseudoephedrine 7.5 MG Oral Tablet [Tylenol] by Mcneil care\"                #> [2] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet [Sinutab] by Mcneil care\"                #> [3] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet by Laboratoire Riva\"                     #> [4] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet [Contac] by Glaxosmithkline\"             #> [5] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet [Cold And Sinus Daytime Relief] by Viva\" acetaminophen_one_ingredient <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   ingredientRange = c(1, 1),   type = \"codelist_with_details\" )  acetaminophen_one_ingredient #>  #> ── 1 codelist with details ───────────────────────────────────────────────────── #>  #> - 161_acetaminophen (8626 codes)  acetaminophen_one_ingredient[[1]] |>    pull(\"concept_name\") |>    head(n = 5) # Only the first five will be shown #> [1] \"Acetaminophen Oral Suspension [Junior Parapaed]\"                                  #> [2] \"Acetaminophen Prefilled Syringe [Perfalgan]\"                                      #> [3] \"Acetaminophen 24 MG/ML Oral Suspension [Lloydspharmacy Paracetamol] by Lloyds cy\" #> [4] \"Acetaminophen 24 MG/ML Oral Suspension [Galpamol for Children] Box of 10\"         #> [5] \"Acetaminophen 30 MG Rectal Suppository Box of 10\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_GenerateVocabularyBasedCodelist.html","id":"restrict-to-a-specific-dose-form","dir":"Articles","previous_headings":"Ingredient based codelists","what":"Restrict to a specific dose form","title":"Generating vocabulary based codelists for medications","text":"Perhaps just interested particular dose form. can see many available. can choose one restrict particular dose form finding relevant codes. , example, include codes dose form injection.","code":"getDoseForm(cdm) |> glimpse() #>  chr [1:185] \"Augmented Topical Cream\" \"Augmented Topical Gel\" ... acetaminophen_injections <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   doseForm = \"injection\",   type = \"codelist_with_details\" )  acetaminophen_injections[[1]] |>    pull(\"concept_name\") |>    head(n = 5)  #> [1] \"100 ML Acetaminophen 10 MG/ML Injection Box of 10 by Kent\"                            #> [2] \"100 ML Acetaminophen 10 MG/ML Injection Box of 10 by Accord\"                          #> [3] \"100 ML Acetaminophen 10 MG/ML Injection by Kent\"                                      #> [4] \"100 ML Acetaminophen 10 MG/ML Injection by Accord\"                                    #> [5] \"50 ML Acetaminophen 10 MG/ML Injection [Perfalgan] Box of 12 by Bristol Myers Squibb\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_GenerateVocabularyBasedCodelist.html","id":"restrict-to-a-specific-dose-unit","dir":"Articles","previous_headings":"Ingredient based codelists","what":"Restrict to a specific dose unit","title":"Generating vocabulary based codelists for medications","text":"Similarly, can might also want restrict specific dose unit. number options available vocabularies. ’ll just include codes dose unit milligram.","code":"getDoseUnit(cdm) |> glimpse() #>  chr [1:30] \"50% cell culture infectious dose\" ... acetaminophen_miligram <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   doseUnit = \"milligram\",   type = \"codelist_with_details\" )  acetaminophen_miligram[[1]] |>    pull(\"concept_name\") |>    head(n = 5)  #> [1] \"Acetaminophen 80 MG / Pseudoephedrine 7.5 MG Oral Tablet [Tylenol] by Mcneil care\"                #> [2] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet [Sinutab] by Mcneil care\"                #> [3] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet by Laboratoire Riva\"                     #> [4] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet [Contac] by Glaxosmithkline\"             #> [5] \"Acetaminophen 500 MG / Pseudoephedrine 30 MG Oral Tablet [Cold And Sinus Daytime Relief] by Viva\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_GenerateVocabularyBasedCodelist.html","id":"restrict-to-a-specific-route","dir":"Articles","previous_headings":"Ingredient based codelists","what":"Restrict to a specific route","title":"Generating vocabulary based codelists for medications","text":"Lastly, can restrict specific route category. can see number options. ’ll include concepts route category inhalable.","code":"getRouteCategories(cdm) |> glimpse() #>  chr [1:12] \"implant\" \"inhalable\" \"injectable\" \"oral\" \"topical\" ... acetaminophen_inhalable <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   routeCategory = \"inhalable\",   type = \"codelist_with_details\" )  acetaminophen_inhalable[[1]] |>    pull(\"concept_name\") |>    head(n = 5)  #> [1] \"acetaminophen 300 MG Inhalation Powder\" #> [2] \"acetaminophen 120 MG Inhalation Powder\" #> [3] \"acetaminophen Inhalation Powder\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_GenerateVocabularyBasedCodelist.html","id":"search-multiple-ingredients","dir":"Articles","previous_headings":"Ingredient based codelists","what":"Search multiple ingredients","title":"Generating vocabulary based codelists for medications","text":"previous examples focused single drug ingredient, acetaminophen. can though specify multiple ingredients, case get codelist back . don´t specify ingredient, get codelist every drug ingredient vocabularies!","code":"acetaminophen_heparin_codes <- getDrugIngredientCodes(   cdm = cdm,   name = c(\"acetaminophen\", \"heparin\")   )  acetaminophen_heparin_codes #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - 161_acetaminophen (23935 codes) #> - 5224_heparin (6981 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_GenerateVocabularyBasedCodelist.html","id":"atc-based-codelists","dir":"Articles","previous_headings":"","what":"ATC based codelists","title":"Generating vocabulary based codelists for medications","text":"Analogous getDrugIngredientCodes(), getATCCodes() can used generate codelist based particular ATC class. ATC five levels classification interested . first level broadest fifth narrowest. example, produce ATC level 1 codelist based Alimentary Tract Metabolism Drugs. Similarly getDrugIngredientCodes(), can use nameStyle specify name elements list, type argument obtain codelist details, doseForm argument restrict specific dose forms, doseUnit argument restrict specific dose unit, routeCategory argument restrict specific route categories.","code":"availableATC(cdm, level = c(\"ATC 1st\")) |> glimpse() #>  chr [1:14] \"ALIMENTARY TRACT AND METABOLISM\" ... availableATC(cdm, level = c(\"ATC 2nd\")) |> glimpse() #>  chr [1:94] \"STOMATOLOGICAL PREPARATIONS\" ... availableATC(cdm, level = c(\"ATC 3rd\")) |> glimpse() #>  chr [1:267] \"STOMATOLOGICAL PREPARATIONS\" \"ANTACIDS\" ... availableATC(cdm, level = c(\"ATC 4th\")) |> glimpse() #>  chr [1:890] \"Other hematological agents\" ... availableATC(cdm, level = c(\"ATC 5th\")) |> glimpse() #>  chr [1:5131] \"insulin degludec and insulin aspart; parenteral\" ... atc_codelist <- getATCCodes(   cdm = cdm,   level = \"ATC 1st\",   name = \"alimentary tract and metabolism\" )  atc_codelist #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - A_alimentary_tract_and_metabolism (211265 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"introduction-creating-a-vocabulary-based-codelist-for-conditions","dir":"Articles","previous_headings":"","what":"Introduction: Creating a vocabulary-based codelist for conditions","title":"Generating vocabulary based codelists for conditions","text":"vignette, explore generate codelists conditions using OMOP CDM vocabulary tables. note start many caveats creating conditions codelists based vocabularies compared medications. particular hierarchies group medications lot black white conditions. said can generate vocabulary based codelists conditions. use ICD10 foundation grouping condition-related codes. begin, let’s load necessary packages create cdm reference using Eunomia mock data. can see ICD10 codes come four different levels granularity, chapters broadest codes narrowest.","code":"library(DBI) library(duckdb) library(dplyr) library(CDMConnector) library(CodelistGenerator)  # Connect to the database and create the cdm object con <- dbConnect(duckdb(),                   eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- cdmFromCon(con = con,                    cdmName = \"Eunomia Synpuf\",                   cdmSchema = \"main\",                   writeSchema = \"main\",                   achillesSchema = \"main\") availableICD10(cdm, level = \"ICD10 Chapter\") |>    glimpse() #>  chr [1:22] \"Certain infectious and parasitic diseases\" \"Neoplasms\" ... availableICD10(cdm, level = \"ICD10 SubChapter\") |>    glimpse() #>  chr [1:274] \"Intestinal infectious diseases\" \"Tuberculosis\" ... availableICD10(cdm, level = \"ICD10 Hierarchy\") |>    glimpse() #>  chr [1:2093] \"Other salmonella infections\" ... availableICD10(cdm, level = \"ICD10 Code\") |>    glimpse() #>  chr [1:14130] \"Enteropathogenic Escherichia coli infection\" ..."},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"icd10-chapter-codelists","dir":"Articles","previous_headings":"","what":"ICD10 chapter codelists","title":"Generating vocabulary based codelists for conditions","text":"can use getICD10StandardCodes() generate condition codelists based ICD10 chapters. ICD10 non-standard vocabulary OMOP CDM, function returns standard concepts associated ICD10 chapters subchapters directly via mapping indirectly descendant concept code mapped . important note getICD10StandardCodes() return results ICD codes included vocabulary tables. can start getting codelist chapters. result standard OMOP CDM concepts. , ICD10 non-standard, ’ll first identify ICD10 codes interest map across standard equivalents (using concept relationship table). Instead getting chapters, instead specify one interest. , example, try generate codelist mental behavioural disorders (ICD chapter V).","code":"icd_chapters <- getICD10StandardCodes(cdm = cdm,                                       level = \"ICD10 Chapter\") #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts icd_chapters |> length() #> [1] 22 icd_chapters #>  #> ── 22 codelists ──────────────────────────────────────────────────────────────── #>  #> - i_certain_infectious_and_parasitic_diseases (65191 codes) #> - ii_neoplasms (16262 codes) #> - iii_diseases_of_the_blood_and_blood_forming_organs_and_certain_disorders_involving_the_immune_mechanism (6604 codes) #> - iv_endocrine_nutritional_and_metabolic_diseases (13483 codes) #> - ix_diseases_of_the_circulatory_system (38407 codes) #> - v_mental_and_behavioural_disorders (4602 codes) #> along with 16 more codelists mental_and_behavioural_disorders <- getICD10StandardCodes(   cdm = cdm,   name = \"Mental and behavioural disorders\",   level = \"ICD10 Chapter\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts mental_and_behavioural_disorders #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - v_mental_and_behavioural_disorders (4602 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"icd10-subchapter-codelists","dir":"Articles","previous_headings":"","what":"ICD10 subchapter codelists","title":"Generating vocabulary based codelists for conditions","text":"Instead chapter level, instead use ICD10 sub-chapters. can get codelists sub-chapters, ’ll many chapter level. specify particular sub-chapters interest. ’ll get codes Mood [affective] disorders (ICD10 F30-F39).","code":"icd_subchapters <- getICD10StandardCodes(   cdm = cdm,   level = \"ICD10 SubChapter\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts icd_subchapters |> length() #> [1] 260 icd_subchapters #>  #> ── 260 codelists ─────────────────────────────────────────────────────────────── #>  #> - a00_a09_intestinal_infectious_diseases (1532 codes) #> - a15_a19_tuberculosis (440 codes) #> - a20_a28_certain_zoonotic_bacterial_diseases (5891 codes) #> - a30_a49_other_bacterial_diseases (4324 codes) #> - a50_a64_infections_with_a_predominantly_sexual_mode_of_transmission (11944 codes) #> - a65_a69_other_spirochaetal_diseases (490 codes) #> along with 254 more codelists mood_affective_disorders <- getICD10StandardCodes(   cdm = cdm,   name = \"Mood [affective] disorders\",    level = \"ICD10 SubChapter\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts mood_affective_disorders #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - f30_f39_mood_affective_disorders (822 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"icd10-hierarchy-codelists","dir":"Articles","previous_headings":"","what":"ICD10 hierarchy codelists","title":"Generating vocabulary based codelists for conditions","text":"can move one level get codelists hierarchy codes. ’ll granularity many codes. can get codes Persistent mood [affective] disorders (ICD10 F34).","code":"icd_hierarchy <- getICD10StandardCodes(   cdm = cdm,   level = \"ICD10 Hierarchy\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts icd_hierarchy |> length() #> [1] 1588 icd_hierarchy #>  #> ── 1588 codelists ────────────────────────────────────────────────────────────── #>  #> - a00_cholera (7 codes) #> - a01_typhoid_and_paratyphoid_fevers (11 codes) #> - a02_other_salmonella_infections (42 codes) #> - a03_shigellosis (11 codes) #> - a04_other_bacterial_intestinal_infections (48 codes) #> - a05_other_bacterial_foodborne_intoxications_not_elsewhere_classified (22 codes) #> along with 1582 more codelists persistent_mood_affective_disorders   <- getICD10StandardCodes(   cdm = cdm,   name = \"Persistent mood [affective] disorders\",    level = \"ICD10 Hierarchy\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts persistent_mood_affective_disorders #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - f34_persistent_mood_affective_disorders (374 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"icd10-code-codelists","dir":"Articles","previous_headings":"","what":"ICD10 code codelists","title":"Generating vocabulary based codelists for conditions","text":"last option level granular, ICD10 code. Now ’ll get even codelists. now create codelist just dysthymia.","code":"icd_code <- getICD10StandardCodes(   cdm = cdm,   level = \"ICD10 Code\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts icd_code |> length() #> [1] 13723 icd_hierarchy #>  #> ── 1588 codelists ────────────────────────────────────────────────────────────── #>  #> - a00_cholera (7 codes) #> - a01_typhoid_and_paratyphoid_fevers (11 codes) #> - a02_other_salmonella_infections (42 codes) #> - a03_shigellosis (11 codes) #> - a04_other_bacterial_intestinal_infections (48 codes) #> - a05_other_bacterial_foodborne_intoxications_not_elsewhere_classified (22 codes) #> along with 1582 more codelists dysthymia   <- getICD10StandardCodes(   cdm = cdm,   name = \"dysthymia\",    level = \"ICD10 Code\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts dysthymia #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - f341_dysthymia (10 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"additional-options","dir":"Articles","previous_headings":"","what":"Additional options","title":"Generating vocabulary based codelists for conditions","text":"well different ICD10 levels options creating codelists.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"include-descendants","dir":"Articles","previous_headings":"Additional options","what":"Include descendants","title":"Generating vocabulary based codelists for conditions","text":"default map ICD10 standard codes also include descendants standard code. can instead just return direct mappings without descendants. Unsurprisingly include descendants ’ll include additional codes.","code":"dysthymia_descendants <- getICD10StandardCodes(   cdm = cdm,   name = \"dysthymia\",    level = \"ICD10 Code\",   includeDescendants = TRUE ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts dysthymia_descendants #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - f341_dysthymia (10 codes)  dysthymia_no_descendants <- getICD10StandardCodes(   cdm = cdm,   name = \"dysthymia\",    level = \"ICD10 Code\",   includeDescendants = FALSE ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts dysthymia_no_descendants #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - f341_dysthymia (1 codes) compareCodelists(dysthymia_no_descendants,                   dysthymia_descendants) |>    filter(codelist == \"Both\") |>    pull(\"concept_id\") #> [1] 433440  compareCodelists(dysthymia_no_descendants,                   dysthymia_descendants) |>    filter(codelist == \"Only codelist 2\") |>    pull(\"concept_id\") #> [1] 4307951 4057218 4096229 4150047 4336980 4195680 4263770 4224639 4243308"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"name-style","dir":"Articles","previous_headings":"Additional options","what":"Name style","title":"Generating vocabulary based codelists for conditions","text":"default ’ll get back list name styled \"{concept_code}_{concept_name}\". though instead use concept name naming codelists.","code":"dysthymia <- getICD10StandardCodes(   cdm = cdm,   name = \"dysthymia\",    level = \"ICD10 Code\",   nameStyle = \"{concept_name}\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts dysthymia #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - dysthymia (10 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04b_icd_codes.html","id":"codelist-or-codelist-with-details","dir":"Articles","previous_headings":"Additional options","what":"Codelist or codelist with details","title":"Generating vocabulary based codelists for conditions","text":"Lastly, flexibility type object returned. default ’ll codelist just concept IDs interest. instead get additional information name, vocabulary, .","code":"dysthymia <- getICD10StandardCodes(   cdm = cdm,   name = \"dysthymia\",    level = \"ICD10 Code\",   type = \"codelist\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts dysthymia[[1]] |> glimpse() #>  int [1:10] 4307951 4057218 4096229 4150047 4336980 4195680 4263770 4224639 433440 4243308 dysthymia <- getICD10StandardCodes(   cdm = cdm,   name = \"dysthymia\",    level = \"ICD10 Code\",   type = \"codelist_with_details\" ) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts dysthymia[[1]] |> glimpse() #> Rows: 10 #> Columns: 6 #> $ name          <chr> \"f341_dysthymia\", \"f341_dysthymia\", \"f341_dysthymia\", \"f… #> $ concept_id    <int> 4224639, 4243308, 4263770, 4307951, 4096229, 4150047, 41… #> $ concept_code  <chr> \"85080004\", \"38451003\", \"36170009\", \"83176005\", \"2506003… #> $ concept_name  <chr> \"Secondary dysthymia\", \"Primary dysthymia early onset\", … #> $ domain_id     <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"Con… #> $ vocabulary_id <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOME…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a05_ExtractCodelistFromJSONfile.html","id":"extracting-codelists-from-json-files","dir":"Articles","previous_headings":"","what":"Extracting codelists from JSON files","title":"Extract codelists from JSON files","text":"vignette, explore functions help us generate codelists JSON files. two main types JSON files can work : Concept sets: files usually contain set concepts grouped together based common definition clinical meaning. concept set may include inclusion/exclusion rules, descendants, mapping criteria define exact scope concepts included. Cohorts: files define cohorts, groups individuals meeting specific criteria inclusion study. cohort definitions also include embedded concept sets, logic criteria, time windows, metadata needed cohort construction. following sections, explore use specific functions extract codelists generated two type JSON files. Specifically, delve : codesFromConceptSet(): extract concept IDs directly concept set JSON. codesFromCohort(): extract concept IDs concept sets embedded within cohort definition JSON. Hence, start loading necessary packages, creating mock cdm, saving mock json files going use reproduce example. Bear mind structure vocabulary mock cdm following","code":"# Loading necessary files library(omopgenerics) library(CodelistGenerator) library(dplyr) library(jsonlite)  # Creating mock cdm cdm <- mockVocabRef()  # Reading mock json files arthritis_desc <- fromJSON(system.file(\"concepts_for_mock/arthritis_desc.json\", package = \"CodelistGenerator\")) |> toJSON(pretty = TRUE, auto_unbox = TRUE) arthritis_no_desc <- fromJSON(system.file(\"concepts_for_mock/arthritis_no_desc.json\", package = \"CodelistGenerator\")) |> toJSON(pretty = TRUE, auto_unbox = TRUE) arthritis_with_excluded <- fromJSON(system.file(\"concepts_for_mock/arthritis_with_excluded.json\", package = \"CodelistGenerator\")) |> toJSON(pretty = TRUE, auto_unbox = TRUE) arthritis_desc_cohort <- fromJSON(system.file(\"cohorts_for_mock/oa_desc.json\", package = \"CodelistGenerator\")) |> toJSON(pretty = TRUE, auto_unbox = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a05_ExtractCodelistFromJSONfile.html","id":"codes-from-concept-sets-json-files","dir":"Articles","previous_headings":"","what":"Codes from concept sets JSON files","title":"Extract codelists from JSON files","text":"Now, going extract concept ids provided concept set JSON file Notice used argument type define output codelist_with_details, also obtain simple codelist. Let’s look codelist just upload, contain set concept ids define arthritis:","code":"concepts <- codesFromConceptSet(cdm,                      path =  system.file(package = \"CodelistGenerator\",\"concepts_for_mock\"),                     type = \"codelist_with_details\") concepts #>  #> ── 3 codelists with details ──────────────────────────────────────────────────── #>  #> - arthritis_desc (3 codes) #> - arthritis_no_desc (1 codes) #> - arthritis_with_excluded (2 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a05_ExtractCodelistFromJSONfile.html","id":"include-descendants","dir":"Articles","previous_headings":"Codes from concept sets JSON files","what":"Include descendants","title":"Extract codelists from JSON files","text":"Let’s look first json file, named “arthritis_desc” Notice codelist, concept_id=3 includeDescendants=TRUE, final codelist obtained using codesFromConceptSet() Note cdm one arguments used get descendants (needed) result can vary cdm cdm different vocabulary versions used.","code":"arthritis_desc #> { #>   \"items\": [ #>     { #>       \"concept\": { #>         \"CONCEPT_ID\": 3 #>       }, #>       \"isExcluded\": false, #>       \"includeDescendants\": true, #>       \"includeMapped\": false #>     } #>   ] #> } concepts$arthritis_desc #> # A tibble: 3 × 5 #>   concept_id concept_name           domain_id vocabulary_id standard_concept #>        <int> <chr>                  <chr>     <chr>         <chr>            #> 1          3 Arthritis              Condition SNOMED        standard         #> 2          5 Osteoarthritis of hip  Condition SNOMED        standard         #> 3          4 Osteoarthritis of knee Condition SNOMED        standard"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a05_ExtractCodelistFromJSONfile.html","id":"exclude-descendants","dir":"Articles","previous_headings":"Codes from concept sets JSON files","what":"Exclude descendants","title":"Extract codelists from JSON files","text":"descendants set exclude json file, function provide descendants:","code":"arthritis_no_desc #> { #>   \"items\": [ #>     { #>       \"concept\": { #>         \"CONCEPT_ID\": 3 #>       }, #>       \"isExcluded\": false, #>       \"includeDescendants\": false, #>       \"includeMapped\": false #>     } #>   ] #> }  concepts$arthritis_no_desc #> # A tibble: 1 × 5 #>   concept_id concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>        <chr>     <chr>         <chr>            #> 1          3 Arthritis    Condition SNOMED        standard"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a05_ExtractCodelistFromJSONfile.html","id":"exclude-concepts","dir":"Articles","previous_headings":"Codes from concept sets JSON files","what":"Exclude concepts","title":"Extract codelists from JSON files","text":"can json file specifies concepts must excluded. also taken account creating final codelist using codesFromConceptSet():","code":"arthritis_with_excluded #> { #>   \"items\": [ #>     { #>       \"concept\": { #>         \"CONCEPT_ID\": 3 #>       }, #>       \"isExcluded\": false, #>       \"includeDescendants\": true, #>       \"includeMapped\": false #>     }, #>     { #>       \"concept\": { #>         \"CONCEPT_ID\": 4 #>       }, #>       \"isExcluded\": true, #>       \"includeDescendants\": false, #>       \"includeMapped\": false #>     } #>   ] #> }  concepts$arthritis_with_excluded #> # A tibble: 2 × 5 #>   concept_id concept_name          domain_id vocabulary_id standard_concept #>        <int> <chr>                 <chr>     <chr>         <chr>            #> 1          3 Arthritis             Condition SNOMED        standard         #> 2          5 Osteoarthritis of hip Condition SNOMED        standard"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a05_ExtractCodelistFromJSONfile.html","id":"codes-from-cohort-json-files","dir":"Articles","previous_headings":"","what":"Codes from cohort JSON files","title":"Extract codelists from JSON files","text":"Now, going extract concept ids provided cohort JSON file. , just need provide path saved json files: Let’s look codelist just upload:","code":"concepts <- codesFromCohort(cdm,                      path =  system.file(package = \"CodelistGenerator\",\"cohorts_for_mock\"),                     type = \"codelist_with_details\") concepts <- newCodelistWithDetails(list(\"arthritis\" = concepts$arthritis)) arthritis_desc_cohort #> { #>   \"ConceptSets\": [ #>     { #>       \"id\": 0, #>       \"name\": \"arthritis\", #>       \"expression\": { #>         \"items\": [ #>           { #>             \"concept\": { #>               \"CONCEPT_CLASS_ID\": \"Clinical Finding\", #>               \"CONCEPT_CODE\": \"396275006\", #>               \"CONCEPT_ID\": 3, #>               \"CONCEPT_NAME\": \"Arthritis\", #>               \"DOMAIN_ID\": \"Condition\", #>               \"INVALID_REASON\": \"V\", #>               \"INVALID_REASON_CAPTION\": \"Valid\", #>               \"STANDARD_CONCEPT\": \"S\", #>               \"STANDARD_CONCEPT_CAPTION\": \"Standard\", #>               \"VOCABULARY_ID\": \"SNOMED\" #>             }, #>             \"includeDescendants\": true #>           } #>         ] #>       } #>     }, #>     { #>       \"id\": 1, #>       \"name\": \"Other\", #>       \"expression\": { #>         \"items\": [ #>           { #>             \"concept\": { #>               \"CONCEPT_CLASS_ID\": \"Clinical Finding\", #>               \"CONCEPT_CODE\": \"422504002\", #>               \"CONCEPT_ID\": 5, #>               \"CONCEPT_NAME\": \"Osteoarthritis of hip\", #>               \"DOMAIN_ID\": \"Condition\", #>               \"INVALID_REASON\": \"V\", #>               \"INVALID_REASON_CAPTION\": \"Valid\", #>               \"STANDARD_CONCEPT\": \"S\", #>               \"STANDARD_CONCEPT_CAPTION\": \"Standard\", #>               \"VOCABULARY_ID\": \"SNOMED\" #>             } #>           } #>         ] #>       } #>     } #>   ], #>   \"PrimaryCriteria\": { #>     \"CriteriaList\": [ #>       { #>         \"ConditionOccurrence\": { #>           \"CodesetId\": 0 #>         }, #>         \"Observation\": {} #>       }, #>       { #>         \"ConditionOccurrence\": {}, #>         \"Observation\": { #>           \"CodesetId\": 0 #>         } #>       }, #>       { #>         \"ConditionOccurrence\": { #>           \"CodesetId\": 1 #>         }, #>         \"Observation\": {} #>       } #>     ], #>     \"ObservationWindow\": { #>       \"PriorDays\": 0, #>       \"PostDays\": 0 #>     }, #>     \"PrimaryCriteriaLimit\": { #>       \"Type\": \"First\" #>     } #>   }, #>   \"QualifiedLimit\": { #>     \"Type\": \"First\" #>   }, #>   \"ExpressionLimit\": { #>     \"Type\": \"First\" #>   }, #>   \"InclusionRules\": [], #>   \"CensoringCriteria\": [], #>   \"CollapseSettings\": { #>     \"CollapseType\": \"ERA\", #>     \"EraPad\": 0 #>   }, #>   \"CensorWindow\": {}, #>   \"cdmVersionRange\": \">=5.0.0\" #> }  concepts$arthritis #> # A tibble: 3 × 5 #>   concept_id concept_name           domain_id vocabulary_id standard_concept #>        <int> <chr>                  <chr>     <chr>         <chr>            #> 1          3 Arthritis              Condition SNOMED        standard         #> 2          5 Osteoarthritis of hip  Condition SNOMED        standard         #> 3          4 Osteoarthritis of knee Condition SNOMED        standard"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"introduction-generate-codelist-subsets-exploring-codelist-utility-functions","dir":"Articles","previous_headings":"","what":"Introduction: Generate codelist subsets, exploring codelist utility functions","title":"Compare, subset or stratify codelists","text":"vignette introduces set functions designed manipulate explore codelists within OMOP CDM. Specifically, learn : Subset codelist keep codes meeting certain criteria. Stratify codelist based attributes like dose unit route administration. Compare two codelists identify shared unique concepts. First , load required packages connect mock database. start generating codelist acetaminophen using getDrugIngredientCodes()","code":"library(DBI) library(duckdb) library(dplyr) library(CDMConnector) library(CodelistGenerator)  # Connect to the database and create the cdm object con <- dbConnect(duckdb(),                        eunomiaDir(\"synpuf-1k\", \"5.3\")) cdm <- cdmFromCon(con = con,                    cdmName = \"Eunomia Synpuf\",                   cdmSchema   = \"main\",                   writeSchema = \"main\",                    achillesSchema = \"main\") acetaminophen <- getDrugIngredientCodes(cdm,                                         name = \"acetaminophen\",                                         nameStyle = \"{concept_name}\",                                         type = \"codelist\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"subsetting-a-codelist","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions","what":"Subsetting a Codelist","title":"Compare, subset or stratify codelists","text":"Subsetting codelist allow us reduce codelist concepts meet certain conditions.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"subset-to-codes-in-use","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions > Subsetting a Codelist","what":"Subset to Codes in Use","title":"Compare, subset or stratify codelists","text":"function keeps codes observed database least specified frequency (minimumCount) table specified (table). Note function depends ACHILLES tables available CDM object.","code":"acetaminophen_in_use <- subsetToCodesInUse(x = acetaminophen,                                             cdm,                                             minimumCount = 0,                                            table = \"drug_exposure\") acetaminophen_in_use # Only the first 5 concepts will be shown #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - acetaminophen (228 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"subset-by-domain","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions > Subsetting a Codelist","what":"Subset by Domain","title":"Compare, subset or stratify codelists","text":"now subset concepts domain = \"Drug\". Remember , see domains available cdm, can use getDomains(cdm). can use negate argument exclude concepts certain domain:","code":"acetaminophen_drug <- subsetOnDomain(acetaminophen_in_use, cdm, domain = \"Drug\")  acetaminophen_drug #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - acetaminophen (228 codes) acetaminophen_no_drug <- subsetOnDomain(acetaminophen_in_use, cdm, domain = \"Drug\", negate = TRUE)  acetaminophen_no_drug #>  #> ── 0 codelists ─────────────────────────────────────────────────────────────────"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"subset-on-dose-unit","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions > Subsetting a Codelist","what":"Subset on Dose Unit","title":"Compare, subset or stratify codelists","text":"now filter include concepts specified dose units. Remember can use getDoseUnit(cdm) explore dose units available cdm. , can use argument negate = TRUE exclude instead.","code":"acetaminophen_mg_unit <- subsetOnDoseUnit(acetaminophen_drug, cdm, c(\"milligram\", \"unit\")) acetaminophen_mg_unit #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - acetaminophen (228 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"subset-on-route-category","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions > Subsetting a Codelist","what":"Subset on route category","title":"Compare, subset or stratify codelists","text":"now subset concepts “unclassified_route” “transmucosal_rectal”:","code":"acetaminophen_route <- subsetOnRouteCategory(acetaminophen_mg_unit,                                               cdm, c(\"transmucosal_rectal\",\"unclassified_route\"),                                               negate = TRUE) acetaminophen_route #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - acetaminophen (221 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"stratify-codelist","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions","what":"Stratify codelist","title":"Compare, subset or stratify codelists","text":"Instead filtering, stratification allows us split codelist subgroups based defined vocabulary properties.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"stratify-by-dose-unit","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions > Stratify codelist","what":"Stratify by Dose Unit","title":"Compare, subset or stratify codelists","text":"","code":"acetaminophen_doses <- stratifyByDoseUnit(acetaminophen, cdm, keepOriginal = TRUE)  acetaminophen_doses #>  #> ── 4 codelists ───────────────────────────────────────────────────────────────── #>  #> - acetaminophen (23935 codes) #> - acetaminophen_milligram (22256 codes) #> - acetaminophen_unit (1 codes) #> - acetaminophen_unkown_dose_unit (1679 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"stratify-by-route-category","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions > Stratify codelist","what":"Stratify by Route Category","title":"Compare, subset or stratify codelists","text":"","code":"acetaminophen_routes <- stratifyByRouteCategory(acetaminophen, cdm)  acetaminophen_routes #>  #> ── 6 codelists ───────────────────────────────────────────────────────────────── #>  #> - acetaminophen_inhalable (3 codes) #> - acetaminophen_injectable (689 codes) #> - acetaminophen_oral (17219 codes) #> - acetaminophen_topical (6 codes) #> - acetaminophen_transmucosal_rectal (1459 codes) #> - acetaminophen_unclassified_route (4559 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a06_CreateSubsetsFromCodelist.html","id":"compare-codelists","dir":"Articles","previous_headings":"Introduction: Generate codelist subsets, exploring codelist utility functions","what":"Compare codelists","title":"Compare, subset or stratify codelists","text":"Now compare two codelists identify overlapping unique codes. Compare two sets:","code":"acetaminophen <- getDrugIngredientCodes(cdm,                                             name = \"acetaminophen\",                                             nameStyle = \"{concept_name}\",                                            type = \"codelist_with_details\") hydrocodone <- getDrugIngredientCodes(cdm,                                        name = \"hydrocodone\",                                        doseUnit = \"milligram\",                                        nameStyle = \"{concept_name}\",                                       type = \"codelist_with_details\") comparison <- compareCodelists(acetaminophen$acetaminophen, hydrocodone$hydrocodone)  comparison |> glimpse() #> Rows: 25,469 #> Columns: 5 #> $ concept_id   <int> 44065143, 44065144, 44065145, 44065146, 44065147, 4406515… #> $ concept_name <chr> \"Acetaminophen 80 MG / Pseudoephedrine 7.5 MG Oral Tablet… #> $ codelist_1   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ codelist_2   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ codelist     <chr> \"Only codelist 1\", \"Only codelist 1\", \"Only codelist 1\", …  comparison |> filter(codelist == \"Both\") #> # A tibble: 253 × 5 #>    concept_id concept_name                        codelist_1 codelist_2 codelist #>         <int> <chr>                                    <dbl>      <dbl> <chr>    #>  1    1129026 acetaminophen 500 MG / hydrocodone…          1          1 Both     #>  2   44815751 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  3   44815752 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  4   44815753 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  5   44815929 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  6   44815930 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  7   44815931 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  8   44816114 acetaminophen 325 MG / hydrocodone…          1          1 Both     #>  9   44816115 acetaminophen 325 MG / hydrocodone…          1          1 Both     #> 10   44816116 acetaminophen 325 MG / hydrocodone…          1          1 Both     #> # ℹ 243 more rows"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"summarise-code-use-using-achilles-tables","dir":"Articles","previous_headings":"Running Diagnostics in a Codelist","what":"Summarise Code Use Using ACHILLES Tables","title":"Codelist diagnostics","text":"function uses ACHILLES summary tables count number records persons associated concept codelist. Notice requires ACHILLES tables available CDM. , obtain summarised result object. can easily visualise results using tableAchillesCodeUse(): Notice concepts zero counts appear result table.","code":"achilles_code_use <- summariseAchillesCodeUse(depression,                                                cdm,                                                countBy = c(\"record\", \"person\")) tableAchillesCodeUse(achilles_code_use,                      type = \"gt\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"summarise-code-use-using-patient-level-data","dir":"Articles","previous_headings":"","what":"Summarise Code Use Using Patient-Level Data","title":"Codelist diagnostics","text":"function performs similar task directly queries patient-level data, making usable even ACHILLES tables available. can configured stratify results concept (byConcept), year (byYear), sex (bySex), age group (byAgeGroup). can specify specific time period (dateRange).","code":"code_use <- summariseCodeUse(depression,                              cdm,                              countBy = c(\"record\", \"person\"),                              byYear  = FALSE,                              bySex   = FALSE,                              ageGroup =  list(\"<=50\" = c(0,50), \">50\" = c(51,Inf)),                              dateRange = as.Date(c(\"2010-01-01\", \"2020-01-01\")))  tableCodeUse(code_use, type = \"gt\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"identify-orphan-codes","dir":"Articles","previous_headings":"","what":"Identify Orphan Codes","title":"Codelist diagnostics","text":"Orphan codes concepts might related codelist included. can used ensure missed important concepts. Notice function uses ACHILLES tables. summariseOrphanCodes() look descendants (via concept_descendants table), ancestors (via concept_ancestor table), concepts related codes included codelist (via concept_relationship table). Additionally, cdm contains PHOEBE tables (concept_recommended table), also used.","code":"orphan <- summariseOrphanCodes(depression, cdm) tableOrphanCodes(orphan, type = \"gt\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"identify-unmapped-codes","dir":"Articles","previous_headings":"","what":"Identify Unmapped Codes","title":"Codelist diagnostics","text":"function identifies codes conceptually linked codelist mapped.","code":"unmapped <- summariseUnmappedCodes(depression, cdm) tableUnmappedCodes(unmapped, type = \"gt\") #> # A tibble: 0 × 0"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"run-diagnostics-within-a-cohort","dir":"Articles","previous_headings":"","what":"Run Diagnostics within a Cohort","title":"Codelist diagnostics","text":"can also evaluate codelist used within specific cohort. First, define cohort using conceptCohort() function CohortConstructor package. , can summarise code use within cohort:","code":"cdm[[\"depression\"]] <- conceptCohort(cdm,                                       conceptSet = depression,                                       name = \"depression\") cohort_code_use <- summariseCohortCodeUse(depression,                                            cdm,                                           cohortTable = \"depression\",                                           countBy = c(\"record\", \"person\")) tableCohortCodeUse(cohort_code_use)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"summarise-code-use-at-cohort-entry","dir":"Articles","previous_headings":"Run Diagnostics within a Cohort","what":"Summarise Code Use at Cohort Entry","title":"Codelist diagnostics","text":"Use timing argument restrict diagnostics codes used entry date cohort.","code":"cohort_code_use <- summariseCohortCodeUse(depression,                                            cdm,                                           cohortTable = \"depression\",                                           countBy = c(\"record\", \"person\"),                                           timing = \"entry\") tableCohortCodeUse(cohort_code_use)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a07_RunCodelistDiagnostics.html","id":"stratify-cohort-level-diagnostics","dir":"Articles","previous_headings":"Run Diagnostics within a Cohort","what":"Stratify Cohort-Level Diagnostics","title":"Codelist diagnostics","text":"can also stratify cohort code use results year (byYear), sex (bySex), age group (byAgeGroup):","code":"cohort_code_use <- summariseCohortCodeUse(depression,                                            cdm,                                           cohortTable = \"depression\",                                           countBy = c(\"record\", \"person\"),                                           byYear = FALSE,                                           bySex = TRUE,                                           ageGroup = NULL) tableCohortCodeUse(cohort_code_use)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer. Marti Catala. Contributor. Xihang Chen. Author. Nuria Mercade-Besora. Author. Mike Du. Contributor. Danielle Newby. Contributor. Marta Alcalde-Herraiz. Contributor.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E, Chen X, Mercade-Besora N (2025). CodelistGenerator: Identify Relevant Clinical Codes Evaluate Use. R package version 3.5.0, https://darwin-eu.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use},   author = {Edward Burn and Xihang Chen and Nuria Mercade-Besora},   year = {2025},   note = {R package version 3.5.0},   url = {https://darwin-eu.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"can install CodelistGenerator CRAN can also install development version CodelistGenerator","code":"install.packages(\"CodelistGenerator\") install.packages(\"remotes\") remotes::install_github(\"darwin-eu/CodelistGenerator\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"example ’ll use Eunomia dataset (contains subset OMOP CDM vocabularies)","code":"library(dplyr) library(CDMConnector) library(CodelistGenerator) requireEunomia() db <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomiaDir()) cdm <- cdmFromCon(db,                    cdmSchema = \"main\",                    writeSchema = \"main\",                    writePrefix = \"cg_\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"exploring-the-omop-cdm-vocabulary-tables","dir":"","previous_headings":"","what":"Exploring the OMOP CDM Vocabulary tables","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"OMOP CDM vocabularies frequently updated, can identify version vocabulary Eunomia data","code":"getVocabVersion(cdm = cdm) #> [1] \"v5.0 18-JAN-19\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"vocabulary-based-codelists-using-codelistgenerator","dir":"","previous_headings":"","what":"Vocabulary based codelists using CodelistGenerator","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"CodelistGenerator provides functions extract code lists based vocabulary hierarchies. One example `getDrugIngredientCodes, can use, example, get concept IDs used represent aspirin diclofenac.","code":"ing <- getDrugIngredientCodes(cdm = cdm,                         name = c(\"aspirin\", \"diclofenac\"),                        nameStyle = \"{concept_name}\") ing #>  #> - aspirin (2 codes) #> - diclofenac (1 codes) ing$aspirin #> [1] 19059056  1112807 ing$diclofenac #> [1] 1124300"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"systematic-search-using-codelistgenerator","dir":"","previous_headings":"","what":"Systematic search using CodelistGenerator","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"CodelistGenerator can also support systematic searches vocabulary tables support codelist development. little like process systematic review, idea specified search strategy, CodelistGenerator identify set concepts may relevant, screened remove irrelevant codes clinical experts. can simple search asthma perhaps want exclude certain concepts part search strategy, case can add like ","code":"asthma_codes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"asthma\",   domains = \"Condition\" )  asthma_codes1 |>    glimpse() #> Rows: 2 #> Columns: 6 #> $ concept_id       <int> 4051466, 317009 #> $ found_from       <chr> \"From initial search\", \"From initial search\" #> $ concept_name     <chr> \"Childhood asthma\", \"Asthma\" #> $ domain_id        <chr> \"Condition\", \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\" asthma_codes2 <- getCandidateCodes(   cdm = cdm,   keywords = \"asthma\",   exclude = \"childhood\",   domains = \"Condition\" )  asthma_codes2 |>    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <int> 317009 #> $ found_from       <chr> \"From initial search\" #> $ concept_name     <chr> \"Asthma\" #> $ domain_id        <chr> \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\" #> $ standard_concept <chr> \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"summarising-code-use","dir":"","previous_headings":"","what":"Summarising code use","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"well functions finding codes, also functions summarise use. ","code":"library(flextable) asthma_code_use <- summariseCodeUse(list(\"asthma\" = asthma_codes1$concept_id),   cdm = cdm ) tableCodeUse(asthma_code_use, type = \"flextable\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/CodelistGenerator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use — CodelistGenerator-package","title":"CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use — CodelistGenerator-package","text":"Generate candidate code list Observational Medical Outcomes Partnership (OMOP) common data model based string matching. given search strategy, candidate code list returned.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/CodelistGenerator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use — CodelistGenerator-package","text":"Maintainer: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) Authors: Xihang Chen xihang.chen@ndorms.ox.ac.uk (ORCID) Nuria Mercade-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) contributors: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) [contributor] Mike Du mike.du@ndorms.ox.ac.uk (ORCID) [contributor] Danielle Newby danielle.newby@ndorms.ox.ac.uk (ORCID) [contributor] Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/ageGroupDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of ageGroup. — ageGroupDoc","title":"Helper for consistent documentation of ageGroup. — ageGroupDoc","text":"Helper consistent documentation ageGroup.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/ageGroupDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of ageGroup. — ageGroupDoc","text":"ageGroup NULL, list ageGroup vectors length two.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableATC.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of all available Anatomical Therapeutic Chemical (ATC) classification codes — availableATC","title":"Get the names of all available Anatomical Therapeutic Chemical (ATC) classification codes — availableATC","text":"Get names available Anatomical Therapeutic Chemical (ATC) classification codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableATC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of all available Anatomical Therapeutic Chemical (ATC) classification codes — availableATC","text":"","code":"availableATC(cdm, level = c(\"ATC 1st\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableATC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of all available Anatomical Therapeutic Chemical (ATC) classification codes — availableATC","text":"cdm cdm reference via CDMConnector. level ATC level. Can one \"ATC 1st\", \"ATC 2nd\", \"ATC 3rd\", \"ATC 4th\", \"ATC 5th\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableATC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of all available Anatomical Therapeutic Chemical (ATC) classification codes — availableATC","text":"vector containing names ATC codes chosen level(s) found concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableATC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of all available Anatomical Therapeutic Chemical (ATC) classification codes — availableATC","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 availableATC(cdm) #> [1] \"ALIMENTARY TRACT AND METABOLISM\" # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableICD10.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of all International Classification of Diseases (ICD) 10 codes — availableICD10","title":"Get the names of all International Classification of Diseases (ICD) 10 codes — availableICD10","text":"Get names International Classification Diseases (ICD) 10 codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableICD10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of all International Classification of Diseases (ICD) 10 codes — availableICD10","text":"","code":"availableICD10(cdm, level = c(\"ICD10 Chapter\", \"ICD10 SubChapter\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableICD10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of all International Classification of Diseases (ICD) 10 codes — availableICD10","text":"cdm cdm reference via CDMConnector. level Can either \"ICD10 Chapter\", \"ICD10 SubChapter\", \"ICD10 Hierarchy\", \"ICD10 Code\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableICD10.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of all International Classification of Diseases (ICD) 10 codes — availableICD10","text":"vector containing names ICD-10 codes chosen level(s) found concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableICD10.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of all International Classification of Diseases (ICD) 10 codes — availableICD10","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 availableICD10(cdm) #> [1] \"Diseases of the musculoskeletal system and connective tissue\" #> [2] \"Arthropathies\"                                                # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableIngredients.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of all available drug ingredients — availableIngredients","title":"Get the names of all available drug ingredients — availableIngredients","text":"Get names available drug ingredients","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableIngredients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of all available drug ingredients — availableIngredients","text":"","code":"availableIngredients(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableIngredients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of all available drug ingredients — availableIngredients","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableIngredients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of all available drug ingredients — availableIngredients","text":"vector containing concept names ingredient level codes found concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/availableIngredients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of all available drug ingredients — availableIngredients","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 availableIngredients(cdm) #> [1] \"Adalimumab\"       \"Other ingredient\" # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/buildAchillesTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the achilles tables with specified analyses — buildAchillesTables","title":"Add the achilles tables with specified analyses — buildAchillesTables","text":"cdm reference contain achilles tables, function create analyses used functions package.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/buildAchillesTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the achilles tables with specified analyses — buildAchillesTables","text":"","code":"buildAchillesTables(cdm, achillesId = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/buildAchillesTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the achilles tables with specified analyses — buildAchillesTables","text":"cdm cdm reference via CDMConnector. achillesId vector achilles ids. NULL default analysis used.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/buildAchillesTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the achilles tables with specified analyses — buildAchillesTables","text":"cdm_reference object achilles tables populated.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/buildAchillesTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the achilles tables with specified analyses — buildAchillesTables","text":"","code":"# \\donttest{ dbName <- \"GiBleed\" CDMConnector::requireEunomia(dbName) #> ℹ `EUNOMIA_DATA_FOLDER` set to: /tmp/RtmpVuuNgY. #>  #> Download completed! con <- duckdb::dbConnect(duckdb::duckdb(), CDMConnector::eunomiaDir(dbName)) #> Creating CDM database /tmp/RtmpVuuNgY/GiBleed_5.3.zip cdm <- CDMConnector::cdmFromCon(   con = con, cdmSchema = \"main\", writeSchema = \"main\" )  cdm <- buildAchillesTables(cdm = cdm) #> ℹ Creating empty achilles_analysis table. #> ℹ Creating empty achilles_results table. #> ℹ Creating empty achilles_results_dist table. #> ℹ  1 of 21: Get achilles result for Number of persons with at least one visit #>   occurrence, by visit_concept_id. #> ℹ  2 of 21: Get achilles result for Number of visit occurrence records, by #>   visit_concept_id. #> ℹ  3 of 21: Get achilles result for Number of visit_occurrence records by #>   visit_source_concept_id. #> ℹ  4 of 21: Get achilles result for Number of persons with at least one #>   condition occurrence, by condition_concept_id. #> ℹ  5 of 21: Get achilles result for Number of condition occurrence records, by #>   condition_concept_id. #> ℹ  6 of 21: Get achilles result for Number of condition_occurrence records by #>   condition_source_concept_id. #> ℹ  7 of 21: Get achilles result for Number of persons with at least one #>   procedure occurrence, by procedure_concept_id. #> ℹ  8 of 21: Get achilles result for Number of procedure occurrence records, by #>   procedure_concept_id. #> ℹ  9 of 21: Get achilles result for Number of procedure_occurrence records by #>   procedure_source_concept_id. #> ℹ 10 of 21: Get achilles result for Number of persons with at least one drug #>   exposure, by drug_concept_id. #> ℹ 11 of 21: Get achilles result for Number of drug exposure records, by #>   drug_concept_id. #> ℹ 12 of 21: Get achilles result for Number of drug_exposure records by #>   drug_source_concept_id. #> ℹ 13 of 21: Get achilles result for Number of persons with at least one #>   observation occurrence, by observation_concept_id. #> ℹ 14 of 21: Get achilles result for Number of observation occurrence records, #>   by observation_concept_id. #> ℹ 15 of 21: Get achilles result for Number of observation records by #>   observation_source_concept_id. #> ℹ 16 of 21: Get achilles result for Number of persons with at least one #>   measurement occurrence, by measurement_concept_id. #> ℹ 17 of 21: Get achilles result for Number of measurement occurrence records, #>   by measurement_concept_id. #> ℹ 18 of 21: Get achilles result for Number of measurement records by #>   measurement_source_concept_id. #> ℹ 19 of 21: Get achilles result for Number of persons with at least one device #>   exposure, by device_concept_id. #> ℹ 20 of 21: Get achilles result for Number of device exposure records, by #>   device_concept_id. #> ℹ 21 of 21: Get achilles result for Number of device_exposure records by #>   device_source_concept_id.  # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/byConceptDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of byConcept. — byConceptDoc","title":"Helper for consistent documentation of byConcept. — byConceptDoc","text":"Helper consistent documentation byConcept.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/byConceptDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of byConcept. — byConceptDoc","text":"byConcept TRUE FALSE. TRUE code use summarised concept.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/bySexDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of bySex. — bySexDoc","title":"Helper for consistent documentation of bySex. — bySexDoc","text":"Helper consistent documentation bySex.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/bySexDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of bySex. — bySexDoc","text":"bySex TRUE FALSE. TRUE code use summarised sex.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/byYearDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of byYear. — byYearDoc","title":"Helper for consistent documentation of byYear. — byYearDoc","text":"Helper consistent documentation byYear.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/byYearDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of byYear. — byYearDoc","text":"byYear TRUE FALSE. TRUE code use summarised year.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/cdmDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of cdm. — cdmDoc","title":"Helper for consistent documentation of cdm. — cdmDoc","text":"Helper consistent documentation cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/cdmDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of cdm. — cdmDoc","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concept ids from JSON files containing cohort definitions — codesFromCohort","title":"Get concept ids from JSON files containing cohort definitions — codesFromCohort","text":"Get concept ids JSON files containing cohort definitions","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concept ids from JSON files containing cohort definitions — codesFromCohort","text":"","code":"codesFromCohort(path, cdm, type = c(\"codelist\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concept ids from JSON files containing cohort definitions — codesFromCohort","text":"path Path file folder containing JSONs cohort definitions. cdm cdm reference via CDMConnector. type Can \"codelist\", \"codelist_with_details\" \"concept_set_expression\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concept ids from JSON files containing cohort definitions — codesFromCohort","text":"Named list concept_ids concept set.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concept ids from JSON files containing cohort definitions — codesFromCohort","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 x <- codesFromCohort(cdm = cdm,                      path =  system.file(package = \"CodelistGenerator\",                      \"cohorts_for_mock\")) x #>  #> ── 3 codelists ───────────────────────────────────────────────────────────────── #>  #> - OA no descendants (1 codes) #> - Other (1 codes) #> - arthritis (3 codes) CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concept ids from JSON files containing concept sets — codesFromConceptSet","title":"Get concept ids from JSON files containing concept sets — codesFromConceptSet","text":"Get concept ids JSON files containing concept sets","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concept ids from JSON files containing concept sets — codesFromConceptSet","text":"","code":"codesFromConceptSet(path, cdm, type = c(\"codelist\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concept ids from JSON files containing concept sets — codesFromConceptSet","text":"path Path file folder containing JSONs concept sets. cdm cdm reference via CDMConnector. type Can \"codelist\", \"codelist_with_details\" \"concept_set_expression\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concept ids from JSON files containing concept sets — codesFromConceptSet","text":"Named list concept_ids concept set.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concept ids from JSON files containing concept sets — codesFromConceptSet","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 x <- codesFromConceptSet(cdm = cdm,                          path =  system.file(package = \"CodelistGenerator\",                          \"concepts_for_mock\")) x #>  #> ── 3 codelists ───────────────────────────────────────────────────────────────── #>  #> - arthritis_desc (3 codes) #> - arthritis_no_desc (1 codes) #> - arthritis_with_excluded (2 codes) CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the concepts being used in patient records — codesInUse","title":"Get the concepts being used in patient records — codesInUse","text":"Get concepts used patient records","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the concepts being used in patient records — codesInUse","text":"","code":"codesInUse(   cdm,   minimumCount = 0L,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the concepts being used in patient records — codesInUse","text":"cdm cdm reference via CDMConnector. minimumCount codes frequency removed. table cdm table interest.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the concepts being used in patient records — codesInUse","text":"list integers indicating codes used database.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the concepts being used in patient records — codesInUse","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 x <- codesInUse(cdm = cdm) x #> [1] 5 9 4 CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare overlap between two sets of codes — compareCodelists","title":"Compare overlap between two sets of codes — compareCodelists","text":"Compare overlap two sets codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare overlap between two sets of codes — compareCodelists","text":"","code":"compareCodelists(codelist1, codelist2)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare overlap between two sets of codes — compareCodelists","text":"codelist1 Output getCandidateCodes codelist codelist2 Output getCandidateCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare overlap between two sets of codes — compareCodelists","text":"Tibble information overlap codes codelists.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare overlap between two sets of codes — compareCodelists","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes1 <- getCandidateCodes(  cdm = cdm,  keywords = \"Arthritis\",  domains = \"Condition\",  includeDescendants = TRUE ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 3 candidate concepts identified #> Time taken: 0 minutes and 0 seconds codes2 <- getCandidateCodes(  cdm = cdm,  keywords = c(\"knee osteoarthritis\", \"arthrosis\"),  domains = \"Condition\",  includeDescendants = TRUE ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #> Time taken: 0 minutes and 0 seconds compareCodelists(  codelist1 = codes1,  codelist2 = codes2 ) #> # A tibble: 4 × 5 #>   concept_id concept_name           codelist_1 codelist_2 codelist        #>        <int> <chr>                       <dbl>      <dbl> <chr>           #> 1          3 Arthritis                       1         NA Only codelist 1 #> 2          4 Osteoarthritis of knee          1          1 Both            #> 3          5 Osteoarthritis of hip           1         NA Only codelist 1 #> 4          2 Osteoarthrosis                 NA          1 Only codelist 2 # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/countByDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of countBy. — countByDoc","title":"Helper for consistent documentation of countBy. — countByDoc","text":"Helper consistent documentation countBy.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/countByDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of countBy. — countByDoc","text":"countBy Either \"record\" record-level counts \"person\" person-level counts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/domainDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of domain. — domainDoc","title":"Helper for consistent documentation of domain. — domainDoc","text":"Helper consistent documentation domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/domainDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of domain. — domainDoc","text":"domain Character vector one OMOP CDM domains. results restricted given domains. Check available ones running getDomains(). NULL, supported domains included: Condition, Drug, Procedure, Device, Observation, Measurement.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseFormDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of doseForm. — doseFormDoc","title":"Helper for consistent documentation of doseForm. — doseFormDoc","text":"Helper consistent documentation doseForm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseFormDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of doseForm. — doseFormDoc","text":"doseForm codes specified dose form returned. NULL, descendant codes returned regardless dose form. Use 'getDoseForm()' see available dose forms.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseUnitDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of doseUnit. — doseUnitDoc","title":"Helper for consistent documentation of doseUnit. — doseUnitDoc","text":"Helper consistent documentation doseUnit.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseUnitDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of doseUnit. — doseUnitDoc","text":"doseUnit codes specified dose unit returned. NULL, descendant codes returned regardless dose unit Use 'getDoseUnit()' see available dose units.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/dot-optionsDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of .options. — .optionsDoc","title":"Helper for consistent documentation of .options. — .optionsDoc","text":"Helper consistent documentation .options.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/dot-optionsDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of .options. — .optionsDoc","text":".options Named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the descendant codes of Anatomical Therapeutic Chemical (ATC) classification codes — getATCCodes","title":"Get the descendant codes of Anatomical Therapeutic Chemical (ATC) classification codes — getATCCodes","text":"Get descendant codes Anatomical Therapeutic Chemical (ATC) classification codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the descendant codes of Anatomical Therapeutic Chemical (ATC) classification codes — getATCCodes","text":"","code":"getATCCodes(   cdm,   level = c(\"ATC 1st\"),   name = NULL,   nameStyle = \"{concept_code}_{concept_name}\",   doseForm = NULL,   doseUnit = NULL,   routeCategory = NULL,   type = \"codelist\" )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the descendant codes of Anatomical Therapeutic Chemical (ATC) classification codes — getATCCodes","text":"cdm cdm reference via CDMConnector. level ATC level. Can one \"ATC 1st\", \"ATC 2nd\", \"ATC 3rd\", \"ATC 4th\", \"ATC 5th\". name ATC name interest. example, c(\"Dermatologicals\", \"Nervous System\"), result list length two descendant concepts two particular ATC groups. nameStyle Name style apply returned list. Can one \"{concept_code}\",\"{concept_id}\", \"{concept_name}\", combination (.e., \"{concept_code}_{concept_name}\"). doseForm codes specified dose form returned. NULL, descendant codes returned regardless dose form. Use 'getDoseForm()' see available dose forms. doseUnit codes specified dose unit returned. NULL, descendant codes returned regardless dose unit Use 'getDoseUnit()' see available dose units. routeCategory codes specified route returned. NULL, descendant codes returned regardless route category. Use getRoutes() find available route categories. type Can \"codelist\" \"codelist_with_details\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the descendant codes of Anatomical Therapeutic Chemical (ATC) classification codes — getATCCodes","text":"Concepts format based type argument","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the descendant codes of Anatomical Therapeutic Chemical (ATC) classification codes — getATCCodes","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getATCCodes(cdm = cdm, level = \"ATC 1st\") #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 1234_alimentary_tract_and_metabolism (2 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a candidate codelist — getCandidateCodes","title":"Generate a candidate codelist — getCandidateCodes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a candidate codelist — getCandidateCodes","text":"","code":"getCandidateCodes(   cdm,   keywords,   exclude = NULL,   domains = \"Condition\",   standardConcept = \"Standard\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeDescendants = TRUE,   includeAncestor = FALSE )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a candidate codelist — getCandidateCodes","text":"cdm cdm reference via CDMConnector. keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. exclude Character vector words identify concepts exclude. domains Character vector one OMOP CDM domain. NULL, supported domains included: Condition, Drug, Procedure, Device, Observation, Measurement. standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. searchInSynonyms Either TRUE FALSE. TRUE code also search using primary name concept table synonyms concept synonym table. searchNonStandard Either TRUE FALSE. TRUE code also search via non-standard concepts. includeDescendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. FALSE direct mappings ICD-10 codes standard codes returned. includeAncestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a candidate codelist — getCandidateCodes","text":"tibble information potential codes interest.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a candidate codelist — getCandidateCodes","text":"","code":"# \\donttest{ cdm <- CodelistGenerator::mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 CodelistGenerator::getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\"  ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #> Time taken: 0 minutes and 0 seconds #> # A tibble: 2 × 6 #>   concept_id found_from    concept_name domain_id vocabulary_id standard_concept #>        <int> <chr>         <chr>        <chr>     <chr>         <chr>            #> 1          4 From initial… Osteoarthri… Condition SNOMED        S                #> 2          5 From initial… Osteoarthri… Condition SNOMED        S                # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the concept classes used in a given set of domains — getConceptClassId","title":"Get the concept classes used in a given set of domains — getConceptClassId","text":"Get concept classes used given set domains","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the concept classes used in a given set of domains — getConceptClassId","text":"","code":"getConceptClassId(cdm, standardConcept = \"Standard\", domain = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the concept classes used in a given set of domains — getConceptClassId","text":"cdm cdm reference via CDMConnector. standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. domain Character vector one OMOP CDM domains. results restricted given domains. Check available ones running getDomains(). NULL, supported domains included: Condition, Drug, Procedure, Device, Observation, Measurement.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the concept classes used in a given set of domains — getConceptClassId","text":"concept classes used requested domains.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the concept classes used in a given set of domains — getConceptClassId","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getConceptClassId(cdm = cdm, domain = \"drug\") #> [1] \"Clinical Drug Form\" \"Drug\"               \"Ingredient\"         # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant codes for a given concept — getDescendants","title":"Get descendant codes for a given concept — getDescendants","text":"Get descendant codes given concept","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant codes for a given concept — getDescendants","text":"","code":"getDescendants(   cdm,   conceptId,   withAncestor = FALSE,   ingredientRange = c(0, Inf),   doseForm = NULL )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant codes for a given concept — getDescendants","text":"cdm cdm reference via CDMConnector. conceptId concept_id search withAncestor TRUE, return column ancestor. case multiple ancestors, concepts separated \";\". ingredientRange Used restrict descendant codes associated specific number drug ingredients. Must vector length two first element minimum number ingredients allowed second maximum. value c(2, 2) restrict concepts associated two ingredients. doseForm codes specified dose form returned. NULL, descendant codes returned regardless dose form. Use 'getDoseForm()' see available dose forms.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant codes for a given concept — getDescendants","text":"descendants given concept id.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant codes for a given concept — getDescendants","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getDescendants(cdm = cdm, conceptId = 1) #> # A tibble: 5 × 10 #>   concept_id concept_name             domain_id vocabulary_id standard_concept #>        <int> <chr>                    <chr>     <chr>         <chr>            #> 1          1 Musculoskeletal disorder Condition SNOMED        S                #> 2          2 Osteoarthrosis           Condition SNOMED        S                #> 3          3 Arthritis                Condition SNOMED        S                #> 4          4 Osteoarthritis of knee   Condition SNOMED        S                #> 5          5 Osteoarthritis of hip    Condition SNOMED        S                #> # ℹ 5 more variables: concept_class_id <chr>, concept_code <chr>, #> #   valid_start_date <date>, valid_end_date <date>, invalid_reason <chr> # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the domains available in the cdm — getDomains","title":"Get the domains available in the cdm — getDomains","text":"Get domains available cdm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the domains available in the cdm — getDomains","text":"","code":"getDomains(cdm, standardConcept = \"Standard\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the domains available in the cdm — getDomains","text":"cdm cdm reference via CDMConnector. standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the domains available in the cdm — getDomains","text":"vector domains cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the domains available in the cdm — getDomains","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getDomains(cdm = cdm) #> [1] \"Condition\"   \"Observation\" \"Drug\"        \"Unit\"        # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dose forms available for drug concepts — getDoseForm","title":"Get the dose forms available for drug concepts — getDoseForm","text":"Get dose forms available drug concepts","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dose forms available for drug concepts — getDoseForm","text":"","code":"getDoseForm(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dose forms available for drug concepts — getDoseForm","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dose forms available for drug concepts — getDoseForm","text":"dose forms available drug concepts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dose forms available for drug concepts — getDoseForm","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getDoseForm(cdm = cdm) #> [1] \"Injectable\"            \"Injection\"             \"Nasal Powder\"          #> [4] \"Topical Liquefied Gas\" # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseUnit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available dose units — getDoseUnit","title":"Get available dose units — getDoseUnit","text":"Get dose form categories available database (see https://doi.org/10.1002/pds.5809 details routes classified).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseUnit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available dose units — getDoseUnit","text":"","code":"getDoseUnit(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseUnit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available dose units — getDoseUnit","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseUnit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available dose units — getDoseUnit","text":"character vector available routes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseUnit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available dose units — getDoseUnit","text":"","code":"# \\donttest{ library(CodelistGenerator)  cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31  getDoseUnit(cdm) #> [1] \"milligram\" \"percent\"    # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant codes of drug ingredients — getDrugIngredientCodes","title":"Get descendant codes of drug ingredients — getDrugIngredientCodes","text":"Get descendant codes drug ingredients","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant codes of drug ingredients — getDrugIngredientCodes","text":"","code":"getDrugIngredientCodes(   cdm,   name = NULL,   nameStyle = \"{concept_code}_{concept_name}\",   doseForm = NULL,   doseUnit = NULL,   routeCategory = NULL,   ingredientRange = c(1, Inf),   type = \"codelist\" )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant codes of drug ingredients — getDrugIngredientCodes","text":"cdm cdm reference via CDMConnector. name Names ingredients interest. example, c(\"acetaminophen\", \"codeine\"), result list length two descendant concepts two particular drug ingredients. Users can also specify concept ID instead name (e.g., c(1125315, 42948451)) using numeric vector. nameStyle Name style apply returned list. Can one \"{concept_code}\",\"{concept_id}\", \"{concept_name}\", combination (.e., \"{concept_code}_{concept_name}\"). doseForm codes specified dose form returned. NULL, descendant codes returned regardless dose form. Use 'getDoseForm()' see available dose forms. doseUnit codes specified dose unit returned. NULL, descendant codes returned regardless dose unit Use 'getDoseUnit()' see available dose units. routeCategory codes specified route returned. NULL, descendant codes returned regardless route category. Use getRoutes() find available route categories. ingredientRange Used restrict descendant codes associated specific number drug ingredients. Must vector length two first element minimum number ingredients allowed second maximum. value c(2, 2) restrict concepts associated two ingredients. type Can \"codelist\" \"codelist_with_details\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant codes of drug ingredients — getDrugIngredientCodes","text":"Concepts format based type argument.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant codes of drug ingredients — getDrugIngredientCodes","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getDrugIngredientCodes(cdm = cdm, name = \"Adalimumab\",                        nameStyle = \"{concept_name}\") #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - adalimumab (2 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get corresponding standard codes for International Classification of Diseases (ICD) 10 codes — getICD10StandardCodes","title":"Get corresponding standard codes for International Classification of Diseases (ICD) 10 codes — getICD10StandardCodes","text":"Get corresponding standard codes International Classification Diseases (ICD) 10 codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get corresponding standard codes for International Classification of Diseases (ICD) 10 codes — getICD10StandardCodes","text":"","code":"getICD10StandardCodes(   cdm,   level = c(\"ICD10 Chapter\", \"ICD10 SubChapter\"),   name = NULL,   nameStyle = \"{concept_code}_{concept_name}\",   includeDescendants = TRUE,   type = \"codelist\" )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get corresponding standard codes for International Classification of Diseases (ICD) 10 codes — getICD10StandardCodes","text":"cdm cdm reference via CDMConnector. level Can either \"ICD10 Chapter\", \"ICD10 SubChapter\", \"ICD10 Hierarchy\", \"ICD10 Code\". name Name chapter sub-chapter interest. NULL, considered. nameStyle Name style apply returned list. Can one \"{concept_code}\",\"{concept_id}\", \"{concept_name}\", combination (.e., \"{concept_code}_{concept_name}\"). includeDescendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. FALSE direct mappings ICD-10 codes standard codes returned. type Can \"codelist\" \"codelist_with_details\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get corresponding standard codes for International Classification of Diseases (ICD) 10 codes — getICD10StandardCodes","text":"named list, element containing corresponding standard codes (descendants) ICD chapters sub-chapters.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get corresponding standard codes for International Classification of Diseases (ICD) 10 codes — getICD10StandardCodes","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getICD10StandardCodes(cdm = cdm, level = c(   \"ICD10 Chapter\",   \"ICD10 SubChapter\" )) #> Getting non-standard ICD10 concepts #> Mapping from non-standard to standard concepts #> Getting descendant concepts #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - 1234_arthropathies (3 codes) #> - 1234_diseases_of_the_musculoskeletal_system_and_connective_tissue (3 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from non-standard vocabularies to standard. — getMappings","title":"Show mappings from non-standard vocabularies to standard. — getMappings","text":"Show mappings non-standard vocabularies standard.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from non-standard vocabularies to standard. — getMappings","text":"","code":"getMappings(   candidateCodelist,   cdm = NULL,   nonStandardVocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\",     \"LOINC\", \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from non-standard vocabularies to standard. — getMappings","text":"candidateCodelist Dataframe. cdm cdm reference via CDMConnector. nonStandardVocabularies Character vector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from non-standard vocabularies to standard. — getMappings","text":"Tibble information potential standard non-standard mappings codelist interest.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from non-standard vocabularies to standard. — getMappings","text":"","code":"# \\donttest{ cdm <- CodelistGenerator::mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- CodelistGenerator::getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\" ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #> Time taken: 0 minutes and 0 seconds CodelistGenerator::getMappings(   cdm = cdm,   candidateCodelist = codes,   nonStandardVocabularies = \"READ\" ) #> # A tibble: 1 × 7 #>   standard_concept_id standard_concept_name  standard_vocabulary_id #>                 <int> <chr>                  <chr>                  #> 1                   4 Osteoarthritis of knee SNOMED                 #> # ℹ 4 more variables: non_standard_concept_id <int>, #> #   non_standard_concept_name <chr>, non_standard_concept_code <chr>, #> #   non_standard_vocabulary_id <chr> # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available relationships between concepts — getRelationshipId","title":"Get available relationships between concepts — getRelationshipId","text":"Get available relationships concepts","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available relationships between concepts — getRelationshipId","text":"","code":"getRelationshipId(   cdm,   standardConcept1 = \"standard\",   standardConcept2 = \"standard\",   domains1 = \"condition\",   domains2 = \"condition\" )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available relationships between concepts — getRelationshipId","text":"cdm cdm reference via CDMConnector. standardConcept1 Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. standardConcept2 Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. domains1 Character vector one OMOP CDM domain. domains2 Character vector one OMOP CDM domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available relationships between concepts — getRelationshipId","text":"character vector unique concept relationship values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available relationships between concepts — getRelationshipId","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getRelationshipId(cdm = cdm) #> [1] \"Due to of\" # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available drug routes — getRouteCategories","title":"Get available drug routes — getRouteCategories","text":"Get dose form categories available database (see https://doi.org/10.1002/pds.5809) details routes classified).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available drug routes — getRouteCategories","text":"","code":"getRouteCategories(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available drug routes — getRouteCategories","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available drug routes — getRouteCategories","text":"character vector available routes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available drug routes — getRouteCategories","text":"","code":"# \\donttest{ library(CodelistGenerator)  cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31  getRouteCategories(cdm) #> [1] \"topical\"            \"transmucosal_nasal\" \"unclassified_route\"  # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version of the vocabulary used in the cdm — getVocabVersion","title":"Get the version of the vocabulary used in the cdm — getVocabVersion","text":"Get version vocabulary used cdm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version of the vocabulary used in the cdm — getVocabVersion","text":"","code":"getVocabVersion(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the version of the vocabulary used in the cdm — getVocabVersion","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version of the vocabulary used in the cdm — getVocabVersion","text":"vocabulary version used cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the version of the vocabulary used in the cdm — getVocabVersion","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getVocabVersion(cdm = cdm) #> [1] \"v5.0 22-JUN-22\" # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the vocabularies available in the cdm — getVocabularies","title":"Get the vocabularies available in the cdm — getVocabularies","text":"Get vocabularies available cdm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the vocabularies available in the cdm — getVocabularies","text":"","code":"getVocabularies(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the vocabularies available in the cdm — getVocabularies","text":"cdm cdm reference via CDMConnector.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the vocabularies available in the cdm — getVocabularies","text":"Names available vocabularies.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the vocabularies available in the cdm — getVocabularies","text":"","code":"# \\donttest{ cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 getVocabularies(cdm = cdm) #> [1] \"ATC\"    \"ICD10\"  \"LOINC\"  \"OMOP\"   \"Read\"   \"RxNorm\" \"SNOMED\" \"UCUM\"   # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/groupColumnDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of groupColumn. — groupColumnDoc","title":"Helper for consistent documentation of groupColumn. — groupColumnDoc","text":"Helper consistent documentation groupColumn.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/groupColumnDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of groupColumn. — groupColumnDoc","text":"groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/groupColumnStrataDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of groupColumn. — groupColumnStrataDoc","title":"Helper for consistent documentation of groupColumn. — groupColumnStrataDoc","text":"Helper consistent documentation groupColumn.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/groupColumnStrataDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of groupColumn. — groupColumnStrataDoc","text":"groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. used header.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/headerDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of header. — headerDoc","title":"Helper for consistent documentation of header. — headerDoc","text":"Helper consistent documentation header.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/headerDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of header. — headerDoc","text":"header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". Alternatively, can include names use overall header labels.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/headerStrataDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of header. — headerStrataDoc","title":"Helper for consistent documentation of header. — headerStrataDoc","text":"Helper consistent documentation header.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/headerStrataDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of header. — headerStrataDoc","text":"header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. Alternatively, can include names use overall header labels.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/hideDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of hide. — hideDoc","title":"Helper for consistent documentation of hide. — hideDoc","text":"Helper consistent documentation hide.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/hideDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of hide. — hideDoc","text":"hide Table columns exclude, options :  \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header groupColumn.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/hideStrataDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of hide. — hideStrataDoc","title":"Helper for consistent documentation of hide. — hideStrataDoc","text":"Helper consistent documentation hide.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/hideStrataDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of hide. — hideStrataDoc","text":"hide Table columns exclude, options : \"cdm_name\", \"codelist_name\", \"year\", \"sex\", \"age_group\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. used header groupColumn.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/includeDescendantsDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of includeDescendants. — includeDescendantsDoc","title":"Helper for consistent documentation of includeDescendants. — includeDescendantsDoc","text":"Helper consistent documentation includeDescendants.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/includeDescendantsDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of includeDescendants. — includeDescendantsDoc","text":"includeDescendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. FALSE direct mappings ICD-10 codes standard codes returned.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/ingredientRangeDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of ingredientRange. — ingredientRangeDoc","title":"Helper for consistent documentation of ingredientRange. — ingredientRangeDoc","text":"Helper consistent documentation ingredientRange.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/ingredientRangeDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of ingredientRange. — ingredientRangeDoc","text":"ingredientRange Used restrict descendant codes associated specific number drug ingredients. Must vector length two first element minimum number ingredients allowed second maximum. value c(2, 2) restrict concepts associated two ingredients.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/keepOriginalDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of keepOriginal. — keepOriginalDoc","title":"Helper for consistent documentation of keepOriginal. — keepOriginalDoc","text":"Helper consistent documentation keepOriginal.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/keepOriginalDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of keepOriginal. — keepOriginalDoc","text":"keepOriginal Whether keep original codelist append stratify (TRUE) just return stratified codelist (FALSE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/levelATCDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of level. — levelATCDoc","title":"Helper for consistent documentation of level. — levelATCDoc","text":"Helper consistent documentation level.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/levelATCDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of level. — levelATCDoc","text":"level ATC level. Can one \"ATC 1st\", \"ATC 2nd\", \"ATC 3rd\", \"ATC 4th\", \"ATC 5th\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/levelICD10Doc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of level. — levelICD10Doc","title":"Helper for consistent documentation of level. — levelICD10Doc","text":"Helper consistent documentation level.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/levelICD10Doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of level. — levelICD10Doc","text":"level Can either \"ICD10 Chapter\", \"ICD10 SubChapter\", \"ICD10 Hierarchy\", \"ICD10 Code\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/minimumCountDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of minimumCount. — minimumCountDoc","title":"Helper for consistent documentation of minimumCount. — minimumCountDoc","text":"Helper consistent documentation minimumCount.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/minimumCountDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of minimumCount. — minimumCountDoc","text":"minimumCount codes frequency removed.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate example vocabulary database — mockVocabRef","title":"Generate example vocabulary database — mockVocabRef","text":"Generate example vocabulary database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate example vocabulary database — mockVocabRef","text":"","code":"mockVocabRef(backend = \"data_frame\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate example vocabulary database — mockVocabRef","text":"backend 'database' (duckdb) 'data_frame'.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate example vocabulary database — mockVocabRef","text":"cdm reference mock vocabulary.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate example vocabulary database — mockVocabRef","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 cdm #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, concept, concept_ancestor, concept_synonym, #> concept_relationship, vocabulary, drug_strength, observation_period, cdm_source #> • cohort tables: - #> • achilles tables: achilles_analysis, achilles_results, achilles_results_dist #> • other tables: - # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/nameStyleDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of nameStyle. — nameStyleDoc","title":"Helper for consistent documentation of nameStyle. — nameStyleDoc","text":"Helper consistent documentation nameStyle.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/nameStyleDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of nameStyle. — nameStyleDoc","text":"nameStyle Name style apply returned list. Can one \"{concept_code}\",\"{concept_id}\", \"{concept_name}\", combination (.e., \"{concept_code}_{concept_name}\").","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. omopgenerics cohortCodelist, exportCodelist, exportConceptSetExpression, importCodelist, importConceptSetExpression, newCodelist, newCodelistWithDetails, newConceptSetExpression","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/routeCategoryDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of routeCategory. — routeCategoryDoc","title":"Helper for consistent documentation of routeCategory. — routeCategoryDoc","text":"Helper consistent documentation routeCategory.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/routeCategoryDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of routeCategory. — routeCategoryDoc","text":"routeCategory codes specified route returned. NULL, descendant codes returned regardless route category. Use getRoutes() find available route categories.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the source codes being used in patient records — sourceCodesInUse","title":"Get the source codes being used in patient records — sourceCodesInUse","text":"Get source codes used patient records","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source codes being used in patient records — sourceCodesInUse","text":"","code":"sourceCodesInUse(   cdm,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source codes being used in patient records — sourceCodesInUse","text":"cdm cdm reference via CDMConnector. table cdm table interest.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source codes being used in patient records — sourceCodesInUse","text":"list source codes used database.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the source codes being used in patient records — sourceCodesInUse","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 x <- sourceCodesInUse(cdm = cdm) x #> integer(0) CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/standardConceptDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of standardConcept. — standardConceptDoc","title":"Helper for consistent documentation of standardConcept. — standardConceptDoc","text":"Helper consistent documentation standardConcept.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/standardConceptDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of standardConcept. — standardConceptDoc","text":"standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByConcept.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratify a codelist by the concepts included within it. — stratifyByConcept","title":"Stratify a codelist by the concepts included within it. — stratifyByConcept","text":"Stratify codelist concepts included within .","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByConcept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratify a codelist by the concepts included within it. — stratifyByConcept","text":"","code":"stratifyByConcept(x, cdm, keepOriginal = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByConcept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratify a codelist by the concepts included within it. — stratifyByConcept","text":"x codelist. cdm cdm reference via CDMConnector. keepOriginal Whether keep original codelist append stratify (TRUE) just return stratified codelist (FALSE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByConcept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratify a codelist by the concepts included within it. — stratifyByConcept","text":"codelist codelist details required stratifications, different elements list.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByConcept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratify a codelist by the concepts included within it. — stratifyByConcept","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- list(\"concepts\" = c(20,21)) new_codes <- stratifyByConcept(x = codes,                                cdm = cdm,                                keepOriginal = TRUE) #> Warning: ! `codelist` casted to integers. new_codes #>  #> ── 3 codelists ───────────────────────────────────────────────────────────────── #>  #> - concepts (2 codes) #> - concepts_glucagon_nasal_powder (1 codes) #> - concepts_nitrogen_topical_liquefied_gas (1 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByDoseUnit.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratify a codelist by dose unit. — stratifyByDoseUnit","title":"Stratify a codelist by dose unit. — stratifyByDoseUnit","text":"Stratify codelist dose unit.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByDoseUnit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratify a codelist by dose unit. — stratifyByDoseUnit","text":"","code":"stratifyByDoseUnit(x, cdm, keepOriginal = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByDoseUnit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratify a codelist by dose unit. — stratifyByDoseUnit","text":"x codelist. cdm cdm reference via CDMConnector. keepOriginal Whether keep original codelist append stratify (TRUE) just return stratified codelist (FALSE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByDoseUnit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratify a codelist by dose unit. — stratifyByDoseUnit","text":"codelist required stratifications, different elements list.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByDoseUnit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratify a codelist by dose unit. — stratifyByDoseUnit","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- list(\"concepts\" = c(20,21)) new_codes <- stratifyByDoseUnit(x = codes,                                 cdm = cdm,                                 keepOriginal = TRUE) #> Warning: ! `codelist` casted to integers. new_codes #>  #> ── 3 codelists ───────────────────────────────────────────────────────────────── #>  #> - concepts (2 codes) #> - concepts_milligram (1 codes) #> - concepts_percent (1 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratify a codelist by route category. — stratifyByRouteCategory","title":"Stratify a codelist by route category. — stratifyByRouteCategory","text":"Stratify codelist route category.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratify a codelist by route category. — stratifyByRouteCategory","text":"","code":"stratifyByRouteCategory(x, cdm, keepOriginal = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratify a codelist by route category. — stratifyByRouteCategory","text":"x codelist. cdm cdm reference via CDMConnector. keepOriginal Whether keep original codelist append stratify (TRUE) just return stratified codelist (FALSE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratify a codelist by route category. — stratifyByRouteCategory","text":"codelist required stratifications, different elements list.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratify a codelist by route category. — stratifyByRouteCategory","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- list(\"concepts\" = c(20,21)) new_codes <- stratifyByRouteCategory(x = codes,                                      cdm = cdm,                                      keepOriginal = TRUE) #> Warning: ! `codelist` casted to integers. #> Warning: ! `codelist` casted to integers. new_codes #>  #> ── 3 codelists ───────────────────────────────────────────────────────────────── #>  #> - concepts (2 codes) #> - concepts_topical (1 codes) #> - concepts_transmucosal_nasal (1 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDomain.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a codelist to only those codes from a particular domain. — subsetOnDomain","title":"Subset a codelist to only those codes from a particular domain. — subsetOnDomain","text":"Subset codelist codes particular domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDomain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a codelist to only those codes from a particular domain. — subsetOnDomain","text":"","code":"subsetOnDomain(x, cdm, domain, negate = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDomain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a codelist to only those codes from a particular domain. — subsetOnDomain","text":"x codelist. cdm cdm reference via CDMConnector. domain Character vector one OMOP CDM domains. results restricted given domains. Check available ones running getDomains(). NULL, supported domains included: Condition, Drug, Procedure, Device, Observation, Measurement. negate FALSE, concepts domain specified returned. TRUE, concepts domain specified excluded.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDomain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a codelist to only those codes from a particular domain. — subsetOnDomain","text":"codelist concepts associated domain (negate = FALSE) codelist without concepts associated domain (negate = TRUE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDomain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a codelist to only those codes from a particular domain. — subsetOnDomain","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- subsetOnDomain(               x = list(\"codes\" = c(10,13,15)),               cdm = cdm,               domain = \"Drug\") #> Warning: ! `codelist` casted to integers. codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - codes (2 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDoseUnit.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a codelist to only those with a particular dose unit. — subsetOnDoseUnit","title":"Subset a codelist to only those with a particular dose unit. — subsetOnDoseUnit","text":"Subset codelist particular dose unit.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDoseUnit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a codelist to only those with a particular dose unit. — subsetOnDoseUnit","text":"","code":"subsetOnDoseUnit(x, cdm, doseUnit, negate = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDoseUnit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a codelist to only those with a particular dose unit. — subsetOnDoseUnit","text":"x codelist. cdm cdm reference via CDMConnector. doseUnit codes specified dose unit returned. NULL, descendant codes returned regardless dose unit Use 'getDoseUnit()' see available dose units. negate FALSE, concepts dose unit specified returned. TRUE, concepts dose unit specified excluded.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDoseUnit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a codelist to only those with a particular dose unit. — subsetOnDoseUnit","text":"codelist concepts associated dose unit (negate = FALSE) codelist without concepts associated dose unit(negate = TRUE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnDoseUnit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a codelist to only those with a particular dose unit. — subsetOnDoseUnit","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- subsetOnDoseUnit(x = list(\"codes\" = c(20,21)),                           cdm = cdm,                           doseUnit = c(\"milligram\")) #> Warning: ! `codelist` casted to integers.  codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - codes (1 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"Subset codelist particular route category","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"","code":"subsetOnRouteCategory(x, cdm, routeCategory, negate = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"x codelist. cdm cdm reference via CDMConnector. routeCategory codes specified route returned. NULL, descendant codes returned regardless route category. Use getRoutes() find available route categories. negate FALSE, concepts routeCategory specified returned. TRUE, concepts routeCategory specified excluded.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"codelist concepts associated specified route categories (negate FALSE) codelist without concepts associated specified route categories (negate TRUE).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"","code":"# \\donttest{ library(CodelistGenerator) cdm <- mockVocabRef() #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- subsetOnRouteCategory(               x = list(\"codes\" = c(20,21)),               cdm = cdm,               routeCategory = \"topical\") #> Warning: ! `codelist` casted to integers. codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - codes (1 codes) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a codelist to keep only the codes being used in patient records — subsetToCodesInUse","title":"Filter a codelist to keep only the codes being used in patient records — subsetToCodesInUse","text":"Filter codelist keep codes used patient records","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a codelist to keep only the codes being used in patient records — subsetToCodesInUse","text":"","code":"subsetToCodesInUse(   x,   cdm,   minimumCount = 0L,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a codelist to keep only the codes being used in patient records — subsetToCodesInUse","text":"x codelist. cdm cdm reference via CDMConnector. minimumCount codes frequency removed. table cdm table interest.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a codelist to keep only the codes being used in patient records — subsetToCodesInUse","text":"filtered codelist codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a codelist to keep only the codes being used in patient records — subsetToCodesInUse","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- getCandidateCodes(cdm = cdm,                            keywords = \"arthritis\",                            domains = \"Condition\",                            includeDescendants = FALSE) #> Limiting to domains of interest #> Getting concepts to include #> Search completed. Finishing up. #> ✔ 3 candidate concepts identified #> Time taken: 0 minutes and 0 seconds x <- subsetToCodesInUse(list(\"cs1\" = codes$concept_id,                                \"cs2\" = 999),                                 cdm = cdm) #> No codes from codelist cs2 found in the database  x #> $cs1 #> [1] 5 4 #>  CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise code use from achilles counts. — summariseAchillesCodeUse","title":"Summarise code use from achilles counts. — summariseAchillesCodeUse","text":"Summarise code use achilles counts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise code use from achilles counts. — summariseAchillesCodeUse","text":"","code":"summariseAchillesCodeUse(x, cdm, countBy = c(\"record\", \"person\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise code use from achilles counts. — summariseAchillesCodeUse","text":"x codelist. cdm cdm reference via CDMConnector. countBy Either \"record\" record-level counts \"person\" person-level counts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise code use from achilles counts. — summariseAchillesCodeUse","text":"tibble summarised counts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise code use from achilles counts. — summariseAchillesCodeUse","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 oa <- getCandidateCodes(cdm = cdm, keywords = \"osteoarthritis\") #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #> Time taken: 0 minutes and 0 seconds result_achilles <- summariseAchillesCodeUse(list(oa = oa$concept_id), cdm = cdm) #>  result_achilles #> # A tibble: 2 × 13 #>   result_id cdm_name group_name    group_level strata_name strata_level #>       <int> <chr>    <chr>         <chr>       <chr>       <chr>        #> 1         1 mock     codelist_name oa          domain_id   condition    #> 2         1 mock     codelist_name oa          domain_id   condition    #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise code use in patient-level data. — summariseCodeUse","title":"Summarise code use in patient-level data. — summariseCodeUse","text":"Summarise code use patient-level data.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise code use in patient-level data. — summariseCodeUse","text":"","code":"summariseCodeUse(   x,   cdm,   countBy = c(\"record\", \"person\"),   byConcept = TRUE,   byYear = FALSE,   bySex = FALSE,   ageGroup = NULL,   dateRange = as.Date(c(NA, NA)) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise code use in patient-level data. — summariseCodeUse","text":"x codelist. cdm cdm reference via CDMConnector. countBy Either \"record\" record-level counts \"person\" person-level counts. byConcept TRUE FALSE. TRUE code use summarised concept. byYear TRUE FALSE. TRUE code use summarised year. bySex TRUE FALSE. TRUE code use summarised sex. ageGroup NULL, list ageGroup vectors length two. dateRange Two dates. first indicating earliest cohort start date second indicating latest possible cohort end date. NULL first date set missing, earliest observation_start_date observation_period table used former. NULL second date set missing, latest observation_end_date observation_period table used latter.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise code use in patient-level data. — summariseCodeUse","text":"tibble count results overall , specified, strata.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise code use in patient-level data. — summariseCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomiaDir()) cdm <- CDMConnector::cdmFromCon(con,                                 cdmSchema = \"main\",                                 writeSchema = \"main\") acetiminophen <- c(1125315,  1127433, 40229134, 40231925, 40162522, 19133768,  1127078) poliovirus_vaccine <- c(40213160) cs <- list(acetiminophen = acetiminophen,           poliovirus_vaccine = poliovirus_vaccine) results <- summariseCodeUse(cs,cdm = cdm) results CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"Summarise code use among cohort cdm reference","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"","code":"summariseCohortCodeUse(   x,   cdm,   cohortTable,   cohortId = NULL,   timing = \"any\",   countBy = c(\"record\", \"person\"),   byConcept = TRUE,   byYear = FALSE,   bySex = FALSE,   ageGroup = NULL )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"x codelist. cdm cdm reference via CDMConnector. cohortTable cohort table cdm reference. cohortId vector cohort IDs include timing assess code use relative cohort dates. can \"\"(code use time individuals cohort)  \"entry\" (code use individuals' cohort start date). countBy Either \"record\" record-level counts \"person\" person-level counts. byConcept TRUE FALSE. TRUE code use summarised concept. byYear TRUE FALSE. TRUE code use summarised year. bySex TRUE FALSE. TRUE code use summarised sex. ageGroup NULL, list ageGroup vectors length two.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"tibble results overall , specified, strata","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ library(CodelistGenerator) library(duckdb) library(DBI) library(CDMConnector) con <- dbConnect(duckdb(),                  dbdir = eunomiaDir()) cdm <- cdmFromCon(con,                  cdmSchema = \"main\",                  writeSchema = \"main\") cdm <- generateConceptCohortSet(cdm = cdm,                   conceptSet = list(a = 260139,                                     b = 1127433),                   name = \"cohorts\",                   end = \"observation_period_end_date\",                   overwrite = TRUE)  results_cohort_mult <- summariseCohortCodeUse(list(cs = c(260139,19133873)),                       cdm = cdm,                       cohortTable = \"cohorts\",                       timing = \"entry\")  results_cohort_mult CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find orphan codes related to a codelist using achilles counts and, if available, PHOEBE concept recommendations — summariseOrphanCodes","title":"Find orphan codes related to a codelist using achilles counts and, if available, PHOEBE concept recommendations — summariseOrphanCodes","text":"Find orphan codes related codelist using achilles counts , available, PHOEBE concept recommendations","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find orphan codes related to a codelist using achilles counts and, if available, PHOEBE concept recommendations — summariseOrphanCodes","text":"","code":"summariseOrphanCodes(   x,   cdm,   domain = c(\"condition\", \"device\", \"drug\", \"measurement\", \"observation\", \"procedure\",     \"visit\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find orphan codes related to a codelist using achilles counts and, if available, PHOEBE concept recommendations — summariseOrphanCodes","text":"x codelist. cdm cdm reference via CDMConnector. domain Character vector one OMOP CDM domains. results restricted given domains. Check available ones running getDomains(). NULL, supported domains included: Condition, Drug, Procedure, Device, Observation, Measurement.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find orphan codes related to a codelist using achilles counts and, if available, PHOEBE concept recommendations — summariseOrphanCodes","text":"summarised result containg frequency codes related () codelist.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find orphan codes related to a codelist using achilles counts and, if available, PHOEBE concept recommendations — summariseOrphanCodes","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- getCandidateCodes(cdm = cdm, keywords = \"Musculoskeletal disorder\", domains = \"Condition\", includeDescendants = FALSE) #> Limiting to domains of interest #> Getting concepts to include #> Search completed. Finishing up. #> ✔ 1 candidate concept identified #> Time taken: 0 minutes and 0 seconds  orphan_codes <- summariseOrphanCodes(x = list(\"msk\" = codes$concept_id), cdm = cdm) #> PHOEBE results not available #> ℹ The concept_recommended table is not present in the cdm. #> Getting orphan codes for msk #>   orphan_codes #> # A tibble: 2 × 13 #>   result_id cdm_name group_name    group_level strata_name strata_level #>       <int> <chr>    <chr>         <chr>       <chr>       <chr>        #> 1         1 mock     codelist_name msk         domain_id   condition    #> 2         1 mock     codelist_name msk         domain_id   condition    #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseUnmappedCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find unmapped concepts related to codelist — summariseUnmappedCodes","title":"Find unmapped concepts related to codelist — summariseUnmappedCodes","text":"Find unmapped concepts related codelist","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseUnmappedCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find unmapped concepts related to codelist — summariseUnmappedCodes","text":"","code":"summariseUnmappedCodes(   x,   cdm,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseUnmappedCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find unmapped concepts related to codelist — summariseUnmappedCodes","text":"x codelist. cdm cdm reference via CDMConnector. table Names clinical tables search unmapped codes. Can one \"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\", \"observation\", \"procedure_occurrence\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseUnmappedCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find unmapped concepts related to codelist — summariseUnmappedCodes","text":"summarised result unmapped concepts related given codelist.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseUnmappedCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find unmapped concepts related to codelist — summariseUnmappedCodes","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- list(\"Musculoskeletal disorder\" = 1) cdm <- omopgenerics::insertTable(cdm, \"condition_occurrence\", dplyr::tibble(person_id = 1,               condition_occurrence_id = 1,               condition_concept_id = 0,               condition_start_date  = as.Date(\"2000-01-01\"),               condition_type_concept_id  = NA,               condition_source_concept_id = 7)) summariseUnmappedCodes(x = list(\"osteoarthritis\" = 2), cdm = cdm, table = \"condition_occurrence\") #> Warning: ! `codelist` casted to integers. #> Searching for unmapped codes related to osteoarthritis #> # A tibble: 1 × 13 #>   result_id cdm_name group_name    group_level    strata_name strata_level #>       <int> <chr>    <chr>         <chr>          <chr>       <chr>        #> 1         1 mock     codelist_name osteoarthritis overall     overall      #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseAchillesCodeUse into a table — tableAchillesCodeUse","title":"Format the result of summariseAchillesCodeUse into a table — tableAchillesCodeUse","text":"Format result summariseAchillesCodeUse table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseAchillesCodeUse into a table — tableAchillesCodeUse","text":"","code":"tableAchillesCodeUse(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate_name\"),   groupColumn = character(),   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseAchillesCodeUse into a table — tableAchillesCodeUse","text":"result <summarised_result> results type \"achilles_code_use\". type Type desired formatted table. see supported formats use visOmopResults::tableType(). header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". Alternatively, can include names use overall header labels. groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header. hide Table columns exclude, options :  \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header groupColumn. .options Named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseAchillesCodeUse into a table — tableAchillesCodeUse","text":"table formatted version summariseCohortCodeUse result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseAchillesCodeUse into a table — tableAchillesCodeUse","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 oa <- getCandidateCodes(cdm = cdm, keywords = \"osteoarthritis\") #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #> Time taken: 0 minutes and 0 seconds result_achilles <- summariseAchillesCodeUse(list(oa = oa$concept_id), cdm = cdm) #>  tableAchillesCodeUse(result_achilles)                     Database name                            mock            Codelist name       Domain ID       Standard concept name       Standard concept ID       Standard concept       Vocabulary ID                Estimate name            Record count     oa condition Osteoarthritis of knee 4 standard SNOMED 400  Osteoarthritis of hip 5 standard SNOMED 200CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseCodeUse into a table. — tableCodeUse","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"Format result summariseCodeUse table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"","code":"tableCodeUse(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate_name\"),   groupColumn = character(),   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"result <summarised_result> results type \"code_use\". type Type desired formatted table. see supported formats use visOmopResults::tableType(). header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. Alternatively, can include names use overall header labels. groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. used header. hide Table columns exclude, options : \"cdm_name\", \"codelist_name\", \"year\", \"sex\", \"age_group\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. used header groupColumn. .options Named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"table formatted version summariseCodeUse result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomiaDir()) cdm <- CDMConnector::cdmFromCon(con,                                 cdmSchema = \"main\",                                 writeSchema = \"main\") acetiminophen <- c(1125315,  1127433, 40229134, 40231925, 40162522, 19133768,  1127078) poliovirus_vaccine <- c(40213160) cs <- list(acetiminophen = acetiminophen,           poliovirus_vaccine = poliovirus_vaccine) results <- summariseCodeUse(cs,cdm = cdm) tableCodeUse(results) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"Format result summariseCohortCodeUse table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"","code":"tableCohortCodeUse(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate_name\"),   groupColumn = character(),   hide = c(\"timing\"),   .options = list(),   timing = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"result <summarised_result> results type \"cohort_code_use\". type Type desired formatted table. see supported formats use visOmopResults::tableType(). header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. Alternatively, can include names use overall header labels. groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. used header. hide Table columns exclude, options : \"cdm_name\", \"codelist_name\", \"year\", \"sex\", \"age_group\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"source_concept_name\", \"source_concept_id\", \"domain_id\". results stratified, \"year\", \"sex\", \"age_group\" can also used. used header groupColumn. .options Named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values. timing deprecated.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"table formatted version summariseCohortCodeUse result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomiaDir()) cdm <- CDMConnector::cdmFromCon(con,                                   cdmSchema = \"main\",                                   writeSchema = \"main\") cdm <- CDMConnector::generateConceptCohortSet(cdm = cdm, conceptSet = list(a = 260139,                   b = 1127433),                   name = \"cohorts\",                   end = \"observation_period_end_date\",                   overwrite = TRUE)  results_cohort_mult <- summariseCohortCodeUse(list(cs = c(260139,19133873)),                       cdm = cdm,                       cohortTable = \"cohorts\",                       timing = \"entry\")  tableCohortCodeUse(results_cohort_mult) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of table. — tableDoc","title":"Helper for consistent documentation of table. — tableDoc","text":"Helper consistent documentation table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of table. — tableDoc","text":"table cdm table interest.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseOrphanCodes into a table — tableOrphanCodes","title":"Format the result of summariseOrphanCodes into a table — tableOrphanCodes","text":"Format result summariseOrphanCodes table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseOrphanCodes into a table — tableOrphanCodes","text":"","code":"tableOrphanCodes(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate_name\"),   groupColumn = character(),   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseOrphanCodes into a table — tableOrphanCodes","text":"result <summarised_result> results type \"orphan_codes\". type Type desired formatted table. see supported formats use visOmopResults::tableType(). header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". Alternatively, can include names use overall header labels. groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header. hide Table columns exclude, options :  \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header groupColumn. .options Named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseOrphanCodes into a table — tableOrphanCodes","text":"table formatted version summariseOrphanCodes result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseOrphanCodes into a table — tableOrphanCodes","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- getCandidateCodes(cdm = cdm, keywords = \"Musculoskeletal disorder\", domains = \"Condition\", includeDescendants = FALSE) #> Limiting to domains of interest #> Getting concepts to include #> Search completed. Finishing up. #> ✔ 1 candidate concept identified #> Time taken: 0 minutes and 0 seconds  orphan_codes <- summariseOrphanCodes(x = list(\"msk\" = codes$concept_id), cdm = cdm) #> PHOEBE results not available #> ℹ The concept_recommended table is not present in the cdm. #> Getting orphan codes for msk #>   tableOrphanCodes(orphan_codes)                     Database name                            mock            Codelist name       Domain ID       Standard concept name       Standard concept ID       Standard concept       Vocabulary ID                Estimate name            Record count     msk condition Osteoarthritis of knee 4 standard SNOMED 400  Osteoarthritis of hip 5 standard SNOMED 200 CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableUnmappedCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseUnmappedCodeUse into a table — tableUnmappedCodes","title":"Format the result of summariseUnmappedCodeUse into a table — tableUnmappedCodes","text":"Format result summariseUnmappedCodeUse table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableUnmappedCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseUnmappedCodeUse into a table — tableUnmappedCodes","text":"","code":"tableUnmappedCodes(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate_name\"),   groupColumn = character(),   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableUnmappedCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseUnmappedCodeUse into a table — tableUnmappedCodes","text":"result <summarised_result> results type \"umapped_codes\". type Type desired formatted table. see supported formats use visOmopResults::tableType(). header vector specifying elements include header. order elements matters, first topmost header. header vector can contain one following variables: \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". Alternatively, can include names use overall header labels. groupColumn Variables use group labels. Allowed columns : \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header. hide Table columns exclude, options :  \"cdm_name\", \"codelist_name\", \"domain_id\", \"standard_concept_name\", \"standard_concept_id\", \"estimate_name\", \"standard_concept\", \"vocabulary_id\". used header groupColumn. .options Named list additional formatting options. visOmopResults::tableOptions() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableUnmappedCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseUnmappedCodeUse into a table — tableUnmappedCodes","text":"table formatted version summariseUnmappedCodes result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableUnmappedCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseUnmappedCodeUse into a table — tableUnmappedCodes","text":"","code":"# \\donttest{ cdm <- mockVocabRef(\"database\") #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 #> Warning: There are observation period end dates after the current date: 2025-04-11 #> ℹ The latest max observation period end date found is 2025-12-31 codes <- list(\"Musculoskeletal disorder\" = 1) cdm <- omopgenerics::insertTable(cdm, \"condition_occurrence\", dplyr::tibble(person_id = 1,               condition_occurrence_id = 1,               condition_concept_id = 0,               condition_start_date  = as.Date(\"2000-01-01\"),               condition_type_concept_id  = NA,               condition_source_concept_id = 7)) unmapped_codes <- summariseUnmappedCodes(x = list(\"osteoarthritis\" = 2), cdm = cdm, table = \"condition_occurrence\") #> Warning: ! `codelist` casted to integers. #> Searching for unmapped codes related to osteoarthritis tableUnmappedCodes(unmapped_codes)                     Database name                            mock            Codelist name       Unmapped concept name       Unmapped concept ID                Estimate name            Record count     osteoarthritis Degenerative arthropathy 7 1 cdm <- omopgenerics::insertTable(  cdm,  \"measurement\",  dplyr::tibble(    person_id = 1,    measurement_id = 1,    measurement_concept_id = 0,    measurement_date  = as.Date(\"2000-01-01\"),    measurement_type_concept_id  = NA,    measurement_source_concept_id = 7  ) ) table <- summariseUnmappedCodes(x = list(\"cs\" = 2),                                cdm = cdm,                                table = c(\"measurement\")) #> Warning: ! `codelist` casted to integers. #> Searching for unmapped codes related to cs tableUnmappedCodes(unmapped_codes)                     Database name                            mock            Codelist name       Unmapped concept name       Unmapped concept ID                Estimate name            Record count     osteoarthritis Degenerative arthropathy 7 1 CDMConnector::cdmDisconnect(cdm) # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/typeBroadDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of type. — typeBroadDoc","title":"Helper for consistent documentation of type. — typeBroadDoc","text":"Helper consistent documentation type.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/typeBroadDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of type. — typeBroadDoc","text":"type Can \"codelist\", \"codelist_with_details\" \"concept_set_expression\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/typeNarrowDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of type. — typeNarrowDoc","title":"Helper for consistent documentation of type. — typeNarrowDoc","text":"Helper consistent documentation type.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/typeNarrowDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of type. — typeNarrowDoc","text":"type Can \"codelist\" \"codelist_with_details\".","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/typeTableDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of type. — typeTableDoc","title":"Helper for consistent documentation of type. — typeTableDoc","text":"Helper consistent documentation type.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/typeTableDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of type. — typeTableDoc","text":"type Type desired formatted table. see supported formats use visOmopResults::tableType().","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/xDoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for consistent documentation of x. — xDoc","title":"Helper for consistent documentation of x. — xDoc","text":"Helper consistent documentation x.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/xDoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for consistent documentation of x. — xDoc","text":"x codelist.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-30","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 3.0","title":"CodelistGenerator 3.0","text":"CRAN release: 2024-05-31 Add function getRelationshipId Add functions summariseAchillesCodeUse (replaces achillesCodeUse), summariseOrphanCodes (replaces findOrphanCodes), tableAchillesCodeUse, tableCodeUse, tableCohortCodeUse, tableOrphanCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-223","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.3","title":"CodelistGenerator 2.2.3","text":"CRAN release: 2024-03-08 Fix forthcoming breaking change dependency omopgenerics","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-222","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.2","title":"CodelistGenerator 2.2.2","text":"CRAN release: 2024-02-14 Fix edge case multiple exclusion criteria","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-221","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.1","title":"CodelistGenerator 2.2.1","text":"CRAN release: 2024-02-07 Working omopgenerics","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-220","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.0","title":"CodelistGenerator 2.2.0","text":"CRAN release: 2024-01-25 Added functions findOrphanCodes, restrictToCodesInUse, sourceCodesInUse. Speed improvements getCandidateCodes search place (e.g. database side). Dropped explicit support Arrow cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-211","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.1.1","title":"CodelistGenerator 2.1.1","text":"CRAN release: 2023-11-20 Improved support device domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-200","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.0.0","title":"CodelistGenerator 2.0.0","text":"CRAN release: 2023-10-09 Simplified interface getCandidateCodes, number arguments removed. Added function summariseCohortCodeUse.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-170","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.7.0","title":"CodelistGenerator 1.7.0","text":"CRAN release: 2023-08-16 Added function codesFromCohort.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-160","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.6.0","title":"CodelistGenerator 1.6.0","text":"CRAN release: 2023-07-07 Improved getICD10StandardCodes function. Added function codesFromConceptSet.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-150","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.5.0","title":"CodelistGenerator 1.5.0","text":"CRAN release: 2023-06-13 Require CDMConnector v1.0.0 .","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-140","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.4.0","title":"CodelistGenerator 1.4.0","text":"CRAN release: 2023-06-06 Added function summariseCodeUse.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-130","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.3.0","title":"CodelistGenerator 1.3.0","text":"CRAN release: 2023-05-30 Added function getICD10StandardCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-120","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.2.0","title":"CodelistGenerator 1.2.0","text":"CRAN release: 2023-05-04 Added functions getATCCodes getDrugIngredientCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-110","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.1.0","title":"CodelistGenerator 1.1.0","text":"CRAN release: 2023-04-01 Added exactMatch includeSequela options getCandidateCodes function.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-100","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.0.0","title":"CodelistGenerator 1.0.0","text":"CRAN release: 2023-02-07 Added NEWS.md file track changes package.","code":""}]
