[{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to CodelistGenerator","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"contributing-code-or-documentation","dir":"","previous_headings":"","what":"Contributing code or documentation","title":"Contributing to CodelistGenerator","text":"package developed part DARWIN EU(R) project closed external contributions. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Contributing code or documentation","what":"Documenting the package","title":"Contributing to CodelistGenerator","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Contributing code or documentation","what":"Run tests","title":"Contributing to CodelistGenerator","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:CodelistGenerator\", unload=TRUE) devtools::test_coverage()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Contributing code or documentation","what":"Adhere to code style","title":"Contributing to CodelistGenerator","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Contributing code or documentation","what":"Run check() before opening a pull request","title":"Contributing to CodelistGenerator","text":"opening pull request please make sure run: warnings seen. package CRAN close submitted CRAN please also run: Also can worth checking spelling urls","code":"devtools::check() rcmdcheck::rcmdcheck(args = c(\"--no-manual\", \"--as-cran\")) devtools::check_win_devel() spelling::spell_check_package() urlchecker::url_check()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"precompute-vignette-data","dir":"","previous_headings":"Contributing code or documentation","what":"Precompute vignette data","title":"Contributing to CodelistGenerator","text":"search results presented vignettes precomputed database full vocabulary. making changes affect results, recomputed. Note may need change database connection details script.","code":"source(here::here(\"extras\", \"precomputeVignetteData.R\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"creating-a-code-list-for-dementia","dir":"Articles","previous_headings":"","what":"Creating a code list for dementia","title":"Introduction to CodelistGenerator","text":"example going generate candidate codelist dementia, looking codes condition domain. Let’s first load libraries","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"connect-to-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connect to the OMOP CDM vocabularies","title":"Introduction to CodelistGenerator","text":"CodelistGenerator works cdm_reference vocabularies tables OMOP CDM using CDMConnector package.","code":"# example with postgres database connection details db <- DBI::dbConnect(RPostgres::Postgres(),   dbname = Sys.getenv(\"server\"),   port = Sys.getenv(\"port\"),   host = Sys.getenv(\"host\"),   user = Sys.getenv(\"user\"),   password = Sys.getenv(\"password\") )  # create cdm reference cdm <- CDMConnector::cdm_from_con(   con = db,   cdm_schema = Sys.getenv(\"vocabulary_schema\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"check-version-of-the-vocabularies","dir":"Articles","previous_headings":"","what":"Check version of the vocabularies","title":"Introduction to CodelistGenerator","text":"important note results CodelistGenerator specific particular version OMOP CDM vocabularies. can see version vocabulary used like ","code":"getVocabVersion(cdm = cdm) #> [1] \"vocabVersion\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"a-code-list-from-dementia-4182210-and-its-descendants","dir":"Articles","previous_headings":"","what":"A code list from “Dementia” (4182210) and its descendants","title":"Introduction to CodelistGenerator","text":"simplest approach identifying potential codes take high-level code include descendants. looks pick relevant codes. , approach misses codes descendant 4182210. example, codes “Wandering due dementia” (37312577; https://athena.ohdsi.org/search-terms/terms/37312577) “Anxiety due dementia” (37312031; https://athena.ohdsi.org/search-terms/terms/37312031) picked .","code":"codesFromDescendants <- tbl(   db,   sql(paste0(     \"SELECT * FROM \",     vocabularyDatabaseSchema,     \".concept_ancestor\"   )) ) %>%   filter(ancestor_concept_id == \"4182210\") %>%   select(\"descendant_concept_id\") %>%   rename(\"concept_id\" = \"descendant_concept_id\") %>%   left_join(tbl(db, sql(paste0(     \"SELECT * FROM \",     vocabularyDatabaseSchema,     \".concept\"   )))) %>%   select(     \"concept_id\", \"concept_name\",     \"domain_id\", \"vocabulary_id\"   ) %>%   collect() codesFromDescendants %>%    glimpse() #> Rows: 151 #> Columns: 4 #> $ concept_id    <int> 35610098, 4043241, 4139421, 37116466, 4046089, 44782559,… #> $ concept_name  <chr> \"Predominantly cortical dementia\", \"Familial Alzheimer's… #> $ domain_id     <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"Con… #> $ vocabulary_id <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOME…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"generating-a-candidate-code-list-using-codelistgenerator","dir":"Articles","previous_headings":"","what":"Generating a candidate code list using CodelistGenerator","title":"Introduction to CodelistGenerator","text":"try include terms included can use CodelistGenerator. First, let’s simple search single keyword “dementia”, including descendants identified codes.","code":"dementiaCodes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"dementia\",   domains = \"Condition\",   includeDescendants = TRUE ) dementiaCodes1%>%    glimpse() #> Rows: 187 #> Columns: 6 #> $ concept_id       <int> 374326, 374888, 375791, 376085, 376094, 376095, 37694… #> $ found_from       <chr> \"From initial search\", \"From initial search\", \"From i… #> $ concept_name     <chr> \"Arteriosclerotic dementia with depression\", \"Dementi… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"… #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SN… #> $ standard_concept <chr> \"standard\", \"standard\", \"standard\", \"standard\", \"stan…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"comparing-code-lists","dir":"Articles","previous_headings":"","what":"Comparing code lists","title":"Introduction to CodelistGenerator","text":"difference code list one 4182210 descendants? extra codes picked CodelistGenerator?","code":"codeComparison <- compareCodelists(   codesFromDescendants,   dementiaCodes1 ) codeComparison %>%   group_by(codelist) %>%   tally() #> # A tibble: 2 × 2 #>   codelist            n #>   <chr>           <int> #> 1 Both              151 #> 2 Only codelist 2    36 codeComparison %>%   filter(codelist == \"Only codelist 2\") %>%    glimpse() #> Rows: 36 #> Columns: 3 #> $ concept_id   <int> 4041685, 4043378, 4044415, 4046091, 4092747, 4187091, 425… #> $ concept_name <chr> \"Amyotrophic lateral sclerosis with dementia\", \"Frontotem… #> $ codelist     <chr> \"Only codelist 2\", \"Only codelist 2\", \"Only codelist 2\", …"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"review-mappings-from-non-standard-vocabularies","dir":"Articles","previous_headings":"","what":"Review mappings from non-standard vocabularies","title":"Introduction to CodelistGenerator","text":"Perhaps want see ICD10CM codes map candidate code list. can get running","code":"icdMappings <- getMappings(   cdm = cdm,   candidateCodelist = dementiaCodes1,   nonStandardVocabularies = \"ICD10CM\" ) icdMappings %>%    glimpse() #> Rows: 191 #> Columns: 7 #> $ standard_concept_id        <int> 372610, 374341, 374888, 374888, 374888, 374… #> $ standard_concept_name      <chr> \"Postconcussion syndrome\", \"Huntington's ch… #> $ standard_vocabulary_id     <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SN… #> $ non_standard_concept_id    <int> 45571706, 35207314, 1568088, 1568089, 37402… #> $ non_standard_concept_name  <chr> \"Postconcussional syndrome\", \"Huntington's … #> $ non_standard_concept_code  <chr> \"F07.81\", \"G10\", \"F02\", \"F02.8\", \"F02.811\",… #> $ non_standard_vocabulary_id <chr> \"ICD10CM\", \"ICD10CM\", \"ICD10CM\", \"ICD10CM\",… readMappings <- getMappings(   cdm = cdm,   candidateCodelist = dementiaCodes1,   nonStandardVocabularies = \"Read\" ) readMappings %>%    glimpse() #> Rows: 93 #> Columns: 7 #> $ standard_concept_id        <int> 372610, 372610, 372610, 372610, 372610, 372… #> $ standard_concept_name      <chr> \"Postconcussion syndrome\", \"Postconcussion … #> $ standard_vocabulary_id     <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SN… #> $ non_standard_concept_id    <int> 45446542, 45446553, 45453190, 45459905, 455… #> $ non_standard_concept_name  <chr> \"Post-concussion syndrome\", \"[X]Post-trauma… #> $ non_standard_concept_code  <chr> \"E2A2.00\", \"Eu06212\", \"E2A2.11\", \"E2A2.12\",… #> $ non_standard_vocabulary_id <chr> \"READ\", \"READ\", \"READ\", \"READ\", \"READ\", \"RE…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"creating-a-codelist-for-osteoarthritis","dir":"Articles","previous_headings":"","what":"Creating a codelist for osteoarthritis","title":"CodelistGenerator search options: codes for osteoarthritis","text":"example going generate candidate codelist osteoarthritis, looking impact alternative search strategies.","code":"library(DBI) library(RPostgres) # postgres database connection details serverDbi <- Sys.getenv(\"server\") user <- Sys.getenv(\"user\") password <- Sys.getenv(\"password\") port <- Sys.getenv(\"port\") host <- Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),   dbname = serverDbi,   port = port,   host = host,   user = user,   password = password )  # name of vocabulary schema vocabularyDatabaseSchema <- \"vocabulary\"  # create cdm reference cdm <- CDMConnector::cdm_from_con(   con = db,   cdm_schema = vocabularyDatabaseSchema )"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"condition-domain-without-searching-synonyms-with-exclusions-without-including-descendants-or-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Condition domain, without searching synonyms, with exclusions, without including descendants or ancestor","title":"CodelistGenerator search options: codes for osteoarthritis","text":"start search “osteoarthritis”, excluding “post-infection” “post-traumatic”, without searching synonyms, without searching via non-standard codes, without including descendants direct ancestor included concepts. candidate codelist?","code":"oaCodes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) oaCodes1 %>%    glimpse() #> Rows: 151 #> Columns: 6 #> $ concept_id       <int> 72993, 73840, 75036, 77631, 78505, 79904, 80180, 8018… #> $ found_from       <chr> \"From initial search\", \"From initial search\", \"From i… #> $ concept_name     <chr> \"Localized, primary osteoarthritis\", \"Localized, prim… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"… #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SN… #> $ standard_concept <chr> \"standard\", \"standard\", \"standard\", \"standard\", \"stan…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"including-descendants","dir":"Articles","previous_headings":"Search strategies","what":"Including descendants","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now also include descendants included concepts. new codes pick ?","code":"oaCodes2 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = TRUE,   includeAncestor = FALSE ) newCodes1To2 <- compareCodelists(oaCodes1, oaCodes2) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  newCodes1To2 %>%    glimpse() #> Rows: 262 #> Columns: 2 #> $ concept_id   <int> 72401, 72405, 72709, 72990, 73287, 73550, 73554, 74132, 7… #> $ concept_name <chr> \"Kashin-Bek disease\", \"Degenerative joint disease of shou…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"including-observation-domain","dir":"Articles","previous_headings":"Search strategies","what":"Including observation domain","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now search observation domain well condition domain. new codes pick ?","code":"oaCodes3 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = c(\"Condition\", \"Observation\"),   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To3 <- compareCodelists(oaCodes1, oaCodes3) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  newCodes1To3 %>%    glimpse() #> Rows: 18 #> Columns: 2 #> $ concept_id   <int> 1988221, 1988793, 2101879, 2102817, 2108437, 2617599, 261… #> $ concept_name <chr> \"Knee injury and osteoarthritis outcome score - physical …"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"search-synonyms","dir":"Articles","previous_headings":"Search strategies","what":"Search synonyms","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oaCodes4 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = TRUE,   searchNonStandard = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To4 <- compareCodelists(oaCodes1, oaCodes4) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  newCodes1To4 %>%    glimpse() #> Rows: 20 #> Columns: 2 #> $ concept_id   <int> 72405, 75617, 78227, 80494, 80809, 4143463, 4153359, 4183… #> $ concept_name <chr> \"Degenerative joint disease of shoulder region\", \"Degener…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"search-via-non-standard","dir":"Articles","previous_headings":"Search strategies","what":"Search via non-standard","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oaCodes5 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchNonStandard = TRUE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To5 <- compareCodelists(oaCodes1, oaCodes5) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  newCodes1To5 %>%    glimpse() #> Rows: 0 #> Columns: 2 #> $ concept_id   <int>  #> $ concept_name <chr>"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"include-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Include ancestor","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now include direct ancestor included terms. new codes pick ?","code":"oaCodes8 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = TRUE ) newCodes1To8 <- compareCodelists(oaCodes1, oaCodes8) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  newCodes1To8 %>%    glimpse() #> Rows: 99 #> Columns: 2 #> $ concept_id   <int> 72405, 73553, 75620, 75897, 76777, 78227, 80494, 81937, 4… #> $ concept_name <chr> \"Degenerative joint disease of shoulder region\", \"Arthrop…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"mock-vocabulary-database","dir":"Articles","previous_headings":"","what":"Mock vocabulary database","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"Let´s say mock vocabulary database hypothetical concepts relationships.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-for-exact-keyword-match","dir":"Articles","previous_headings":"","what":"Search for exact keyword match","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"find “Musculoskeletal disorder” can search like Note, also identify based partial match","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   includeDescendants = FALSE, ) #> Limiting to domains of interest #> Getting concepts to include #> Search completed. Finishing up. #> ✔ 1 candidate concept identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <int> 1 #> $ found_from       <chr> \"From initial search\" #> $ concept_name     <chr> \"Musculoskeletal disorder\" #> $ domain_id        <chr> \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\" #> $ standard_concept <chr> \"S\" codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal\",   domains = \"Condition\",   includeDescendants = FALSE ) #> Limiting to domains of interest #> Getting concepts to include #> Search completed. Finishing up. #> ✔ 1 candidate concept identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <int> 1 #> $ found_from       <chr> \"From initial search\" #> $ concept_name     <chr> \"Musculoskeletal disorder\" #> $ domain_id        <chr> \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\" #> $ standard_concept <chr> \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"add-descendants","dir":"Articles","previous_headings":"","what":"Add descendants","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"include descendants identified code, can set includeDescendants TRUE","code":"getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   includeDescendants = TRUE ) %>%    glimpse() #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 5 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds #> Rows: 5 #> Columns: 6 #> $ concept_id       <int> 1, 2, 3, 4, 5 #> $ found_from       <chr> \"From initial search\", \"From descendants\", \"From desc… #> $ concept_name     <chr> \"Musculoskeletal disorder\", \"Osteoarthrosis\", \"Arthri… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"… #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\", \"S\", \"S\", \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"multiple-search-terms","dir":"Articles","previous_headings":"","what":"Multiple search terms","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also search multiple keywords time, picked following search","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = c(     \"Musculoskeletal disorder\",     \"arthritis\",     \"arthrosis\"   ),   domains = \"Condition\",   includeDescendants = FALSE ) #> Limiting to domains of interest #> Getting concepts to include #> Search completed. Finishing up. #> ✔ 5 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 5 #> Columns: 6 #> $ concept_id       <int> 1, 3, 4, 5, 2 #> $ found_from       <chr> \"From initial search\", \"From initial search\", \"From i… #> $ concept_name     <chr> \"Musculoskeletal disorder\", \"Arthritis\", \"Osteoarthri… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"… #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\", \"S\", \"S\", \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"add-ancestor","dir":"Articles","previous_headings":"","what":"Add ancestor","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"include ancestors one level identified concepts can set includeAncestor TRUE","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Osteoarthritis of knee\",   includeAncestor = TRUE,   domains = \"Condition\" ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Adding ancestor #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 2 #> Columns: 6 #> $ concept_id       <int> 4, 3 #> $ found_from       <chr> \"From initial search\", \"From ancestor\" #> $ concept_name     <chr> \"Osteoarthritis of knee\", \"Arthritis\" #> $ domain_id        <chr> \"Condition\", \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"searches-with-multiple-words","dir":"Articles","previous_headings":"","what":"Searches with multiple words","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also find concepts multiple words even different order. example, search “Knee osteoarthritis” pick “Osteoarthritis knee”.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Knee osteoarthritis\",   domains = \"Condition\",   includeDescendants = TRUE ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 1 candidate concept identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <int> 4 #> $ found_from       <chr> \"From initial search\" #> $ concept_name     <chr> \"Osteoarthritis of knee\" #> $ domain_id        <chr> \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\" #> $ standard_concept <chr> \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"with-exclusions","dir":"Articles","previous_headings":"","what":"With exclusions","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also exclude specific terms","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"arthritis\",   exclude = \"Hip osteoarthritis\",   domains = \"Condition\" ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 2 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 2 #> Columns: 6 #> $ concept_id       <int> 3, 4 #> $ found_from       <chr> \"From initial search\", \"From initial search\" #> $ concept_name     <chr> \"Arthritis\", \"Osteoarthritis of knee\" #> $ domain_id        <chr> \"Condition\", \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-using-synonyms","dir":"Articles","previous_headings":"","what":"Search using synonyms","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also pick codes based synonyms. case “Arthritis” synonym “Osteoarthrosis” search primary name concept associated synonyms pick synonym included.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthrosis\",   domains = \"Condition\",   searchInSynonyms = TRUE ) #> Limiting to domains of interest #> Getting concepts to include #> Adding concepts using synonymns #> Adding descendants #> Search completed. Finishing up. #> ✔ 4 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 4 #> Columns: 6 #> $ concept_id       <int> 2, 3, 4, 5 #> $ found_from       <chr> \"From initial search\", \"In synonyms\", \"From descendan… #> $ concept_name     <chr> \"Osteoarthrosis\", \"Arthritis\", \"Osteoarthritis of kne… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\", \"S\", \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-via-non-standard","dir":"Articles","previous_headings":"","what":"Search via non-standard","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"also picked “Osteoarthrosis” searching via non-standard.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = c(\"arthritis\", \"arthropathy\"),   domains = \"Condition\",   searchNonStandard = TRUE ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Adding codes from non-standard #> Search completed. Finishing up. #> ✔ 4 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 4 #> Columns: 6 #> $ concept_id       <int> 3, 4, 5, 2 #> $ found_from       <chr> \"From initial search\", \"From initial search\", \"From i… #> $ concept_name     <chr> \"Arthritis\", \"Osteoarthritis of knee\", \"Osteoarthriti… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\", \"S\", \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-for-both-standard-and-non-standard-concepts","dir":"Articles","previous_headings":"","what":"Search for both standard and non-standard concepts","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also include non-standard codes results like ","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = c(     \"Musculoskeletal disorder\",     \"arthritis\",     \"arthropathy\",     \"arthrosis\"   ),   domains = \"Condition\",   standardConcept = c(\"Standard\", \"Non-standard\") ) #> Limiting to domains of interest #> Getting concepts to include #> Adding descendants #> Search completed. Finishing up. #> ✔ 8 candidate concepts identified #>  #> Time taken: 0 minutes and 0 seconds  codes %>%    glimpse() #> Rows: 8 #> Columns: 6 #> $ concept_id       <int> 1, 3, 4, 5, 8, 17, 7, 2 #> $ found_from       <chr> \"From initial search\", \"From initial search\", \"From i… #> $ concept_name     <chr> \"Musculoskeletal disorder\", \"Arthritis\", \"Osteoarthri… #> $ domain_id        <chr> \"Condition\", \"Condition\", \"Condition\", \"Condition\", \"… #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\", \"SNOMED\", \"SNOMED\", \"Read\", \"ICD1… #> $ standard_concept <chr> \"S\", \"S\", \"S\", \"S\", NA, NA, NA, \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_Vocab_based_codelists.html","id":"medication-codelists-based-on-drug-ingredients","dir":"Articles","previous_headings":"","what":"Medication codelists based on drug ingredients","title":"Generating vocabulary based codelists","text":"function getDrugIngredientCodes() can used generate medication codelists based around ingredient codes. , example, create codelist using ingredient codes acetaminophen. ´ll using Eunomia example data. default function return codelist. Eunomia contains subset OMOP CDM vocabularies see codes returned, get many working full set vocabularies. Alternatively, instead returning codelist instead get back tibble contains additional information conept names domains setting withConceptDetails TRUE Instead getting back concepts acetaminophen, require concepts associated acetaminophen least one drug ingredient (.e. combination therapies) returned. instead return concepts associated acetaminophen drug ingredient. Lastly, also restrict particular dose form. Let’s try see injection dose form acetaminophen. case see Eunomia concept acetaminophen injection dose form. previous examples focused single drug ingredient. can though specify multiple ingredients, case get codelist back . don´t specify ingredient, ´ll get codelist every drug ingredient vocabularies.","code":"acetaminophen_codes <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\" )  acetaminophen_codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 161_acetaminophen (7 codes) acetaminophen_codes$acetaminophen #> NULL acetaminophen_codes_with_details <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   withConceptDetails = TRUE )  acetaminophen_codes_with_details$acetaminophen |>    glimpse() #>  NULL acetaminophen_two_or_more_ingredients <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   ingredientRange = c(2,Inf),   withConceptDetails = TRUE )  acetaminophen_two_or_more_ingredients$acetaminophen |>    glimpse() #>  NULL acetaminophen_one_ingredient <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   ingredientRange = c(1,1),   withConceptDetails = TRUE )  acetaminophen_one_ingredient$acetaminophen |>    glimpse() #>  NULL acetaminophen_injections <- getDrugIngredientCodes(   cdm = cdm,   name = \"acetaminophen\",   doseForm = \"injection\",   withConceptDetails = TRUE ) #> Warning: No descendant codes found  acetaminophen_injections$acetaminophen |>    glimpse() #>  NULL acetaminophen_heparin_codes <- getDrugIngredientCodes(   cdm = cdm,   name = c(\"acetaminophen\", \"heparin\")   )  acetaminophen_heparin_codes #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - 161_acetaminophen (7 codes) #> - 5224_heparin (1 codes) acetaminophen_heparin_codes$acetaminophen #> NULL acetaminophen_heparin_codes$heparin  #> NULL ingredient_codes <- getDrugIngredientCodes(cdm = cdm) ingredient_codes #>  #> ── 91 codelists ──────────────────────────────────────────────────────────────── #>  #> - 26225_ondansetron (2 codes) #> - 6754_meperidine (2 codes) #> - 28889_loratadine (3 codes) #> - 7052_morphine (2 codes) #> - 1191_aspirin (2 codes) #> - 7258_naproxen (3 codes) #> - 140587_celecoxib (1 codes) #> - 3289_dextromethorphan (2 codes) #> - 3355_diclofenac (1 codes) #> - 7804_oxycodone (2 codes) #> along with 81 more codelists"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_Vocab_based_codelists.html","id":"medication-codelists-based-on-atc-classifications","dir":"Articles","previous_headings":"","what":"Medication codelists based on ATC classifications","title":"Generating vocabulary based codelists","text":"Analogous getDrugIngredientCodes(), getATCCodes() can used generate codelist based particular ATC class. show , ´ll use mock vocabulary CodelistGenerator. example, produce ATC level 1 codelist based Alimentary Tract Metabolism Drugs.","code":"cdm_mock <- mockVocabRef() atc_codelist <- getATCCodes(   cdm = cdm_mock,   level = \"ATC 1st\",   name = \"alimentary tract and metabolism\" )  atc_codelist #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 1234_alimentary_tract_and_metabolism (2 codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_Vocab_based_codelists.html","id":"condition-codelists-using-icd10-chapters-and-subchapters","dir":"Articles","previous_headings":"","what":"Condition Codelists using ICD10 chapters and subchapters","title":"Generating vocabulary based codelists","text":"can use getICD10StandardCodes() generate condition codes based ICD10 chapters subchapters. ICD10 non-standard vocabulary OMOP CDM function returns standard concepts associated ICD10 chapters subchapters directly via mapping indirectly descendant concept code mapped . important note getICD10StandardCodes() return results ICD codes included vocabulary tables. example, try generate codelist arthropathies. functions, return concepts details rather codelist.","code":"arthropathy_codes <- getICD10StandardCodes(   cdm = cdm_mock,   name = \"arthropathies\" ) arthropathy_codes #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 1234_arthropathies (3 codes) arthropathy_codes$arthropathies #> NULL arthropathy_codes <- getICD10StandardCodes(   cdm = cdm_mock,   name = \"arthropathies\",    withConceptDetails = TRUE ) arthropathy_codes #> $`1234_arthropathies` #> # A tibble: 3 × 6 #>   name              concept_id concept_name domain_id vocabulary_id concept_code #>   <chr>                  <int> <chr>        <chr>     <chr>         <chr>        #> 1 1234_arthropathi…          3 Arthritis    Condition SNOMED        1234         #> 2 1234_arthropathi…          4 Osteoarthri… Condition SNOMED        1234         #> 3 1234_arthropathi…          5 Osteoarthri… Condition SNOMED        1234 arthropathy_codes$arthropathies #> NULL"},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer. Marti Catala. Contributor. Xihang Chen. Contributor. Mike Du. Contributor. Danielle Newby. Contributor.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E (2024). CodelistGenerator: Identify Relevant Clinical Codes Evaluate Use. R package version 3.0.0.900, https://darwin-eu.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use},   author = {Edward Burn},   year = {2024},   note = {R package version 3.0.0.900},   url = {https://darwin-eu.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"can install CodelistGenerator CRAN can also install development version CodelistGenerator","code":"install.packages(\"CodelistGenerator\") install.packages(\"remotes\") remotes::install_github(\"darwin-eu/CodelistGenerator\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"example ’ll use Eunomia dataset (contains subset OMOP CDM vocabularies)","code":"library(dplyr) library(CDMConnector) library(CodelistGenerator) db <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomia_dir()) cdm <- cdm_from_con(db, cdm_schema = \"main\", write_schema = c(prefix = \"cg_\", schema = \"main\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"exploring-the-omop-cdm-vocabulary-tables","dir":"","previous_headings":"","what":"Exploring the OMOP CDM Vocabulary tables","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"OMOP CDM vocabularies frequently updated, can identify version vocabulary Eunomia data CodelistGenerator provides various functions explore vocabulary tables. example, can see different concept classes standard concepts used drugs","code":"getVocabVersion(cdm = cdm) #> [1] \"v5.0 18-JAN-19\" getConceptClassId(cdm,                   standardConcept = \"Standard\",                   domain = \"Drug\") #> [1] \"Ingredient\"          \"Quant Clinical Drug\" \"Branded Drug\"        #> [4] \"Quant Branded Drug\"  \"Clinical Drug Comp\"  \"Branded Drug Comp\"   #> [7] \"CVX\"                 \"Clinical Drug\"       \"Branded Pack\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"vocabulary-based-codelists-using-codelistgenerator","dir":"","previous_headings":"","what":"Vocabulary based codelists using CodelistGenerator","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"CodelistGenerator provides functions extract code lists based vocabulary hierarchies. One example `getDrugIngredientCodes, can use, example, get concept IDs used represent aspirin. also want details concept IDs can get like . want codelists drug ingredients can simply omit name argument ingredients returned.","code":"getDrugIngredientCodes(cdm = cdm, name = \"aspirin\") #>  #> - aspirin (2 codes) getDrugIngredientCodes(cdm = cdm, name = \"aspirin\", withConceptDetails = TRUE) #> $aspirin #> # A tibble: 2 × 4 #>   concept_id concept_name              domain_id vocabulary_id #>        <int> <chr>                     <chr>     <chr>         #> 1   19059056 Aspirin 81 MG Oral Tablet Drug      RxNorm        #> 2    1112807 Aspirin                   Drug      RxNorm ing <- getDrugIngredientCodes(cdm = cdm) ing$aspirin #> [1] 19059056  1112807 ing$diclofenac #> [1] 1124300 ing$celecoxib #> [1] 1118084"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"systematic-search-using-codelistgenerator","dir":"","previous_headings":"","what":"Systematic search using CodelistGenerator","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"CodelistGenerator can also support systematic searches vocabulary tables support codelist development. little like process systematic review, idea specified search strategy, CodelistGenerator identify set concepts may relevant, screened remove irrelevant codes clinical experts. can simple search asthma perhaps want exclude certain concepts part search strategy, case can add like can compare two code lists like can also see non-standard codes mapped , example can see non-standard ICD10 code maps standard snowmed code gastrointestinal hemorrhage returned search","code":"asthma_codes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"asthma\",   domains = \"Condition\" )  asthma_codes1 %>%    glimpse() #> Rows: 2 #> Columns: 6 #> $ concept_id       <int> 4051466, 317009 #> $ found_from       <chr> \"From initial search\", \"From initial search\" #> $ concept_name     <chr> \"Childhood asthma\", \"Asthma\" #> $ domain_id        <chr> \"Condition\", \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\", \"SNOMED\" #> $ standard_concept <chr> \"S\", \"S\" asthma_codes2 <- getCandidateCodes(   cdm = cdm,   keywords = \"asthma\",   exclude = \"childhood\",   domains = \"Condition\" )  asthma_codes2 %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <int> 317009 #> $ found_from       <chr> \"From initial search\" #> $ concept_name     <chr> \"Asthma\" #> $ domain_id        <chr> \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\" #> $ standard_concept <chr> \"S\" compareCodelists(asthma_codes1, asthma_codes2) #> # A tibble: 2 × 3 #>   concept_id concept_name     codelist        #>        <int> <chr>            <chr>           #> 1    4051466 Childhood asthma Only codelist 1 #> 2     317009 Asthma           Both Gastrointestinal_hemorrhage <- getCandidateCodes(   cdm = cdm,   keywords = \"Gastrointestinal hemorrhage\",   domains = \"Condition\" ) Gastrointestinal_hemorrhage %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <int> 192671 #> $ found_from       <chr> \"From initial search\" #> $ concept_name     <chr> \"Gastrointestinal hemorrhage\" #> $ domain_id        <chr> \"Condition\" #> $ vocabulary_id    <chr> \"SNOMED\" #> $ standard_concept <chr> \"S\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"summarising-code-use","dir":"","previous_headings":"","what":"Summarising code use","title":"Identify Relevant Clinical Codes and Evaluate Their Use","text":"","code":"summariseCodeUse(list(\"asthma\" = asthma_codes1$concept_id),                    cdm = cdm) %>%    glimpse() #> Rows: 6 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"Synthea synthetic health database\", \"Synthea synthet… #> $ group_name       <chr> \"codelist_name\", \"codelist_name\", \"codelist_name\", \"c… #> $ group_level      <chr> \"asthma\", \"asthma\", \"asthma\", \"asthma\", \"asthma\", \"as… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"overall\", \"Childhood asthma\", \"Asthma\", \"overall\", \"… #> $ variable_level   <chr> NA, \"4051466\", \"317009\", NA, \"4051466\", \"317009\" #> $ estimate_name    <chr> \"record_count\", \"record_count\", \"record_count\", \"pers… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"101\", \"96\", \"5\", \"101\", \"96\", \"5\" #> $ additional_name  <chr> \"overall\", \"source_concept_name &&& source_concept_id… #> $ additional_level <chr> \"overall\", \"Childhood asthma &&& 4051466 &&& conditio…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/CodelistGenerator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use — CodelistGenerator-package","title":"CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use — CodelistGenerator-package","text":"Generate candidate code list Observational Medical Outcomes Partnership (OMOP) common data model based string matching. given search strategy, candidate code list returned.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/CodelistGenerator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CodelistGenerator: Identify Relevant Clinical Codes and Evaluate Their Use — CodelistGenerator-package","text":"Maintainer: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) contributors: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) [contributor] Xihang  Chen xihang.chen@ndorms.ox.ac.uk (ORCID) [contributor] Mike Du mike.du@ndorms.ox.ac.uk (ORCID) [contributor] Danielle Newby danielle.newby@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concept ids from a provided path to cohort json files — codesFromCohort","title":"Get concept ids from a provided path to cohort json files — codesFromCohort","text":"Get concept ids provided path cohort json files","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concept ids from a provided path to cohort json files — codesFromCohort","text":"","code":"codesFromCohort(path, cdm, withConceptDetails = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concept ids from a provided path to cohort json files — codesFromCohort","text":"path Path file folder containing JSONs cohort definitions cdm cdm reference created CDMConnector withConceptDetails FALSE vector concept IDs returned concept set. TRUE tibble returned additional information identified concepts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concept ids from a provided path to cohort json files — codesFromCohort","text":"Named list concept_ids concept set","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get concept ids from a provided path to json files — codesFromConceptSet","title":"Get concept ids from a provided path to json files — codesFromConceptSet","text":"Get concept ids provided path json files","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get concept ids from a provided path to json files — codesFromConceptSet","text":"","code":"codesFromConceptSet(path, cdm, withConceptDetails = FALSE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get concept ids from a provided path to json files — codesFromConceptSet","text":"path Path file folder containing JSONs concept sets cdm cdm reference created CDMConnector withConceptDetails FALSE vector concept IDs returned concept set. TRUE tibble returned additional information identified concepts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get concept ids from a provided path to json files — codesFromConceptSet","text":"Named list concept_ids concept set","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get concept ids from a provided path to json files — codesFromConceptSet","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") x <- codesFromConceptSet(cdm = cdm,                          path =  system.file(package = \"CodelistGenerator\",                          \"concepts_for_mock\")) x CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Use achilles counts to get codes used in the database — codesInUse","title":"Use achilles counts to get codes used in the database — codesInUse","text":"Use achilles counts get codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use achilles counts to get codes used in the database — codesInUse","text":"","code":"codesInUse(   cdm,   minimumCount = 0,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use achilles counts to get codes used in the database — codesInUse","text":"cdm cdm_reference via CDMConnector minimumCount codes frequency removed. table cdm table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use achilles counts to get codes used in the database — codesInUse","text":"list integers indicating codes used database.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/codesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use achilles counts to get codes used in the database — codesInUse","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") x <- codesInUse(cdm = cdm) x CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two codelists — compareCodelists","title":"Compare two codelists — compareCodelists","text":"Compare two codelists","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two codelists — compareCodelists","text":"","code":"compareCodelists(codelist1, codelist2)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two codelists — compareCodelists","text":"codelist1 Output getCandidateCodes codelist2 Output getCandidateCodes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two codelists — compareCodelists","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two codelists — compareCodelists","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() codes1 <- getCandidateCodes(  cdm = cdm,  keywords = \"Arthritis\",  domains = \"Condition\",  includeDescendants = TRUE ) codes2 <- getCandidateCodes(  cdm = cdm,  keywords = c(\"knee osteoarthritis\", \"arthrosis\"),  domains = \"Condition\",  includeDescendants = TRUE ) compareCodelists(  codelist1 = codes1,  codelist2 = codes2 ) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseFormToRoute.html","id":null,"dir":"Reference","previous_headings":"","what":"Equivalence from dose from concept IDs to route categories. — doseFormToRoute","title":"Equivalence from dose from concept IDs to route categories. — doseFormToRoute","text":"Equivalence dose concept IDs route categories.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseFormToRoute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equivalence from dose from concept IDs to route categories. — doseFormToRoute","text":"","code":"doseFormToRoute"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/doseFormToRoute.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Equivalence from dose from concept IDs to route categories. — doseFormToRoute","text":"data frame two variables: dose_form_concept_id route_category.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant codes for ATC levels — getATCCodes","title":"Get descendant codes for ATC levels — getATCCodes","text":"Get descendant codes ATC levels","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant codes for ATC levels — getATCCodes","text":"","code":"getATCCodes(   cdm,   level = c(\"ATC 1st\"),   name = NULL,   doseForm = NULL,   routeCategory = NULL,   withConceptDetails = FALSE )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant codes for ATC levels — getATCCodes","text":"cdm cdm_reference via CDMConnector level ATC level. Can one \"ATC 1st\", \"ATC 2nd\", \"ATC 3rd\", \"ATC 4th\", \"ATC 5th\" name ATC name interest. example, c(\"Dermatologicals\", \"Nervous System\"), result list length two descendant concepts two particular ATC groups. doseForm descendants codes specified dose form returned. NULL, descendant codes returned regardless dose form. routeCategory descendants codes specified route returned. NULL, descendant codes returned regardless dose form. withConceptDetails FALSE, item list results (one per ATC group) contain vector concept IDs ingredient. TRUE item list results contain tibble additional information identified concepts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant codes for ATC levels — getATCCodes","text":"named list, item containing vector descendant concepts ATC group (withConceptDetails set FALSE) tibble descendant concepts along additional details (withConceptDetails set TRUE). Names start concept code followed concept name.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant codes for ATC levels — getATCCodes","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getATCCodes(cdm = cdm, level = \"ATC 1st\") CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"","code":"getCandidateCodes(   cdm,   keywords,   exclude = NULL,   domains = \"Condition\",   standardConcept = \"Standard\",   searchInSynonyms = FALSE,   searchNonStandard = FALSE,   includeDescendants = TRUE,   includeAncestor = FALSE )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"cdm cdm_reference via CDMConnector keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. exclude Character vector words identify concepts exclude. domains Character vector one OMOP CDM domain. standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. searchInSynonyms Either TRUE FALSE. TRUE code also search using primary name concept table synonyms concept synonym table. searchNonStandard Either TRUE FALSE. TRUE code also search via non-standard concepts. includeDescendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. includeAncestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- CodelistGenerator::mockVocabRef() CodelistGenerator::getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\"  ) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":null,"dir":"Reference","previous_headings":"","what":"getConceptClassId — getConceptClassId","title":"getConceptClassId — getConceptClassId","text":"getConceptClassId","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getConceptClassId — getConceptClassId","text":"","code":"getConceptClassId(cdm, standardConcept = \"Standard\", domain = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getConceptClassId — getConceptClassId","text":"cdm cdm_reference via CDMConnector standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. domain Vocabulary domain","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getConceptClassId — getConceptClassId","text":"concept class used given set domains","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getConceptClassId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getConceptClassId — getConceptClassId","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getConceptClassId(cdm = cdm, domain = \"drug\") CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":null,"dir":"Reference","previous_headings":"","what":"getDescendants — getDescendants","title":"getDescendants — getDescendants","text":"getDescendants","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDescendants — getDescendants","text":"","code":"getDescendants(   cdm,   conceptId,   withAncestor = FALSE,   ingredientRange = c(0, Inf),   doseForm = NULL )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDescendants — getDescendants","text":"cdm cdm_reference via CDMConnector conceptId concpet_id search withAncestor TRUE, return column ancestor. case multiple ancestors, concepts separated \";\" ingredientRange Used restrict descendant codes associated specific number drug ingredients. Must vector length two first element minimum number ingredients allowed second maximum. value c(2, 2) restrict concepts associated two ingredients. doseForm descendants codes specified drug dose form returned. NULL, descendant codes returned regardless dose form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDescendants — getDescendants","text":"descendants given concept id","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDescendants — getDescendants","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getDescendants(cdm = cdm, conceptId = 1) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":null,"dir":"Reference","previous_headings":"","what":"getDomains — getDomains","title":"getDomains — getDomains","text":"getDomains","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDomains — getDomains","text":"","code":"getDomains(cdm, standardConcept = \"Standard\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDomains — getDomains","text":"cdm cdm_reference via CDMConnector standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDomains — getDomains","text":"domains cdm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDomains — getDomains","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getDomains(cdm = cdm) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":null,"dir":"Reference","previous_headings":"","what":"getDoseForm — getDoseForm","title":"getDoseForm — getDoseForm","text":"getDoseForm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDoseForm — getDoseForm","text":"","code":"getDoseForm(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDoseForm — getDoseForm","text":"cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDoseForm — getDoseForm","text":"dose forms available drug concepts","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDoseForm — getDoseForm","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getDoseForm(cdm = cdm) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant codes for drug ingredients — getDrugIngredientCodes","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"Get descendant codes drug ingredients","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"","code":"getDrugIngredientCodes(   cdm,   name = NULL,   doseForm = NULL,   routeCategory = NULL,   ingredientRange = c(1, Inf),   withConceptDetails = FALSE )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"cdm cdm_reference via CDMConnector name Names ingredients interest. example, c(\"acetaminophen\", \"codeine\"), result list length two descendant concepts two particular drug ingredients. doseForm descendants codes specified dose form returned. NULL, descendant codes returned regardless dose form. routeCategory descendants codes specified route returned. NULL, descendant codes returned regardless dose form. ingredientRange Used restrict descendant codes associated specific number ingredients. Must vector length two first element minimum number ingredients allowed second maximum. value c(2, 2) restrict concepts associated two ingredients. withConceptDetails FALSE, item list results (one per ingredient) contain vector concept IDs ingredient. TRUE item list results contain tibble additional information identified concepts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"named list, item containing vector descendant concepts ingredient (withConceptDetails set FALSE) tibble descendant concepts along additional details (withConceptDetails set TRUE).Names start concept code followed concept name.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getDrugIngredientCodes(cdm = cdm, name = \"Adalimumab\") CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get corresponding standard codes for ICD-10 chapters and sub-chapters — getICD10StandardCodes","title":"Get corresponding standard codes for ICD-10 chapters and sub-chapters — getICD10StandardCodes","text":"Get corresponding standard codes ICD-10 chapters sub-chapters","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get corresponding standard codes for ICD-10 chapters and sub-chapters — getICD10StandardCodes","text":"","code":"getICD10StandardCodes(   cdm,   level = c(\"ICD10 Chapter\", \"ICD10 SubChapter\"),   name = NULL,   includeDescendants = TRUE,   withConceptDetails = FALSE )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get corresponding standard codes for ICD-10 chapters and sub-chapters — getICD10StandardCodes","text":"cdm cdm_reference via CDMConnector level Can either \"ICD10 Chapter\" \"ICD10 SubChapter\" name Name chapter sub-chapter interest. NULL, considered. includeDescendants FALSE direct mappings ICD-10 codes standard codes returned. TRUE descendants standard concepts also included. withConceptDetails FALSE vector concept IDs returned ICD group TRUE tibble returned additional information identified concepts.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get corresponding standard codes for ICD-10 chapters and sub-chapters — getICD10StandardCodes","text":"named list, element containing corresponding standard codes (descendants) ICD chapters sub-chapters","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getICD10StandardCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get corresponding standard codes for ICD-10 chapters and sub-chapters — getICD10StandardCodes","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getICD10StandardCodes(cdm = cdm, level = c(   \"ICD10 Chapter\",   \"ICD10 SubChapter\" )) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from non-standard vocabularies to standard — getMappings","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"Show mappings non-standard vocabularies standard","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"","code":"getMappings(   candidateCodelist,   cdm = NULL,   nonStandardVocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\",     \"LOINC\", \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"candidateCodelist Dataframe cdm cdm_reference via CDMConnector::cdm_from_con() nonStandardVocabularies Character vector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- CodelistGenerator::mockVocabRef() codes <- CodelistGenerator::getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\" ) CodelistGenerator::getMappings(   cdm = cdm,   candidateCodelist = codes,   nonStandardVocabularies = \"READ\" ) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get relationship ID values from the concept relationship table — getRelationshipId","title":"Get relationship ID values from the concept relationship table — getRelationshipId","text":"Get relationship ID values concept relationship table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get relationship ID values from the concept relationship table — getRelationshipId","text":"","code":"getRelationshipId(   cdm,   standardConcept1 = \"standard\",   standardConcept2 = \"standard\",   domains1 = \"condition\",   domains2 = \"condition\" )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get relationship ID values from the concept relationship table — getRelationshipId","text":"cdm cdm reference standardConcept1 Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. standardConcept2 Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. domains1 Character vector one OMOP CDM domain. domains2 Character vector one OMOP CDM domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get relationship ID values from the concept relationship table — getRelationshipId","text":"character vector unique values","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRelationshipId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get relationship ID values from the concept relationship table — getRelationshipId","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getRelationshipId(cdm = cdm) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available routes in a cdm reference. — getRouteCategories","title":"Get available routes in a cdm reference. — getRouteCategories","text":"Get dose form categories available database (see https://doi.org/10.1002/pds.5809) details routes classified).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available routes in a cdm reference. — getRouteCategories","text":"","code":"getRouteCategories(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available routes in a cdm reference. — getRouteCategories","text":"cdm cdm reference.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getRouteCategories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available routes in a cdm reference. — getRouteCategories","text":"character vector available routes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"getVocabVersion — getVocabVersion","title":"getVocabVersion — getVocabVersion","text":"getVocabVersion","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getVocabVersion — getVocabVersion","text":"","code":"getVocabVersion(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getVocabVersion — getVocabVersion","text":"cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getVocabVersion — getVocabVersion","text":"vocabulary version used","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getVocabVersion — getVocabVersion","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getVocabVersion(cdm = cdm) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":null,"dir":"Reference","previous_headings":"","what":"getVocabularies — getVocabularies","title":"getVocabularies — getVocabularies","text":"getVocabularies","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getVocabularies — getVocabularies","text":"","code":"getVocabularies(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getVocabularies — getVocabularies","text":"cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getVocabularies — getVocabularies","text":"Names available vocabularies","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getVocabularies — getVocabularies","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() getVocabularies(cdm = cdm) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate example vocabulary database — mockVocabRef","title":"Generate example vocabulary database — mockVocabRef","text":"Generate example vocabulary database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate example vocabulary database — mockVocabRef","text":"","code":"mockVocabRef(backend = \"data_frame\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate example vocabulary database — mockVocabRef","text":"backend 'database' (duckdb) 'data_frame'","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate example vocabulary database — mockVocabRef","text":"cdm reference mock vocabulary","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate example vocabulary database — mockVocabRef","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef() cdm CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/restrictToCodesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Use achilles counts to filter a codelist to keep only the codes used in the database — restrictToCodesInUse","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — restrictToCodesInUse","text":"Use achilles counts filter codelist keep codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/restrictToCodesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — restrictToCodesInUse","text":"","code":"restrictToCodesInUse(   x,   cdm,   minimumCount = 0L,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/restrictToCodesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — restrictToCodesInUse","text":"x codelist cdm cdm_reference via CDMConnector minimumCount codes frequency removed. table cdm table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/restrictToCodesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — restrictToCodesInUse","text":"Use achilles counts filter codelist codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/restrictToCodesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — restrictToCodesInUse","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") codes <- getCandidateCodes(cdm = cdm,                            keywords = \"arthritis\",                            domains = \"Condition\",                            includeDescendants = FALSE) x <- restrictToCodesInUse(list(\"cs1\" = codes$concept_id,                                \"cs2\" = 999),                                 cdm = cdm)  x CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Use achilles counts to get source codes used in the database — sourceCodesInUse","title":"Use achilles counts to get source codes used in the database — sourceCodesInUse","text":"Use achilles counts get source codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use achilles counts to get source codes used in the database — sourceCodesInUse","text":"","code":"sourceCodesInUse(   cdm,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use achilles counts to get source codes used in the database — sourceCodesInUse","text":"cdm cdm_reference via CDMConnector table cdm table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use achilles counts to get source codes used in the database — sourceCodesInUse","text":"list source codes used database.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/sourceCodesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use achilles counts to get source codes used in the database — sourceCodesInUse","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") x <- sourceCodesInUse(cdm = cdm) x CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratify a codelist by route category — stratifyByRouteCategory","title":"Stratify a codelist by route category — stratifyByRouteCategory","text":"Stratify codelist route category","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratify a codelist by route category — stratifyByRouteCategory","text":"","code":"stratifyByRouteCategory(x, cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratify a codelist by route category — stratifyByRouteCategory","text":"x codelist cdm cdm reference","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/stratifyByRouteCategory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratify a codelist by route category — stratifyByRouteCategory","text":"codelist","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"Subset codelist particular route category","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"","code":"subsetOnRouteCategory(x, cdm, routeCategory)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"x Codelist cdm cdm reference routeCategory Route category. Use getRoutes() find available route categories cdm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetOnRouteCategory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a codelist to only those with a particular route category — subsetOnRouteCategory","text":"codelist concepts associated specified route categories","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Use achilles counts to filter a codelist to keep only the codes used in the database — subsetToCodesInUse","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — subsetToCodesInUse","text":"Use achilles counts filter codelist keep codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — subsetToCodesInUse","text":"","code":"subsetToCodesInUse(   x,   cdm,   minimumCount = 0L,   table = c(\"condition_occurrence\", \"device_exposure\", \"drug_exposure\", \"measurement\",     \"observation\", \"procedure_occurrence\", \"visit_occurrence\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — subsetToCodesInUse","text":"x codelist cdm cdm_reference via CDMConnector minimumCount codes frequency removed. table cdm table","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — subsetToCodesInUse","text":"Use achilles counts filter codelist codes used database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/subsetToCodesInUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use achilles counts to filter a codelist to keep only the codes used in the database — subsetToCodesInUse","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") codes <- getCandidateCodes(cdm = cdm,                            keywords = \"arthritis\",                            domains = \"Condition\",                            includeDescendants = FALSE) x <- subsetToCodesInUse(list(\"cs1\" = codes$concept_id,                                \"cs2\" = 999),                                 cdm = cdm)  x CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise code use from achilles counts — summariseAchillesCodeUse","title":"Summarise code use from achilles counts — summariseAchillesCodeUse","text":"Summarise code use achilles counts","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise code use from achilles counts — summariseAchillesCodeUse","text":"","code":"summariseAchillesCodeUse(   x,   cdm,   countBy = c(\"record\", \"person\"),   minCellCount = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise code use from achilles counts — summariseAchillesCodeUse","text":"x Codelist cdm cdm_reference via CDMConnector::cdm_from_con() countBy Either \"record\" record-level counts \"person\" person-level counts minCellCount \\ifelse{html}{\\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\\strong{[Deprecated]}}","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise code use from achilles counts — summariseAchillesCodeUse","text":"tibble results","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseAchillesCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise code use from achilles counts — summariseAchillesCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") oa <- getCandidateCodes(cdm = cdm, keywords = \"osteoarthritis\") result_achilles <- summariseAchillesCodeUse(list(oa = oa$concept_id), cdm = cdm) result_achilles CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise code use in patient-level data — summariseCodeUse","title":"Summarise code use in patient-level data — summariseCodeUse","text":"Summarise code use patient-level data","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise code use in patient-level data — summariseCodeUse","text":"","code":"summariseCodeUse(   x,   cdm,   countBy = c(\"record\", \"person\"),   byConcept = TRUE,   byYear = FALSE,   bySex = FALSE,   ageGroup = NULL,   minCellCount = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise code use in patient-level data — summariseCodeUse","text":"x List concept IDs cdm cdm_reference via CDMConnector::cdm_from_con() countBy Either \"record\" record-level counts \"person\" person-level counts byConcept TRUE FALSE. TRUE code use summarised byYear TRUE FALSE. TRUE code use summarised year. bySex TRUE FALSE. TRUE code use summarised sex. ageGroup NULL, list ageGroup vectors length two. minCellCount \\ifelse{html}{\\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\\strong{[Deprecated]}}","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise code use in patient-level data — summariseCodeUse","text":"tibble results overall , specified, strata","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise code use in patient-level data — summariseCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomia_dir()) cdm <- CDMConnector::cdm_from_con(con,                                   cdm_schem = \"main\",                                   write_schema = \"main\") acetiminophen <- c(1125315,  1127433, 40229134, 40231925, 40162522, 19133768,  1127078) poliovirus_vaccine <- c(40213160) cs <- list(acetiminophen = acetiminophen,           poliovirus_vaccine = poliovirus_vaccine) results <- summariseCodeUse(cs,cdm = cdm) results CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"Summarise code use among cohort cdm reference","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"","code":"summariseCohortCodeUse(   x,   cdm,   cohortTable,   cohortId = NULL,   timing = \"any\",   countBy = c(\"record\", \"person\"),   byConcept = TRUE,   byYear = FALSE,   bySex = FALSE,   ageGroup = NULL,   minCellCount = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"x Vector concept IDs cdm cdm_reference via CDMConnector::cdm_from_con() cohortTable cohort table cdm reference. cohortId vector cohort IDs include timing assess code use relative cohort dates. can \"\"(code use time individuals cohort)  \"entry\" (code use individuals' cohort start date). countBy Either \"record\" record-level counts \"person\" person-level counts byConcept TRUE FALSE. TRUE code use summarised byYear TRUE FALSE. TRUE code use summarised year. bySex TRUE FALSE. TRUE code use summarised sex. ageGroup NULL, list ageGroup vectors length two. minCellCount \\ifelse{html}{\\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\\strong{[Deprecated]}}","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"tibble results overall , specified, strata","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseCohortCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise code use among a cohort in the cdm reference — summariseCohortCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomia_dir()) cdm <- CDMConnector::cdm_from_con(con,                                   cdm_schem = \"main\",                                   write_schema = \"main\") cdm <- CDMConnector::generateConceptCohortSet(cdm = cdm, conceptSet = list(a = 260139,                   b = 1127433),                   name = \"cohorts\",                   end = \"observation_period_end_date\",                   overwrite = TRUE)  results_cohort_mult <- summariseCohortCodeUse(list(cs = c(260139,19133873)),                       cdm = cdm,                       cohortTable = \"cohorts\",                       timing = \"entry\")  results_cohort_mult CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find orphan codes related to a codelist — summariseOrphanCodes","title":"Find orphan codes related to a codelist — summariseOrphanCodes","text":"Find orphan codes related codelist","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find orphan codes related to a codelist — summariseOrphanCodes","text":"","code":"summariseOrphanCodes(x, cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find orphan codes related to a codelist — summariseOrphanCodes","text":"x codelist find related codes used database cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find orphan codes related to a codelist — summariseOrphanCodes","text":"summarised result containg frequency codes related () codelist","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/summariseOrphanCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find orphan codes related to a codelist — summariseOrphanCodes","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") codes <- getCandidateCodes(cdm = cdm, keywords = \"Musculoskeletal disorder\", domains = \"Condition\", includeDescendants = FALSE)  orphan_codes <- summariseOrphanCodes(x = list(\"msk\" = codes$concept_id), cdm = cdm)  orphan_codes CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseAchillesCodeUse into a table. — tableAchillesCodeUse","title":"Format the result of summariseAchillesCodeUse into a table. — tableAchillesCodeUse","text":"Format result summariseAchillesCodeUse table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseAchillesCodeUse into a table. — tableAchillesCodeUse","text":"","code":"tableAchillesCodeUse(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate\"),   conceptId = TRUE,   standard = TRUE,   vocabulary = TRUE,   groupColumns = NULL,   excludeColumns = c(\"result_id\", \"estimate_type\"),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseAchillesCodeUse into a table. — tableAchillesCodeUse","text":"result summarised result results type \"achilles_code_use\". type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". header vector containing elements go header order. Allowed : cdm_name, group, strata, additional, variable, estimate, settings. conceptId TRUE concept ids displayed. standard TRUE column indicating code standard displayed. vocabulary TRUE vocabulary id displayed. groupColumns Columns use group labels. Allowed columns cdm_name /codelist_name. excludeColumns Columns drop output table. .options Named list additional formatting options. visOmopResults::optionsVisOmopTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseAchillesCodeUse into a table. — tableAchillesCodeUse","text":"table formatted version summariseCohortCodeUse result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableAchillesCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseAchillesCodeUse into a table. — tableAchillesCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") oa <- getCandidateCodes(cdm = cdm, keywords = \"osteoarthritis\") result_achilles <- summariseAchillesCodeUse(list(oa = oa$concept_id), cdm = cdm) tableAchillesCodeUse(result_achilles) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseCodeUse into a table. — tableCodeUse","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"Format result summariseCodeUse table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"","code":"tableCodeUse(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate\"),   splitStrata = TRUE,   conceptId = TRUE,   sourceConcept = TRUE,   groupColumns = NULL,   excludeColumns = c(\"result_id\", \"estimate_type\", \"additional_name\", \"additional_level\"),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"result summarised result results type \"code_use\". type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". header vector containing elements go header order. Allowed : cdm_name, group, strata, additional, variable, estimate, settings. splitStrata TRUE strata split. conceptId TRUE concept ids displayed. sourceConcept TRUE source concepts displayed. groupColumns Columns use group labels. Allowed columns cdm_name /codelist_name. excludeColumns Columns drop output table. .options Named list additional formatting options. visOmopResults::optionsVisOmopTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"table formatted version summariseCodeUse result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseCodeUse into a table. — tableCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomia_dir()) cdm <- CDMConnector::cdm_from_con(con,                                   cdm_schem = \"main\",                                   write_schema = \"main\") acetiminophen <- c(1125315,  1127433, 40229134, 40231925, 40162522, 19133768,  1127078) poliovirus_vaccine <- c(40213160) cs <- list(acetiminophen = acetiminophen,           poliovirus_vaccine = poliovirus_vaccine) results <- summariseCodeUse(cs,cdm = cdm) tableCodeUse(results) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"Format result summariseCohortCodeUse table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"","code":"tableCohortCodeUse(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate\"),   splitStrata = TRUE,   conceptId = TRUE,   sourceConcept = TRUE,   timing = FALSE,   groupColumns = NULL,   excludeColumns = c(\"result_id\", \"estimate_type\", \"additional_name\", \"additional_level\"),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"result summarised result results type \"cohort_code_use\". type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". header vector containing elements go header order. Allowed : cdm_name, group, strata, additional, variable, estimate, settings. splitStrata TRUE strata split. conceptId TRUE concept ids displayed. sourceConcept TRUE source concepts displayed. timing TRUE timing setting displayed. groupColumns Columns use group labels. Allowed columns cdm_name, cohort_name /codelist_name. excludeColumns Columns drop output table. .options Named list additional formatting options. visOmopResults::optionsVisOmopTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"table formatted version summariseCohortCodeUse result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableCohortCodeUse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseCohortCodeUse into a table. — tableCohortCodeUse","text":"","code":"if (FALSE) { # \\dontrun{ con <- DBI::dbConnect(duckdb::duckdb(),                       dbdir = CDMConnector::eunomia_dir()) cdm <- CDMConnector::cdm_from_con(con,                                   cdm_schem = \"main\",                                   write_schema = \"main\") cdm <- CDMConnector::generateConceptCohortSet(cdm = cdm, conceptSet = list(a = 260139,                   b = 1127433),                   name = \"cohorts\",                   end = \"observation_period_end_date\",                   overwrite = TRUE)  results_cohort_mult <- summariseCohortCodeUse(list(cs = c(260139,19133873)),                       cdm = cdm,                       cohortTable = \"cohorts\",                       timing = \"entry\")  tableCohortCodeUse(results_cohort_mult) CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the result of summariseOrphanCodes into a table. — tableOrphanCodes","title":"Format the result of summariseOrphanCodes into a table. — tableOrphanCodes","text":"Format result summariseOrphanCodes table.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the result of summariseOrphanCodes into a table. — tableOrphanCodes","text":"","code":"tableOrphanCodes(   result,   type = \"gt\",   header = c(\"cdm_name\", \"estimate\"),   conceptId = TRUE,   standard = TRUE,   vocabulary = TRUE,   groupColumns = NULL,   excludeColumns = c(\"result_id\", \"estimate_type\"),   .options = list() )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the result of summariseOrphanCodes into a table. — tableOrphanCodes","text":"result summarised result results type \"orphan_codes\". type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". header vector containing elements go header order. Allowed : cdm_name, group, strata, additional, variable, estimate, settings. conceptId TRUE concept ids displayed. standard TRUE column indicating code standard displayed. vocabulary TRUE vocabulary id displayed. groupColumns Columns use group labels. Allowed columns cdm_name /codelist_name. excludeColumns Columns drop output table. .options Named list additional formatting options. visOmopResults::optionsVisOmopTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the result of summariseOrphanCodes into a table. — tableOrphanCodes","text":"table formatted version summariseOrphanCodes result.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/tableOrphanCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the result of summariseOrphanCodes into a table. — tableOrphanCodes","text":"","code":"if (FALSE) { # \\dontrun{ cdm <- mockVocabRef(\"database\") codes <- getCandidateCodes(cdm = cdm, keywords = \"Musculoskeletal disorder\", domains = \"Condition\", includeDescendants = FALSE)  orphan_codes <- summariseOrphanCodes(x = list(\"msk\" = codes$concept_id), cdm = cdm, domains = \"Condition\", standardConcept = \"Standard\", searchInSynonyms = FALSE, searchNonStandard = FALSE, includeDescendants = TRUE, includeAncestor = FALSE)  tableOrphanCodes(orphan_codes)  CDMConnector::cdmDisconnect(cdm) } # }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-30","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 3.0","title":"CodelistGenerator 3.0","text":"CRAN release: 2024-05-31 Add function getRelationshipId Add functions summariseAchillesCodeUse (replaces achillesCodeUse), summariseOrphanCodes (replaces findOrphanCodes), tableAchillesCodeUse, tableCodeUse, tableCohortCodeUse, tableOrphanCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-223","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.3","title":"CodelistGenerator 2.2.3","text":"CRAN release: 2024-03-08 Fix forthcoming breaking change dependency omopgenerics","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-222","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.2","title":"CodelistGenerator 2.2.2","text":"CRAN release: 2024-02-14 Fix edge case multiple exclusion criteria","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-221","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.1","title":"CodelistGenerator 2.2.1","text":"CRAN release: 2024-02-07 Working omopgenerics","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-220","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.2.0","title":"CodelistGenerator 2.2.0","text":"CRAN release: 2024-01-25 Added functions findOrphanCodes, restrictToCodesInUse, sourceCodesInUse. Speed improvements getCandidateCodes search place (e.g. database side). Dropped explicit support Arrow cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-211","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.1.1","title":"CodelistGenerator 2.1.1","text":"CRAN release: 2023-11-20 Improved support device domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-200","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 2.0.0","title":"CodelistGenerator 2.0.0","text":"CRAN release: 2023-10-09 Simplified interface getCandidateCodes, number arguments removed. Added function summariseCohortCodeUse.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-170","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.7.0","title":"CodelistGenerator 1.7.0","text":"CRAN release: 2023-08-16 Added function codesFromCohort.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-160","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.6.0","title":"CodelistGenerator 1.6.0","text":"CRAN release: 2023-07-07 Improved getICD10StandardCodes function. Added function codesFromConceptSet.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-150","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.5.0","title":"CodelistGenerator 1.5.0","text":"CRAN release: 2023-06-13 Require CDMConnector v1.0.0 .","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-140","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.4.0","title":"CodelistGenerator 1.4.0","text":"CRAN release: 2023-06-06 Added function summariseCodeUse.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-130","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.3.0","title":"CodelistGenerator 1.3.0","text":"CRAN release: 2023-05-30 Added function getICD10StandardCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-120","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.2.0","title":"CodelistGenerator 1.2.0","text":"CRAN release: 2023-05-04 Added functions getATCCodes getDrugIngredientCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-110","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.1.0","title":"CodelistGenerator 1.1.0","text":"CRAN release: 2023-04-01 Added exactMatch includeSequela options getCandidateCodes function.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-100","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.0.0","title":"CodelistGenerator 1.0.0","text":"CRAN release: 2023-02-07 Added NEWS.md file track changes package.","code":""}]
