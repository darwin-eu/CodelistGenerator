[{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 CodelistGenerator authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"creating-a-codelist-for-dementia","dir":"Articles","previous_headings":"","what":"Creating a codelist for dementia","title":"01 Introduction to CodelistGenerator","text":"example going generate candidate codelist dementia, looking codes condition domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"getting-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Getting the OMOP CDM vocabularies","title":"01 Introduction to CodelistGenerator","text":"ready access database data OMOP CDM format (necessarily contain vocabulary tables), first need obtain OMOP CDM vocabularies https://athena.ohdsi.org. downloaded, can make vocabulary database like : structure tables described detail : https://ohdsi.github.io/CommonDataModel/cdm53.html#Vocabulary_Tables","code":"library(readr) library(DBI) library(RSQLite) library(here) vocab.folder<-Sys.getenv(\"omop_cdm_vocab_path\") # path to directory of unzipped files concept<-read_delim(paste0(vocab.folder,\"/CONCEPT.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_relationship<-read_delim(paste0(vocab.folder,\"/CONCEPT_RELATIONSHIP.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  concept_ancestor<-read_delim(paste0(vocab.folder,\"/CONCEPT_ANCESTOR.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_synonym<-read_delim(paste0(vocab.folder,\"/CONCEPT_SYNONYM.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) vocabulary<-read_delim(paste0(vocab.folder,\"/VOCABULARY.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  db <- dbConnect(RSQLite::SQLite(), \":memory:\") dbWriteTable(db, \"concept\", concept, overwrite=TRUE) dbWriteTable(db, \"concept_relationship\", concept_relationship, overwrite=TRUE) dbWriteTable(db, \"concept_ancestor\", concept_ancestor, overwrite=TRUE) dbWriteTable(db, \"concept_synonym\", concept_synonym, overwrite=TRUE) dbWriteTable(db, \"vocabulary\", vocabulary) rm(concept,concept_relationship, concept_ancestor, concept_synonym, vocabulary) vocabulary_database_schema<-\"main\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"check-version-of-the-vocabularies","dir":"Articles","previous_headings":"","what":"Check version of the vocabularies","title":"01 Introduction to CodelistGenerator","text":"important note results CodelistGenerator specific particular version OMOP CDM vocabularies. can see version vocabulary used like ","code":"dplyr::tbl(db, dplyr::sql(paste0(     \"SELECT * FROM \",     vocabulary_database_schema,     \".vocabulary\"     ))) %>%     dplyr::rename_with(tolower) %>%     dplyr::filter(.data$vocabulary_id == \"None\") %>%     dplyr::select(\"vocabulary_version\") %>%     dplyr::collect() %>%     dplyr::pull() #> [1] \"v5.0 10-MAY-22\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"codelist-from-dementia-4182210-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “Dementia” (4182210) and its descendants","title":"01 Introduction to CodelistGenerator","text":"simplest approach identifying potential codes take high-level code include descendants. looks pick relevant codes. , approach misses codes descendant 4182210. example, codes “Wandering due dementia” (37312577; https://athena.ohdsi.org/search-terms/terms/37312577) “Anxiety due dementia” (37312031; https://athena.ohdsi.org/search-terms/terms/37312031) picked .","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id==\"4182210\") %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"01 Introduction to CodelistGenerator","text":"try include terms included can use CodelistGenerator. First, let’s simple search single keyword “dementia”, including descendants identified codes. difference codelist one 4182210 descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) dementia_codes1<-get_candidate_codes(keywords=\"dementia\",                     domains=\"Condition\",                     include_descendants = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(dementia_codes1,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"4182210 and descendants\"),                       dementia_codes1  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                      \"Only 4182210 and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"review-mappings-from-source-vocabularies","dir":"Articles","previous_headings":"","what":"Review mappings from source vocabularies","title":"01 Introduction to CodelistGenerator","text":"Perhaps want see ICD10CM codes map candidate codelist. can get running","code":"icd_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"ICD10CM\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(icd_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) read_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"Read\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(read_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"mock-vocabulary-database","dir":"Articles","previous_headings":"","what":"Mock vocabulary database","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"Let´s say mock vocabulary database hypothetical concepts relationships.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-for-exact-keyword-match","dir":"Articles","previous_headings":"","what":"Search for exact keyword match","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"find “Musculoskeletal disorder” can search like Note, also identify based partial match","code":"codes<-get_candidate_codes(     keywords = \"Musculoskeletal disorder\",     domains=\"Condition\",     include_descendants = FALSE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes) codes<-get_candidate_codes(     keywords = \"Musculoskeletal\",     domains=\"Condition\",     include_descendants = FALSE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"add-descendants","dir":"Articles","previous_headings":"","what":"Add descendants","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"include descendants identified code, can set include_descendants TRUE","code":"kable(get_candidate_codes(     keywords = \"Musculoskeletal disorder\",     domains=\"Condition\",     include_descendants = TRUE,     db = db,     vocabulary_database_schema = \"main\"   ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"multiple-search-terms","dir":"Articles","previous_headings":"","what":"Multiple search terms","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also search multiple keywords time, picked following search","code":"codes<-get_candidate_codes(     keywords = c(\"Musculoskeletal disorder\",                  \"arthritis\",                  \"arthrosis\"),     domains=\"Condition\",     include_descendants = FALSE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"add-ancestor","dir":"Articles","previous_headings":"","what":"Add ancestor","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"include ancestors one level identified concepts can set include_ancestor TRUE","code":"codes<-get_candidate_codes(     keywords = \"Osteoarthritis of knee\",     include_ancestor = TRUE,     domains=\"Condition\",     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"searches-with-multiple-words","dir":"Articles","previous_headings":"","what":"Searches with multiple words","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also find concepts multiple words even different order. example, search “Knee osteoarthritis” pick “Osteoarthritis knee”.","code":"codes<-get_candidate_codes(     keywords = \"Knee osteoarthritis\",     domains=\"Condition\",     include_descendants = TRUE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"with-exclusions","dir":"Articles","previous_headings":"","what":"With exclusions","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also exclude specific terms","code":"codes<-get_candidate_codes(     keywords = \"arthritis\",     exclude = \"Hip osteoarthritis\",     domains=\"Condition\",     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-via-synonyms","dir":"Articles","previous_headings":"","what":"Search via synonyms","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also pick codes based synonyms. case “Arthritis” (gets identified first) synonym “Osteoarthrosis”, based synonym can also include “Osteoarthrosis” concept.","code":"codes<-get_candidate_codes(     keywords = \"arthritis\",     domains=\"Condition\",     search_synonyms = TRUE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"fuzzy-matches-instead-of-only-exact-matches","dir":"Articles","previous_headings":"","what":"Fuzzy matches instead of only exact matches","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"also picked “Osteoarthrosis” fuzzy matching allows differences spelling.","code":"codes<-get_candidate_codes(     keywords = \"arthritis\",     domains=\"Condition\",     fuzzy_match = TRUE,     max_distance_cost = 0.2,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-via-source","dir":"Articles","previous_headings":"","what":"Search via source","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"also picked “Osteoarthrosis” searching via source.","code":"codes<-get_candidate_codes(     keywords = c(\"arthritis\",\"arthropathy\"),     domains=\"Condition\",     search_source = TRUE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-for-both-standard-and-non-standard-concepts","dir":"Articles","previous_headings":"","what":"Search for both standard and non-standard concepts","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also include non-standard codes results like ","code":"codes<-get_candidate_codes(     keywords = c(\"Musculoskeletal disorder\",                  \"arthritis\",                  \"arthropathy\",                  \"arthrosis\"),     domains=\"Condition\",     standard_concept= c(\"Standard\", \"Non-standard\"),     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes) dbDisconnect(db)"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"creating-a-codelist-for-osteoarthritis","dir":"Articles","previous_headings":"Set up","what":"Creating a codelist for osteoarthritis","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"example going generate candidate codelist osteoarthritis, looking impact alternative search strategies.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"set-up-1","dir":"Articles","previous_headings":"Set up","what":"Set up","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"condition-domain-without-searching-synonyms-without-fuzzy-match-with-exclusions-without-including-descendants-or-ancestor","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Condition domain, without searching synonyms, without fuzzy match, with exclusions, without including descendants or ancestor","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"start search “osteoarthritis”, excluding “post-infection” “post-traumatic”, without searching synonyms, without searching via source codes, without fuzzy matching, without including descendants direct ancestor included concepts. candidate codelist?","code":"oa_codes1<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(oa_codes1,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,250)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"including-descendants","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Including descendants","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now also include descendants included concepts. new codes pick ?","code":"oa_codes2<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = TRUE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_2<-bind_rows(oa_codes1, oa_codes2) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"including-observation-domain","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Including observation domain","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now search observation domain well condition domain. new codes pick ?","code":"oa_codes3<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=c(\"Condition\",\"Observation\"),                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_3<-bind_rows(oa_codes1, oa_codes3) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_3,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"search-synonyms","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Search synonyms","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes4<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = TRUE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_4<-bind_rows(oa_codes1, oa_codes4) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_4,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"search-via-source","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Search via source","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes5<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=TRUE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_5<-bind_rows(oa_codes1, oa_codes5) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_5,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"using-a-fuzzy-search","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Using a fuzzy search","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now use approximate search. See https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/agrep details (running hood). Note, using defaults 0.1 substitutions, deletions, insertions. new codes pick ?","code":"oa_codes6<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = TRUE,                     max_distance_cost = 0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_6<-bind_rows(oa_codes1, oa_codes6) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_6,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"using-a-more-generous-fuzzy-search","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Using a more generous fuzzy search","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"widen approximate searching, increasing maximum distance allowed match 0.2 substitutions, deletions, insertions. new codes pick ?","code":"oa_codes7<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = TRUE,                     max_distance_cost = 0.2,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_7<-bind_rows(oa_codes1, oa_codes7) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_7,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"include-ancestor","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Include ancestor","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now include direct ancestor included terms. new codes pick ?","code":"oa_codes8<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     max_distance_cost = 0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_8<-bind_rows(oa_codes1, oa_codes8) %>%    group_by(concept_id) %>%    mutate(seq=length(concept_name)) %>%   filter(seq==1) datatable(new_codes_1_8,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"creating-a-codelists-for-colonoscopy","dir":"Articles","previous_headings":"","what":"Creating a codelists for colonoscopy","title":"03 Generating a codelist for procedures","text":"vignette going create codelists identifying colonoscopy. example going generate candidate codelists looking codes either procedure measurement domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"03 Generating a codelist for procedures","text":"described previously alternative ways link vocabularies. connection existing database can made like :","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"codelist-from-colonoscopy-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “colonoscopy” and its descendants","title":"03 Generating a codelist for procedures","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id %in% c(\"4249893\", \"937652\", \"40480729\")) %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"03 Generating a codelist for procedures","text":"can also use CodelistGenerator generate candidate codelist colonoscopy. Let’s search single keyword “colonoscopy” without exclusions including descendants difference codelist one based descendants? extra codes picked CodelistGenerator? , codes specified codes descendants picked CodelistGenerator?","code":"library(CodelistGenerator) colonoscopy_codes2<-get_candidate_codes(keywords=\"colonoscopy\",                     domains=c(\"Procedure\",\"Measurement\"),                     exclude = NULL,                     include_descendants = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(colonoscopy_codes2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"Specified codes and descendants\"),                       colonoscopy_codes2  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                     \"Only specified codes and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) #> Joining, by = c(\"concept_id\", \"concept_name\", \"domain_id\", #> \"vocabulary_id\") kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) datatable(code_comparison %>%              filter(type==\"Only specified codes and descendants\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"creating-a-codelists-for-metformin","dir":"Articles","previous_headings":"","what":"Creating a codelists for metformin","title":"04 Codelists for medications","text":"vignette going create codelists identifying metformin, looking drug domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"04 Codelists for medications","text":"","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"codelist-from-metformin-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “metformin” and its descendants","title":"04 Codelists for medications","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,   sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%   filter(ancestor_concept_id %in% c(\"1503297\")) %>%   select(\"descendant_concept_id\") %>%   rename(\"concept_id\"=\"descendant_concept_id\") %>%   inner_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",          \"domain_id\", \"vocabulary_id\") %>%   collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"04 Codelists for medications","text":"can also use CodelistGenerator generate candidate codelist metformin, Let’s search single keyword “metformin”, including descendants. difference codelist one based descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) metformin_codes2<-get_candidate_codes(keywords=\"metformin\",                     domains=c(\"Drug\"),                     include_descendants = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(metformin_codes2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-full_join(codes_from_descendants  %>% mutate(type1=\"Specified codes and descendants\"),                       metformin_codes2  %>% mutate(type2=\"CodelistGenerator\")) %>%    mutate(type=ifelse(!is.na(type1) & !is.na(type2),                      \"Both\",               ifelse(!is.na(type1) & is.na(type2),                     \"Only specified codes and descendants\",               ifelse(is.na(type1) & !is.na(type2),                      \"Only CodelistGenerator\",                      NA)))) %>%    select(-c(\"type1\",\"type2\")) #> Joining, by = c(\"concept_id\", \"concept_name\", \"domain_id\", #> \"vocabulary_id\") kable(code_comparison %>%    group_by(type) %>%    tally()) datatable(code_comparison %>%              filter(type==\"Only CodelistGenerator\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E (2022). CodelistGenerator: Generate Candidate Codelists OMOP CDM. R package version 0.0.0.9000, https://darwin-eu.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Generate Candidate Codelists for the OMOP CDM},   author = {Edward Burn},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://darwin-eu.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate Candidate Codelists for the OMOP CDM","text":"CodelistGenerator used create candidate set codes helping define patient cohorts data mapped OMOP common data model. little like process systematic review, idea specified search strategy, CodelistGenerator identify set concepts may relevant, screened remove irrelevant codes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Candidate Codelists for the OMOP CDM","text":"can install development version CodelistGenerator like :","code":"install.packages(\"remotes\") remotes::install_github(\"darwin-eu/CodelistGenerator\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"connecting-to-the-omop-cdm-vocabularies","dir":"","previous_headings":"","what":"Connecting to the OMOP CDM vocabularies","title":"Generate Candidate Codelists for the OMOP CDM","text":"","code":"# example with postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- DBI::dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-Sys.getenv(\"vocabulary_schema\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"example-search","dir":"","previous_headings":"","what":"Example search","title":"Generate Candidate Codelists for the OMOP CDM","text":"Every codelist specific version OMOP CDM vocabularies, can first check version. can search asthma like concept_id concept_name domain_id vocabulary_id 761844 Inhaled steroid-dependent asthma Condition SNOMED 764677 Persistent asthma Condition SNOMED 764949 Persistent asthma, well controlled Condition SNOMED 3661412 Thunderstorm asthma Condition SNOMED 4015819 Asthma disturbs sleep weekly Condition SNOMED 4015947 Asthma causing night waking Condition SNOMED 4017025 Asthma disturbing sleep Condition SNOMED 4017026 Asthma limiting activities Condition SNOMED 4017182 Asthma disturbs sleep frequently Condition SNOMED 4017183 Asthma disturbing sleep Condition SNOMED Perhaps want exclude certain concepts part search strategy, case can added like concept_id concept_name domain_id vocabulary_id 761844 Inhaled steroid-dependent asthma Condition SNOMED 764677 Persistent asthma Condition SNOMED 764949 Persistent asthma, well controlled Condition SNOMED 3661412 Thunderstorm asthma Condition SNOMED 4015819 Asthma disturbs sleep weekly Condition SNOMED 4015947 Asthma causing night waking Condition SNOMED 4017025 Asthma disturbing sleep Condition SNOMED 4017026 Asthma limiting activities Condition SNOMED 4017182 Asthma disturbs sleep frequently Condition SNOMED 4017183 Asthma disturbing sleep Condition SNOMED can also see source codes mapped , example standard_concept_name standard_vocabulary_id source_concept_name source_vocabulary_id Eosinophilic asthma SNOMED Pulmonary eosinophilia, elsewhere classified ICD10CM Eosinophilic asthma SNOMED Eosinophilic asthma ICD10CM Eosinophilic asthma SNOMED pulmonary eosinophilia, elsewhere classified ICD10CM Eosinophilic asthma SNOMED Pulmonary eosinophilia, elsewhere classified ICD10CM Cryptogenic pulmonary eosinophilia SNOMED Chronic eosinophilic pneumonia ICD10CM Simple pulmonary eosinophilia SNOMED Acute eosinophilic pneumonia ICD10CM Asthma SNOMED Asthma ICD10CM Asthma SNOMED unspecified asthma ICD10CM Asthma SNOMED Unspecified asthma ICD10CM Asthma SNOMED asthma ICD10CM","code":"dplyr::tbl(db, dplyr::sql(paste0(     \"SELECT * FROM \",     vocabulary_database_schema,     \".vocabulary\"     ))) %>%     dplyr::rename_with(tolower) %>%     dplyr::filter(.data$vocabulary_id == \"None\") %>%     dplyr::select(\"vocabulary_version\") %>%     dplyr::collect() %>%     dplyr::pull() #> [1] \"v5.0 13-JUL-21\" asthma_1<-get_candidate_codes(keywords=\"asthma\",                     domains = \"Condition\",                     db=db,                     vocabulary_database_schema = vocabulary_database_schema) kable(head(asthma_1, 10)) asthma_2<-get_candidate_codes(keywords=\"asthma\",                     domains = \"Condition\",                     exclude = \"Poisoning by antiasthmatic\",                     db=db,                     vocabulary_database_schema = vocabulary_database_schema) kable(head(asthma_2, 10)) asthma_icd_mappings<-show_mappings(candidate_codelist=asthma_2,                      source_vocabularies=\"ICD10CM\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) kable(head(asthma_icd_mappings %>%         select(standard_concept_name,               standard_vocabulary_id,               source_concept_name,               source_vocabulary_id),      10))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two codelists — compare_codelists","title":"Compare two codelists — compare_codelists","text":"Compare two codelists","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two codelists — compare_codelists","text":"","code":"compare_codelists(codelist_1, codelist_2)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two codelists — compare_codelists","text":"codelist_1 Output get_candidate_codes codelist_2 Output get_candidate_codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two codelists — compare_codelists","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two codelists — compare_codelists","text":"","code":"if (FALSE) { library(DBI) library(CodelistGenerator) db <- DBI::dbConnect(\" Your database connection here \") vocabulary_database_schema <- \" Your vocabulary schema here \" asthma_codes <- get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \" ) persistant_asthma_codes <- get_candidate_codes(   keywords = \"Persistent asthma\",   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \" ) compare_codelists(   codelist_1 = asthma_codes,   codelist_2 = persistant_asthma_codes ) }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate example vocabulary database — generate_mock_vocab_db","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"Generate example vocabulary database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"","code":"generate_mock_vocab_db()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"DBIConnection SQLite database mock vocabulary","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"","code":"if (FALSE) { library(DBI) library(RSQLite) library(CodelistGenerator) db <- generate_mock_vocab_db() }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"get_candidate_codes(   keywords,   domains = \"Condition\",   standard_concept = \"Standard\",   search_synonyms = FALSE,   search_source = FALSE,   fuzzy_match = FALSE,   max_distance_cost = 0.1,   exclude = NULL,   include_descendants = TRUE,   include_ancestor = FALSE,   verbose = FALSE,   db,   vocabulary_database_schema )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. domains Character vector one OMOP CDM domain. standard_concept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. search_synonyms Either TRUE FALSE. TRUE code also search via concept synonym table. search_source Either TRUE FALSE. TRUE code also search via source concepts. fuzzy_match Either TRUE FALSE. TRUE fuzzy matching used, approximate matches identified. max_distance_cost, maximum number/fraction match cost (generalized Levenshtein distance) fuzzy matching (see ??base::agrep details). exclude Character vector words identify concepts exclude. include_descendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. include_ancestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist. verbose Either TRUE FALSE. TRUE, progress reported. db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"if (FALSE) { library(DBI) library(CodelistGenerator) db <- DBI::dbConnect(\" Your database connection here \" ) vocabulary_database_schema <- \" Your vocabulary schema here \" get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = vocabulary_database_schema ) }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from source vocabularies to standard — show_mappings","title":"Show mappings from source vocabularies to standard — show_mappings","text":"Show mappings source vocabularies standard","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"show_mappings(   candidate_codelist,   source_vocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\", \"LOINC\",     \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\"),   db,   vocabulary_database_schema )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from source vocabularies to standard — show_mappings","text":"candidate_codelist Dataframe source_vocabularies Character vector db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from source vocabularies to standard — show_mappings","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"if (FALSE) { library(DBI) library(CodelistGenerator) db <- DBI::dbConnect(\" Your database connection here \" ) vocabulary_database_schema <- \" Your vocabulary schema here \" asthma_codes <- get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \") show_mappings(   candidate_codelist = asthma_codes,   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \" ) }"}]
