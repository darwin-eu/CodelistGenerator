[{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"creating-a-codelist-for-dementia","dir":"Articles","previous_headings":"","what":"Creating a codelist for dementia","title":"01 Introduction to CodelistGenerator","text":"example going generate candidate codelist dementia, looking codes condition domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"getting-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Getting the OMOP CDM vocabularies","title":"01 Introduction to CodelistGenerator","text":"ready access database data OMOP CDM format (necessarily contain vocabulary tables), first need obtain OMOP CDM vocabularies https://athena.ohdsi.org. downloaded, can make vocabulary database like : structure tables described detail : https://ohdsi.github.io/CommonDataModel/cdm53.html#Vocabulary_Tables","code":"library(readr) library(DBI) library(RSQLite) library(here) vocab.folder<-Sys.getenv(\"omop_cdm_vocab_path\") # path to directory of unzipped files concept<-read_delim(paste0(vocab.folder,\"/CONCEPT.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_relationship<-read_delim(paste0(vocab.folder,\"/CONCEPT_RELATIONSHIP.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  concept_ancestor<-read_delim(paste0(vocab.folder,\"/CONCEPT_ANCESTOR.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) concept_synonym<-read_delim(paste0(vocab.folder,\"/CONCEPT_SYNONYM.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE) vocabulary<-read_delim(paste0(vocab.folder,\"/VOCABULARY.csv\"),      \"\\t\", escape_double = FALSE, trim_ws = TRUE)  db <- dbConnect(RSQLite::SQLite(), \":memory:\") dbWriteTable(db, \"concept\", concept, overwrite=TRUE) dbWriteTable(db, \"concept_relationship\", concept_relationship, overwrite=TRUE) dbWriteTable(db, \"concept_ancestor\", concept_ancestor, overwrite=TRUE) dbWriteTable(db, \"concept_synonym\", concept_synonym, overwrite=TRUE) dbWriteTable(db, \"vocabulary\", vocabulary) rm(concept,concept_relationship, concept_ancestor, concept_synonym, vocabulary) vocabulary_database_schema<-\"main\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"check-version-of-the-vocabularies","dir":"Articles","previous_headings":"","what":"Check version of the vocabularies","title":"01 Introduction to CodelistGenerator","text":"important note results CodelistGenerator specific particular version OMOP CDM vocabularies. can see version vocabulary used like ","code":"dplyr::tbl(db, dplyr::sql(paste0(     \"SELECT * FROM \",     vocabulary_database_schema,     \".vocabulary\"     ))) %>%     dplyr::rename_with(tolower) %>%     dplyr::filter(.data$vocabulary_id == \"None\") %>%     dplyr::select(\"vocabulary_version\") %>%     dplyr::collect() %>%     dplyr::pull() #> [1] \"v5.0 10-MAY-22\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"codelist-from-dementia-4182210-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “Dementia” (4182210) and its descendants","title":"01 Introduction to CodelistGenerator","text":"simplest approach identifying potential codes take high-level code include descendants. looks pick relevant codes. , approach misses codes descendant 4182210. example, codes “Wandering due dementia” (37312577; https://athena.ohdsi.org/search-terms/terms/37312577) “Anxiety due dementia” (37312031; https://athena.ohdsi.org/search-terms/terms/37312031) picked .","code":"library(dplyr) library(dbplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id==\"4182210\") %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"01 Introduction to CodelistGenerator","text":"try include terms included can use CodelistGenerator. First, let’s simple search single keyword “dementia”, including descendants identified codes. difference codelist one 4182210 descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) dementia_codes1<-get_candidate_codes(keywords=\"dementia\",                     domains=\"Condition\",                     include_descendants = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(dementia_codes1,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-compare_codelists(codes_from_descendants,                   dementia_codes1) kable(code_comparison %>%    group_by(codelist) %>%    tally()) datatable(code_comparison %>%              filter(codelist==\"Only codelist_2\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"review-mappings-from-source-vocabularies","dir":"Articles","previous_headings":"","what":"Review mappings from source vocabularies","title":"01 Introduction to CodelistGenerator","text":"Perhaps want see ICD10CM codes map candidate codelist. can get running","code":"icd_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"ICD10CM\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(icd_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) read_mappings<-show_mappings(candidate_codelist=dementia_codes4,                     source_vocabularies=\"Read\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(read_mappings,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"mock-vocabulary-database","dir":"Articles","previous_headings":"","what":"Mock vocabulary database","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"Let´s say mock vocabulary database hypothetical concepts relationships.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-for-exact-keyword-match","dir":"Articles","previous_headings":"","what":"Search for exact keyword match","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"find “Musculoskeletal disorder” can search like Note, also identify based partial match","code":"codes<-get_candidate_codes(     keywords = \"Musculoskeletal disorder\",     domains=\"Condition\",     include_descendants = FALSE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes) codes<-get_candidate_codes(     keywords = \"Musculoskeletal\",     domains=\"Condition\",     include_descendants = FALSE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"add-descendants","dir":"Articles","previous_headings":"","what":"Add descendants","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"include descendants identified code, can set include_descendants TRUE","code":"kable(get_candidate_codes(     keywords = \"Musculoskeletal disorder\",     domains=\"Condition\",     include_descendants = TRUE,     db = db,     vocabulary_database_schema = \"main\"   ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"multiple-search-terms","dir":"Articles","previous_headings":"","what":"Multiple search terms","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also search multiple keywords time, picked following search","code":"codes<-get_candidate_codes(     keywords = c(\"Musculoskeletal disorder\",                  \"arthritis\",                  \"arthrosis\"),     domains=\"Condition\",     include_descendants = FALSE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"add-ancestor","dir":"Articles","previous_headings":"","what":"Add ancestor","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"include ancestors one level identified concepts can set include_ancestor TRUE","code":"codes<-get_candidate_codes(     keywords = \"Osteoarthritis of knee\",     include_ancestor = TRUE,     domains=\"Condition\",     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"searches-with-multiple-words","dir":"Articles","previous_headings":"","what":"Searches with multiple words","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also find concepts multiple words even different order. example, search “Knee osteoarthritis” pick “Osteoarthritis knee”.","code":"codes<-get_candidate_codes(     keywords = \"Knee osteoarthritis\",     domains=\"Condition\",     include_descendants = TRUE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"with-exclusions","dir":"Articles","previous_headings":"","what":"With exclusions","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also exclude specific terms","code":"codes<-get_candidate_codes(     keywords = \"arthritis\",     exclude = \"Hip osteoarthritis\",     domains=\"Condition\",     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-via-synonyms","dir":"Articles","previous_headings":"","what":"Search via synonyms","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also pick codes based synonyms. case “Arthritis” (gets identified first) synonym “Osteoarthrosis”, based synonym can also include “Osteoarthrosis” concept.","code":"codes<-get_candidate_codes(     keywords = \"arthritis\",     domains=\"Condition\",     search_synonyms = TRUE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"fuzzy-matches-instead-of-only-exact-matches","dir":"Articles","previous_headings":"","what":"Fuzzy matches instead of only exact matches","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"also picked “Osteoarthrosis” fuzzy matching allows differences spelling.","code":"codes<-get_candidate_codes(     keywords = \"arthritis\",     domains=\"Condition\",     fuzzy_match = TRUE,     max_distance_cost = 0.2,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-via-source","dir":"Articles","previous_headings":"","what":"Search via source","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"also picked “Osteoarthrosis” searching via source.","code":"codes<-get_candidate_codes(     keywords = c(\"arthritis\",\"arthropathy\"),     domains=\"Condition\",     search_source = TRUE,     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02a_Options_for_CodelistGenerator.html","id":"search-for-both-standard-and-non-standard-concepts","dir":"Articles","previous_headings":"","what":"Search for both standard and non-standard concepts","title":"02 Options for CodelistGenerator (with mock vocabulary)","text":"can also include non-standard codes results like ","code":"codes<-get_candidate_codes(     keywords = c(\"Musculoskeletal disorder\",                  \"arthritis\",                  \"arthropathy\",                  \"arthrosis\"),     domains=\"Condition\",     standard_concept= c(\"Standard\", \"Non-standard\"),     db = db,     vocabulary_database_schema = \"main\"   )  kable(codes) dbDisconnect(db)"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"creating-a-codelist-for-osteoarthritis","dir":"Articles","previous_headings":"Set up","what":"Creating a codelist for osteoarthritis","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"example going generate candidate codelist osteoarthritis, looking impact alternative search strategies.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"set-up-1","dir":"Articles","previous_headings":"Set up","what":"Set up","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"condition-domain-without-searching-synonyms-without-fuzzy-match-with-exclusions-without-including-descendants-or-ancestor","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Condition domain, without searching synonyms, without fuzzy match, with exclusions, without including descendants or ancestor","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"start search “osteoarthritis”, excluding “post-infection” “post-traumatic”, without searching synonyms, without searching via source codes, without fuzzy matching, without including descendants direct ancestor included concepts. candidate codelist?","code":"oa_codes1<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(oa_codes1,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,250)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"including-descendants","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Including descendants","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now also include descendants included concepts. new codes pick ?","code":"oa_codes2<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = TRUE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_2<-compare_codelists(oa_codes1, oa_codes2) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"including-observation-domain","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Including observation domain","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now search observation domain well condition domain. new codes pick ?","code":"oa_codes3<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=c(\"Condition\",\"Observation\"),                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_3<-compare_codelists(oa_codes1, oa_codes3) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_3,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"search-synonyms","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Search synonyms","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes4<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = TRUE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_4<-compare_codelists(oa_codes1, oa_codes4) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_4,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"search-via-source","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Search via source","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oa_codes5<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=TRUE,                     fuzzy_match = FALSE,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_5<-compare_codelists(oa_codes1, oa_codes5) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_5,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"using-a-fuzzy-search","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Using a fuzzy search","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now use approximate search. See https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/agrep details (running hood). Note, using defaults 0.1 substitutions, deletions, insertions. new codes pick ?","code":"oa_codes6<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = TRUE,                     max_distance_cost = 0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_6<-compare_codelists(oa_codes1, oa_codes6) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_6,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"using-a-more-generous-fuzzy-search","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Using a more generous fuzzy search","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"widen approximate searching, increasing maximum distance allowed match 0.2 substitutions, deletions, insertions. new codes pick ?","code":"oa_codes7<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = TRUE,                     max_distance_cost = 0.2,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_7<-compare_codelists(oa_codes1, oa_codes7) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_7,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02b_Options_for_CodelistGenerator.html","id":"include-ancestor","dir":"Articles","previous_headings":"Set up > Search strategies","what":"Include ancestor","title":"02 Options for CodelistGenerator(with full vocabulary)","text":"Now include direct ancestor included terms. new codes pick ?","code":"oa_codes8<-get_candidate_codes(keywords=\"osteoarthritis\",                     domains=\"Condition\",                     search_synonyms = FALSE,                     search_source=FALSE,                     fuzzy_match = FALSE,                     max_distance_cost = 0.1,                     exclude = c(\"post-infection\",                                 \"post-traumatic\"),                     include_descendants = FALSE,                     include_ancestor = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) new_codes_1_8<-compare_codelists(oa_codes1, oa_codes8) %>%    filter(codelist==\"Only codelist_2\") %>%    select(-\"codelist\")  datatable(new_codes_1_8,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"creating-a-codelists-for-colonoscopy","dir":"Articles","previous_headings":"","what":"Creating a codelists for colonoscopy","title":"03 Generating a codelist for procedures","text":"vignette going create codelists identifying colonoscopy. example going generate candidate codelists looking codes either procedure measurement domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"03 Generating a codelist for procedures","text":"described previously alternative ways link vocabularies. connection existing database can made like :","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"codelist-from-colonoscopy-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “colonoscopy” and its descendants","title":"03 Generating a codelist for procedures","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(dbplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,    sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%    filter(ancestor_concept_id %in% c(\"4249893\", \"937652\", \"40480729\")) %>%    select(\"descendant_concept_id\") %>%    rename(\"concept_id\"=\"descendant_concept_id\") %>%    left_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",           \"domain_id\", \"vocabulary_id\") %>%    collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_CodelistGenerator_extracting_procedure_codes.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"03 Generating a codelist for procedures","text":"can also use CodelistGenerator generate candidate codelist colonoscopy. Let’s search single keyword “colonoscopy” without exclusions including descendants difference codelist one based descendants? extra codes picked CodelistGenerator? , codes specified codes descendants picked CodelistGenerator?","code":"library(CodelistGenerator) colonoscopy_codes2<-get_candidate_codes(keywords=\"colonoscopy\",                     domains=c(\"Procedure\",\"Measurement\"),                     exclude = NULL,                     include_descendants = FALSE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(colonoscopy_codes2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<-compare_codelists(codes_from_descendants,                    colonoscopy_codes2) kable(code_comparison %>%    group_by(codelist) %>%    tally()) datatable(code_comparison %>%              filter(codelist==\"Only codelist_2\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) datatable(code_comparison %>%              filter(codelist==\"Only codelist_1\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"creating-a-codelists-for-metformin","dir":"Articles","previous_headings":"","what":"Creating a codelists for metformin","title":"04 Codelists for medications","text":"vignette going create codelists identifying metformin, looking drug domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"04 Codelists for medications","text":"","code":"library(DBI) library(RPostgres) # postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-\"vocabulary\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"codelist-from-metformin-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “metformin” and its descendants","title":"04 Codelists for medications","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(dbplyr) library(stringr) library(DT) library(kableExtra) codes_from_descendants<-tbl(db,   sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept_ancestor\"))) %>%   filter(ancestor_concept_id %in% c(\"1503297\")) %>%   select(\"descendant_concept_id\") %>%   rename(\"concept_id\"=\"descendant_concept_id\") %>%   inner_join(tbl(db, sql(paste0(\"SELECT * FROM \",      vocabulary_database_schema,      \".concept\"))))%>%   select(\"concept_id\", \"concept_name\",          \"domain_id\", \"vocabulary_id\") %>%   collect() datatable(codes_from_descendants,           rownames=FALSE,           options = list(pageLength = 10,                          lengthMenu = c(10, 20,50)))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"generating-a-candidate-codelist-using-codelist-generator","dir":"Articles","previous_headings":"","what":"Generating a candidate codelist using Codelist Generator","title":"04 Codelists for medications","text":"can also use CodelistGenerator generate candidate codelist metformin, Let’s search single keyword “metformin”, including descendants. difference codelist one based descendants? extra codes picked CodelistGenerator?","code":"library(CodelistGenerator) metformin_codes2<-get_candidate_codes(keywords=\"metformin\",                     domains=c(\"Drug\"),                     include_descendants = TRUE,                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) datatable(metformin_codes2,           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) )) code_comparison<- compare_codelists(codes_from_descendants, metformin_codes2) kable(code_comparison %>%    group_by(codelist) %>%    tally()) datatable(code_comparison %>%              filter(codelist==\"Only codelist_2\"),           rownames=FALSE,           options = list(   pageLength = 10,   lengthMenu = c(10, 20,50) ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E (2022). CodelistGenerator: Generate Candidate Codelists OMOP CDM. R package version 0.9.1, https://darwin-eu.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Generate Candidate Codelists for the OMOP CDM},   author = {Edward Burn},   year = {2022},   note = {R package version 0.9.1},   url = {https://darwin-eu.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate Candidate Codelists for the OMOP CDM","text":"CodelistGenerator used create candidate set codes helping define patient cohorts data mapped OMOP common data model. little like process systematic review, idea specified search strategy, CodelistGenerator identify set concepts may relevant, screened remove irrelevant codes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Candidate Codelists for the OMOP CDM","text":"can install development version CodelistGenerator like :","code":"install.packages(\"remotes\") remotes::install_github(\"darwin-eu/CodelistGenerator\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"connecting-to-the-omop-cdm-vocabularies","dir":"","previous_headings":"","what":"Connecting to the OMOP CDM vocabularies","title":"Generate Candidate Codelists for the OMOP CDM","text":"","code":"# First load required libraries library(DBI) library(dplyr) library(dbplyr) library(CodelistGenerator)  # Note that you will also need another library, like RPostgres, to make your database connection # example with postgres database connection details server_dbi<-Sys.getenv(\"server\") user<-Sys.getenv(\"user\") password<- Sys.getenv(\"password\") port<-Sys.getenv(\"port\") host<-Sys.getenv(\"host\")  db <- DBI::dbConnect(RPostgres::Postgres(),                 dbname = server_dbi,                 port = port,                 host = host,                 user = user,                 password = password)  # name of vocabulary schema vocabulary_database_schema<-Sys.getenv(\"vocabulary_schema\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"example-search","dir":"","previous_headings":"","what":"Example search","title":"Generate Candidate Codelists for the OMOP CDM","text":"Every codelist specific version OMOP CDM vocabularies, can first check version. can search asthma like concept_id concept_name domain_id vocabulary_id 252658 Intrinsic asthma without status asthmaticus Condition SNOMED 252942 Asthmatic pulmonary eosinophilia Condition SNOMED 256448 Chronic asthmatic bronchitis Condition SNOMED 257581 Exacerbation asthma Condition SNOMED 312950 IgE-mediated allergic asthma Condition SNOMED 313236 Cough variant asthma Condition SNOMED 316577 Poisoning antiasthmatic Condition SNOMED 317009 Asthma Condition SNOMED 443801 Exercise-induced asthma Condition SNOMED 761844 Inhaled steroid-dependent asthma Condition SNOMED Perhaps want exclude certain concepts part search strategy, case can added like concept_id concept_name domain_id vocabulary_id 252658 Intrinsic asthma without status asthmaticus Condition SNOMED 252942 Asthmatic pulmonary eosinophilia Condition SNOMED 256448 Chronic asthmatic bronchitis Condition SNOMED 257581 Exacerbation asthma Condition SNOMED 312950 IgE-mediated allergic asthma Condition SNOMED 313236 Cough variant asthma Condition SNOMED 317009 Asthma Condition SNOMED 443801 Exercise-induced asthma Condition SNOMED 761844 Inhaled steroid-dependent asthma Condition SNOMED 764677 Persistent asthma Condition SNOMED can also see source codes mapped , example standard_concept_name standard_vocabulary_id source_concept_name source_vocabulary_id Eosinophilic asthma SNOMED Pulmonary eosinophilia, elsewhere classified ICD10CM Eosinophilic asthma SNOMED Eosinophilic asthma ICD10CM Eosinophilic asthma SNOMED pulmonary eosinophilia, elsewhere classified ICD10CM Eosinophilic asthma SNOMED Pulmonary eosinophilia, elsewhere classified ICD10CM Cryptogenic pulmonary eosinophilia SNOMED Chronic eosinophilic pneumonia ICD10CM Simple pulmonary eosinophilia SNOMED Acute eosinophilic pneumonia ICD10CM Asthma SNOMED Asthma ICD10CM Asthma SNOMED unspecified asthma ICD10CM Asthma SNOMED Unspecified asthma ICD10CM Asthma SNOMED asthma ICD10CM","code":"dplyr::tbl(db, dplyr::sql(paste0(     \"SELECT * FROM \",     vocabulary_database_schema,     \".vocabulary\"     ))) %>%     dplyr::rename_with(tolower) %>%     dplyr::filter(.data$vocabulary_id == \"None\") %>%     dplyr::select(\"vocabulary_version\") %>%     dplyr::collect() %>%     dplyr::pull() #> [1] \"v5.0 13-JUL-21\" asthma_1<-get_candidate_codes(keywords=\"asthma\",                     domains = \"Condition\",                     db=db,                     vocabulary_database_schema = vocabulary_database_schema) head(asthma_1, 10) asthma_2<-get_candidate_codes(keywords=\"asthma\",                     domains = \"Condition\",                     exclude = \"Poisoning by antiasthmatic\",                     db=db,                     vocabulary_database_schema = vocabulary_database_schema) head(asthma_2, 10) asthma_icd_mappings<-show_mappings(candidate_codelist=asthma_2,                      source_vocabularies=\"ICD10CM\",                     db=db,                     vocabulary_database_schema =  vocabulary_database_schema) head(asthma_icd_mappings %>%         select(standard_concept_name,               standard_vocabulary_id,               source_concept_name,               source_vocabulary_id),      10)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two codelists — compare_codelists","title":"Compare two codelists — compare_codelists","text":"Compare two codelists","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two codelists — compare_codelists","text":"","code":"compare_codelists(codelist_1, codelist_2)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two codelists — compare_codelists","text":"codelist_1 Output get_candidate_codes codelist_2 Output get_candidate_codes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two codelists — compare_codelists","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compare_codelists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two codelists — compare_codelists","text":"","code":"if (FALSE) { library(DBI) library(CodelistGenerator) db <- DBI::dbConnect(\" Your database connection here \") vocabulary_database_schema <- \" Your vocabulary schema here \" asthma_codes <- get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \" ) persistant_asthma_codes <- get_candidate_codes(   keywords = \"Persistent asthma\",   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \" ) compare_codelists(   codelist_1 = asthma_codes,   codelist_2 = persistant_asthma_codes ) }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate example vocabulary database — generate_mock_vocab_db","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"Generate example vocabulary database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"","code":"generate_mock_vocab_db()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"DBIConnection SQLite database mock vocabulary","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/generate_mock_vocab_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate example vocabulary database — generate_mock_vocab_db","text":"","code":"if (FALSE) { library(DBI) library(RSQLite) library(CodelistGenerator) db <- generate_mock_vocab_db() }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"get_candidate_codes(   keywords,   domains = \"Condition\",   standard_concept = \"Standard\",   search_synonyms = FALSE,   search_source = FALSE,   fuzzy_match = FALSE,   max_distance_cost = 0.1,   exclude = NULL,   include_descendants = TRUE,   include_ancestor = FALSE,   verbose = FALSE,   db,   vocabulary_database_schema )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. domains Character vector one OMOP CDM domain. standard_concept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. search_synonyms Either TRUE FALSE. TRUE code also search via concept synonym table. search_source Either TRUE FALSE. TRUE code also search via source concepts. fuzzy_match Either TRUE FALSE. TRUE fuzzy matching used, approximate matches identified. max_distance_cost, maximum number/fraction match cost (generalized Levenshtein distance) fuzzy matching (see ??base::agrep details). exclude Character vector words identify concepts exclude. include_descendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. include_ancestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist. verbose Either TRUE FALSE. TRUE, progress reported. db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/get_candidate_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate candidate codelist for the OMOP CDM — get_candidate_codes","text":"","code":"if (FALSE) { library(DBI) library(CodelistGenerator) db <- DBI::dbConnect(\" Your database connection here \" ) vocabulary_database_schema <- \" Your vocabulary schema here \" get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = vocabulary_database_schema ) }"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from source vocabularies to standard — show_mappings","title":"Show mappings from source vocabularies to standard — show_mappings","text":"Show mappings source vocabularies standard","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"show_mappings(   candidate_codelist,   source_vocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\", \"LOINC\",     \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\"),   db,   vocabulary_database_schema )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from source vocabularies to standard — show_mappings","text":"candidate_codelist Dataframe source_vocabularies Character vector db Database connection via DBI::dbConnect() vocabulary_database_schema Name database schema vocab tables","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from source vocabularies to standard — show_mappings","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/show_mappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from source vocabularies to standard — show_mappings","text":"","code":"if (FALSE) { library(DBI) library(CodelistGenerator) db <- DBI::dbConnect(\" Your database connection here \" ) vocabulary_database_schema <- \" Your vocabulary schema here \" asthma_codes <- get_candidate_codes(   keywords = \"asthma\",   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \") show_mappings(   candidate_codelist = asthma_codes,   db = db,   vocabulary_database_schema = \" Your vocabulary schema here \" ) }"}]
