[{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to CodelistGenerator","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"contributing-code-or-documentation","dir":"","previous_headings":"","what":"Contributing code or documentation","title":"Contributing to CodelistGenerator","text":"package developed part DARWIN EU(R) project closed external contributions. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Contributing code or documentation","what":"Documenting the package","title":"Contributing to CodelistGenerator","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Contributing code or documentation","what":"Run tests","title":"Contributing to CodelistGenerator","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:IncidencePrevalence\", unload=TRUE) devtools::test_coverage()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Contributing code or documentation","what":"Adhere to code style","title":"Contributing to CodelistGenerator","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Contributing code or documentation","what":"Run check() before opening a pull request","title":"Contributing to CodelistGenerator","text":"opening pull request please make sure run: warnings seen. package CRAN close submitted CRAN please also run: Also can worth checking spelling urls","code":"devtools::check() rcmdcheck::rcmdcheck(args = c(\"--no-manual\", \"--as-cran\")) devtools::check_win_devel() spelling::spell_check_package() urlchecker::url_check()"},{"path":"https://darwin-eu.github.io/CodelistGenerator/CONTRIBUTING.html","id":"precompute-vignette-data","dir":"","previous_headings":"Contributing code or documentation","what":"Precompute vignette data","title":"Contributing to CodelistGenerator","text":"search results presented vignettes precomputed database full vocabulary. making changes affect results, recomputed. Note may need change database connection details script.","code":"source(here::here(\"extras\", \"precomputeVignetteData.R\"))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"creating-a-code-list-for-dementia","dir":"Articles","previous_headings":"","what":"Creating a code list for dementia","title":"Introduction to CodelistGenerator","text":"example going generate candidate codelist dementia, looking codes condition domain. Let’s first load libraries","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"connect-to-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connect to the OMOP CDM vocabularies","title":"Introduction to CodelistGenerator","text":"CodelistGenerator works cdm_reference vocabularies tables OMOP CDM using CDMConnector package. cdm_reference tables database, using arrow_table, loaded R. CodelistGenerator generally work fastest arrow_table let’s first set .","code":"# example with postgres database connection details db <- DBI::dbConnect(RPostgres::Postgres(),   dbname = Sys.getenv(\"server\"),   port = Sys.getenv(\"port\"),   host = Sys.getenv(\"host\"),   user = Sys.getenv(\"user\"),   password = Sys.getenv(\"password\") ) # name of vocabulary schema vocabularyDatabaseSchema <- Sys.getenv(\"vocabulary_schema\")  # create cdm reference cdm <- CDMConnector::cdm_from_con(   con = db,   cdm_schema = vocabularyDatabaseSchema,   cdm_tables = tidyselect::all_of(c(     \"concept\",     \"concept_relationship\",     \"concept_ancestor\",     \"concept_synonym\",     \"vocabulary\"   )) ) # vocab to arrow # save in temp folder for this example dOut <- here(tempdir(), \"db_vocab\") dir.create(dOut) CDMConnector::stow(cdm, dOut)  # new cdm reference using arrow cdmArrow <- CDMConnector::cdm_from_files(   path = dOut,   cdm_tables = tidyselect::all_of(c(     \"concept\",     \"concept_relationship\",     \"concept_ancestor\",     \"concept_synonym\",     \"vocabulary\"   )),   as_data_frame = FALSE )  rm(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"check-version-of-the-vocabularies","dir":"Articles","previous_headings":"","what":"Check version of the vocabularies","title":"Introduction to CodelistGenerator","text":"important note results CodelistGenerator specific particular version OMOP CDM vocabularies. can see version vocabulary used like ","code":"getVocabVersion(cdm = cdmArrow) #> [1] \"v5.0 13-JUL-21\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"a-code-list-from-dementia-4182210-and-its-descendants","dir":"Articles","previous_headings":"","what":"A code list from “Dementia” (4182210) and its descendants","title":"Introduction to CodelistGenerator","text":"simplest approach identifying potential codes take high-level code include descendants. looks pick relevant codes. , approach misses codes descendant 4182210. example, codes “Wandering due dementia” (37312577; https://athena.ohdsi.org/search-terms/terms/37312577) “Anxiety due dementia” (37312031; https://athena.ohdsi.org/search-terms/terms/37312031) picked .","code":"codesFromDescendants <- tbl(   db,   sql(paste0(     \"SELECT * FROM \",     vocabularyDatabaseSchema,     \".concept_ancestor\"   )) ) %>%   filter(ancestor_concept_id == \"4182210\") %>%   select(\"descendant_concept_id\") %>%   rename(\"concept_id\" = \"descendant_concept_id\") %>%   left_join(tbl(db, sql(paste0(     \"SELECT * FROM \",     vocabularyDatabaseSchema,     \".concept\"   )))) %>%   select(     \"concept_id\", \"concept_name\",     \"domain_id\", \"vocabulary_id\"   ) %>%   collect() datatable(codesFromDescendants,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"generating-a-candidate-code-list-using-codelistgenerator","dir":"Articles","previous_headings":"","what":"Generating a candidate code list using CodelistGenerator","title":"Introduction to CodelistGenerator","text":"try include terms included can use CodelistGenerator. First, let’s simple search single keyword “dementia”, including descendants identified codes.","code":"dementiaCodes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"dementia\",   domains = \"Condition\",   includeDescendants = TRUE ) datatable(dementiaCodes1,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"comparing-code-lists","dir":"Articles","previous_headings":"","what":"Comparing code lists","title":"Introduction to CodelistGenerator","text":"difference code list one 4182210 descendants? extra codes picked CodelistGenerator?","code":"codeComparison <- compareCodelists(   codesFromDescendants,   dementiaCodes1 ) kable(codeComparison %>%   group_by(codelist) %>%   tally()) datatable(   codeComparison %>%     filter(codelist == \"Only codelist 2\"),   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a01_Introduction_to_CodelistGenerator.html","id":"review-mappings-from-non-standard-vocabularies","dir":"Articles","previous_headings":"","what":"Review mappings from non-standard vocabularies","title":"Introduction to CodelistGenerator","text":"Perhaps want see ICD10CM codes map candidate code list. can get running","code":"icdMappings <- getMappings(   cdm = cdm,   candidateCodelist = dementiaCodes1,   nonStandardVocabularies = \"ICD10CM\" ) datatable(icdMappings,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) ) readMappings <- getMappings(   cdm = cdm,   candidateCodelist = dementiaCodes1,   nonStandardVocabularies = \"Read\" ) datatable(readMappings,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"creating-a-codelist-for-osteoarthritis","dir":"Articles","previous_headings":"","what":"Creating a codelist for osteoarthritis","title":"CodelistGenerator search options: codes for osteoarthritis","text":"example going generate candidate codelist osteoarthritis, looking impact alternative search strategies.","code":"library(DBI) library(RPostgres) # postgres database connection details serverDbi <- Sys.getenv(\"server\") user <- Sys.getenv(\"user\") password <- Sys.getenv(\"password\") port <- Sys.getenv(\"port\") host <- Sys.getenv(\"host\")  db <- dbConnect(RPostgres::Postgres(),   dbname = serverDbi,   port = port,   host = host,   user = user,   password = password )  # name of vocabulary schema vocabularyDatabaseSchema <- \"vocabulary\"  # create cdm reference cdm <- CDMConnector::cdm_from_con(   con = db,   cdm_schema = vocabularyDatabaseSchema,   cdm_tables = tidyselect::all_of(c(     \"concept\",     \"concept_relationship\",     \"concept_ancestor\",     \"concept_synonym\",     \"drug_strength\",     \"vocabulary\"   )) )"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"condition-domain-without-searching-via-or-in-synonyms-without-fuzzy-match-with-exclusions-without-including-descendants-or-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Condition domain, without searching via or in synonyms, without fuzzy match, with exclusions, without including descendants or ancestor","title":"CodelistGenerator search options: codes for osteoarthritis","text":"start search “osteoarthritis”, excluding “post-infection” “post-traumatic”, without searching synonyms, without searching via non-standard codes, without fuzzy matching, without including descendants direct ancestor included concepts. candidate codelist?","code":"oaCodes1 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   fuzzyMatch = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) datatable(oaCodes1,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 250)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"including-descendants","dir":"Articles","previous_headings":"Search strategies","what":"Including descendants","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now also include descendants included concepts. new codes pick ?","code":"oaCodes2 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   fuzzyMatch = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = TRUE,   includeAncestor = FALSE ) newCodes1To2 <- compareCodelists(oaCodes1, oaCodes2) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To2,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"including-observation-domain","dir":"Articles","previous_headings":"Search strategies","what":"Including observation domain","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now search observation domain well condition domain. new codes pick ?","code":"oaCodes3 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = c(\"Condition\", \"Observation\"),   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   fuzzyMatch = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To3 <- compareCodelists(oaCodes1, oaCodes3) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To3,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"search-synonyms-both-in-and-via","dir":"Articles","previous_headings":"Search strategies","what":"Search synonyms (both in and via)","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oaCodes4 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = TRUE,   searchViaSynonyms = TRUE,   searchNonStandard = FALSE,   fuzzyMatch = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To4 <- compareCodelists(oaCodes1, oaCodes4) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To4,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"search-via-non-standard","dir":"Articles","previous_headings":"Search strategies","what":"Search via non-standard","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now search concept synonym table identify concepts include. new codes pick ?","code":"oaCodes5 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = TRUE,   fuzzyMatch = FALSE,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To5 <- compareCodelists(oaCodes1, oaCodes5) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To5,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"using-a-fuzzy-search","dir":"Articles","previous_headings":"Search strategies","what":"Using a fuzzy search","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now use approximate search. See https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/agrep details (running hood). Note, using defaults 0.1 substitutions, deletions, insertions. new codes pick ?","code":"oaCodes6 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   fuzzyMatch = TRUE,   maxDistanceCost = 0.1,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To6 <- compareCodelists(oaCodes1, oaCodes6) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To6,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"using-a-more-generous-fuzzy-search","dir":"Articles","previous_headings":"Search strategies","what":"Using a more generous fuzzy search","title":"CodelistGenerator search options: codes for osteoarthritis","text":"widen approximate searching, increasing maximum distance allowed match 0.2 substitutions, deletions, insertions. new codes pick ?","code":"oaCodes7 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   fuzzyMatch = TRUE,   maxDistanceCost = 0.2,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = FALSE ) newCodes1To7 <- compareCodelists(oaCodes1, oaCodes7) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To7,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a02_Candidate_codes_OA.html","id":"include-ancestor","dir":"Articles","previous_headings":"Search strategies","what":"Include ancestor","title":"CodelistGenerator search options: codes for osteoarthritis","text":"Now include direct ancestor included terms. new codes pick ?","code":"oaCodes8 <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\",   domains = \"Condition\",   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   fuzzyMatch = FALSE,   maxDistanceCost = 0.1,   exclude = c(     \"post-infection\",     \"post-traumatic\"   ),   includeDescendants = FALSE,   includeAncestor = TRUE ) newCodes1To8 <- compareCodelists(oaCodes1, oaCodes8) %>%   filter(codelist == \"Only codelist 2\") %>%   select(-\"codelist\")  datatable(newCodes1To8,   rownames = FALSE,   options = list(     pageLength = 10,     lengthMenu = c(10, 20, 50)   ) )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"mock-vocabulary-database","dir":"Articles","previous_headings":"","what":"Mock vocabulary database","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"Let´s say mock vocabulary database hypothetical concepts relationships.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-for-exact-keyword-match","dir":"Articles","previous_headings":"","what":"Search for exact keyword match","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"find “Musculoskeletal disorder” can search like Note, also identify based partial match","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   includeDescendants = FALSE, )  kable(codes) codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal\",   domains = \"Condition\",   includeDescendants = FALSE )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"add-descendants","dir":"Articles","previous_headings":"","what":"Add descendants","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"include descendants identified code, can set includeDescendants TRUE","code":"kable(getCandidateCodes(   cdm = cdm,   keywords = \"Musculoskeletal disorder\",   domains = \"Condition\",   includeDescendants = TRUE ))"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"multiple-search-terms","dir":"Articles","previous_headings":"","what":"Multiple search terms","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also search multiple keywords time, picked following search","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = c(     \"Musculoskeletal disorder\",     \"arthritis\",     \"arthrosis\"   ),   domains = \"Condition\",   includeDescendants = FALSE )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"add-ancestor","dir":"Articles","previous_headings":"","what":"Add ancestor","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"include ancestors one level identified concepts can set includeAncestor TRUE","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Osteoarthritis of knee\",   includeAncestor = TRUE,   domains = \"Condition\" )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"searches-with-multiple-words","dir":"Articles","previous_headings":"","what":"Searches with multiple words","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also find concepts multiple words even different order. example, search “Knee osteoarthritis” pick “Osteoarthritis knee”.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"Knee osteoarthritis\",   domains = \"Condition\",   includeDescendants = TRUE )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"with-exclusions","dir":"Articles","previous_headings":"","what":"With exclusions","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also exclude specific terms","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"arthritis\",   exclude = \"Hip osteoarthritis\",   domains = \"Condition\" )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-using-synonyms","dir":"Articles","previous_headings":"","what":"Search using synonyms","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also pick codes based synonyms. case “Arthritis” synonym “Osteoarthrosis” search primary name concept associated synonyms pick synonym included. , case, can get result searching via synonyms. case using searchViaSynonyms=TRUE, “Arthritis” (gets identified first) synonym “Osteoarthrosis”, based synonym can also include “Osteoarthrosis” concept.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthrosis\",   domains = \"Condition\",   searchInSynonyms = TRUE )  kable(codes) codes <- getCandidateCodes(   cdm = cdm,   keywords = \"arthritis\",   domains = \"Condition\",   searchViaSynonyms = TRUE )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"fuzzy-matches-instead-of-only-exact-matches","dir":"Articles","previous_headings":"","what":"Fuzzy matches instead of only exact matches","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"also picked “Osteoarthrosis” fuzzy matching allows differences spelling.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = \"arthritis\",   domains = \"Condition\",   fuzzyMatch = TRUE,   maxDistanceCost = 0.2 )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-via-non-standard","dir":"Articles","previous_headings":"","what":"Search via non-standard","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"also picked “Osteoarthrosis” searching via non-standard.","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = c(\"arthritis\", \"arthropathy\"),   domains = \"Condition\",   searchNonStandard = TRUE )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a03_Options_for_CodelistGenerator.html","id":"search-for-both-standard-and-non-standard-concepts","dir":"Articles","previous_headings":"","what":"Search for both standard and non-standard concepts","title":"CodelistGenerator options: examples with a with mock vocabulary","text":"can also include non-standard codes results like ","code":"codes <- getCandidateCodes(   cdm = cdm,   keywords = c(     \"Musculoskeletal disorder\",     \"arthritis\",     \"arthropathy\",     \"arthrosis\"   ),   domains = \"Condition\",   standardConcept = c(\"Standard\", \"Non-standard\") )  kable(codes)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"creating-a-codelists-for-acetaminophen","dir":"Articles","previous_headings":"","what":"Creating a codelists for acetaminophen","title":"Code lists for medications","text":"vignette going create codelists identifying acetaminophen, looking drug domain.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"connecting-to-a-database-with-the-omop-cdm-vocabularies","dir":"Articles","previous_headings":"","what":"Connecting to a database with the OMOP CDM vocabularies","title":"Code lists for medications","text":"","code":"# postgres database connection details serverDbi <- Sys.getenv(\"server\") user <- Sys.getenv(\"user\") password <- Sys.getenv(\"password\") port <- Sys.getenv(\"port\") host <- Sys.getenv(\"host\")  db <- DBI::dbConnect(RPostgres::Postgres(),   dbname = serverDbi,   port = port,   host = host,   user = user,   password = password )  # name of vocabulary schema vocabularyDatabaseSchema <- \"vocabulary\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"codelist-from-acetaminophen-and-its-descendants","dir":"Articles","previous_headings":"","what":"Codelist from “acetaminophen” and its descendants","title":"Code lists for medications","text":"First can follow approach identifying high-level codes include descendants.","code":"library(dplyr) library(CodelistGenerator) library(stringr) library(DT) library(kableExtra) acetaminophen1 <- getCandidateCodes(   cdm = cdm,   keywords = \"acetaminophen\",   domains = \"drug\",   standardConcept = \"standard\",   includeDescendants = TRUE ) acetaminophen1 %>% dplyr::glimpse() #> Rows: 22,782 #> Columns: 15 #> $ concept_id                  <int> 587290, 587473, 587705, 587929, 588401, 58… #> $ concept_name                <chr> \"Acetaminophen 0.0501 MG/MG / Antipyrine 0… #> $ domain_id                   <chr> \"drug\", \"drug\", \"drug\", \"drug\", \"drug\", \"d… #> $ concept_class_id            <chr> \"clinical drug\", \"branded drug\", \"branded … #> $ vocabulary_id               <chr> \"rxnorm extension\", \"rxnorm extension\", \"r… #> $ found_from                  <chr> \"From initial search\", \"From initial searc… #> $ ingredient_concept_id       <int> 1134439, 1134439, 1036059, 1135766, 113576… #> $ amount_value                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ amount_unit_concept_id      <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ numerator_value             <dbl> 1.25e-02, 1.25e-02, 7.49e-02, 7.42e-03, 6.… #> $ numerator_unit_concept_id   <int> 8576, 8576, 8576, 8576, 8576, 8576, 8576, … #> $ denominator_value           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ denominator_unit_concept_id <int> 8576, 8576, 8576, 8576, 8576, 8576, 8576, … #> $ box_size                    <int> NA, NA, 100, 10, NA, 100, 5, NA, 5, 10, NA… #> $ dose_form                   <chr> \"Oral Solution\", \"Oral Solution\", \"Oral So…"},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"restrict-on-dose-form","dir":"Articles","previous_headings":"","what":"Restrict on dose form","title":"Code lists for medications","text":"can also restrict dose form. case can specify “injection” “intravenous” either keywords using dose form option. case two searches return result. can see dose forms specified like ","code":"acetaminophen2a <- getCandidateCodes(   cdm = cdm,   keywords = c(     \"acetaminophen injection\",     \"acetaminophen intravenous\"   ),   domains = \"drug\",   standardConcept = \"standard\",   includeDescendants = TRUE,   verbose = TRUE )  acetaminophen2b <- getCandidateCodes(   cdm = cdm,   keywords = \"acetaminophen\",   domains = \"drug\",   doseForm = c(\"injection\", \"intravenous\"),   standardConcept = \"standard\",   includeDescendants = TRUE,   verbose = TRUE ) acetaminophen2a %>% dplyr::glimpse() #> Rows: 127 #> Columns: 15 #> $ concept_id                  <int> 740261, 19112656, 21029938, 21049585, 2105… #> $ concept_name                <chr> \"50 ML acetaminophen 10 MG/ML Injection\", … #> $ domain_id                   <chr> \"drug\", \"drug\", \"drug\", \"drug\", \"drug\", \"d… #> $ concept_class_id            <chr> \"quant clinical drug\", \"quant clinical dru… #> $ vocabulary_id               <chr> \"rxnorm\", \"rxnorm\", \"rxnorm extension\", \"r… #> $ found_from                  <chr> \"From initial search\", \"From initial searc… #> $ ingredient_concept_id       <int> 1125315, 1125315, 1125315, 1125315, 112531… #> $ amount_value                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ amount_unit_concept_id      <int> NA, NA, NA, NA, NA, NA, NA, NA, 8576, NA, … #> $ numerator_value             <dbl> 500, 1000, 1000, 1000, 1000, 10, 1000, 100… #> $ numerator_unit_concept_id   <int> 8576, 8576, 8576, 8576, 8576, 8576, 8576, … #> $ denominator_value           <dbl> 50, 100, 100, 100, 100, NA, 100, 100, NA, … #> $ denominator_unit_concept_id <int> 8587, 8587, 8587, 8587, 8587, 8587, 8587, … #> $ box_size                    <int> NA, NA, 10, 12, 10, 12, NA, 12, NA, 10, 10… #> $ dose_form                   <chr> \"Injection\", \"Injection\", \"Injection\", \"In… acetaminophen2b %>% dplyr::glimpse() #> Rows: 127 #> Columns: 15 #> $ concept_id                  <int> 740261, 19112656, 21029938, 21049585, 2105… #> $ concept_name                <chr> \"50 ML acetaminophen 10 MG/ML Injection\", … #> $ domain_id                   <chr> \"drug\", \"drug\", \"drug\", \"drug\", \"drug\", \"d… #> $ concept_class_id            <chr> \"quant clinical drug\", \"quant clinical dru… #> $ vocabulary_id               <chr> \"rxnorm\", \"rxnorm\", \"rxnorm extension\", \"r… #> $ found_from                  <chr> \"From initial search\", \"From initial searc… #> $ ingredient_concept_id       <int> 1125315, 1125315, 1125315, 1125315, 112531… #> $ amount_value                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ amount_unit_concept_id      <int> NA, NA, NA, NA, NA, NA, NA, NA, 8576, NA, … #> $ numerator_value             <dbl> 500, 1000, 1000, 1000, 1000, 10, 1000, 100… #> $ numerator_unit_concept_id   <int> 8576, 8576, 8576, 8576, 8576, 8576, 8576, … #> $ denominator_value           <dbl> 50, 100, 100, 100, 100, NA, 100, 100, NA, … #> $ denominator_unit_concept_id <int> 8587, 8587, 8587, 8587, 8587, 8587, 8587, … #> $ box_size                    <int> NA, NA, 10, 12, 10, 12, NA, 12, NA, 10, 10… #> $ dose_form                   <chr> \"Injection\", \"Injection\", \"Injection\", \"In… compareCodelists(acetaminophen2a, acetaminophen2b) %>%    group_by(codelist) %>%    tally() #> # A tibble: 1 × 2 #>   codelist     n #>   <chr>    <int> #> 1 Both       127 getDoseForm(cdm = cdm) #>   [1] \"Prefilled Syringe\"                           #>   [2] \"Injectable Solution\"                         #>   [3] \"Oral Tablet\"                                 #>   [4] \"Oral Solution\"                               #>   [5] \"Oral Capsule\"                                #>   [6] \"Injection\"                                   #>   [7] \"Powder Spray\"                                #>   [8] \"Inhalation Solution\"                         #>   [9] \"Oral Powder\"                                 #>  [10] \"Topical Ointment\"                            #>  [11] \"Oral Granules\"                               #>  [12] \"Transdermal System\"                          #>  [13] \"Topical Gel\"                                 #>  [14] \"Topical Cream\"                               #>  [15] \"Extended Release Oral Tablet\"                #>  [16] \"Topical Solution\"                            #>  [17] \"Extended Release Oral Capsule\"               #>  [18] \"Ophthalmic Solution\"                         #>  [19] \"Topical Lotion\"                              #>  [20] \"Oral Suspension\"                             #>  [21] \"Inhalation Powder\"                           #>  [22] \"Nasal Solution\"                              #>  [23] \"Delayed Release Oral Tablet\"                 #>  [24] \"Oral Ointment\"                               #>  [25] \"Wound Cones\"                                 #>  [26] \"Injectable Suspension\"                       #>  [27] \"Granules for Oral Suspension\"                #>  [28] \"Toothpaste\"                                  #>  [29] \"Pack\"                                        #>  [30] \"Rectal Gel\"                                  #>  [31] \"Chewing Gum\"                                 #>  [32] \"Rectal Ointment\"                             #>  [33] \"Rectal Powder\"                               #>  [34] \"Inhalation Spray\"                            #>  [35] \"Tablet for Oral Suspension\"                  #>  [36] \"Vaginal Film\"                                #>  [37] \"Mucosal Spray\"                               #>  [38] \"Nasal Powder\"                                #>  [39] \"Otic Suspension\"                             #>  [40] \"Intratracheal Suspension\"                    #>  [41] \"Delayed Release Oral Capsule\"                #>  [42] \"Paste\"                                       #>  [43] \"Sublingual Film\"                             #>  [44] \"Intravenous Solution\"                        #>  [45] \"Intrathecal Suspension\"                      #>  [46] \"Intramuscular Prolonged Release Suspension\"  #>  [47] \"Intravenous Suspension\"                      #>  [48] \"Vaginal Spray\"                               #>  [49] \"Prefilled Applicator\"                        #>  [50] \"Inhalant\"                                    #>  [51] \"Intrauterine Drug Delivery System\"           #>  [52] \"Sustained Release Buccal Tablet\"             #>  [53] \"Otic Ointment\"                               #>  [54] \"Vaginal Ointment\"                            #>  [55] \"Augmented Topical Gel\"                       #>  [56] \"Augmented Topical Lotion\"                    #>  [57] \"Augmented Topical Ointment\"                  #>  [58] \"Intraperitoneal Solution\"                    #>  [59] \"Impregnated cigarette\"                       #>  [60] \"Nasal Metered-Dose Aerosol\"                  #>  [61] \"Powder for Nasal Solution\"                   #>  [62] \"Collodion\"                                   #>  [63] \"Dental Pin\"                                  #>  [64] \"Chewable Bar\"                                #>  [65] \"Medicated Gauzeball\"                         #>  [66] \"Dressing Gauze\"                              #>  [67] \"Topical Cake\"                                #>  [68] \"Oral Tablet with Sensor\"                     #>  [69] \"Powder for Pyelocalyceal Solution\"           #>  [70] \"Vaginal Sponge\"                              #>  [71] \"Enema\"                                       #>  [72] \"Disintegrating Oral Tablet\"                  #>  [73] \"Topical Spray\"                               #>  [74] \"Ophthalmic Ointment\"                         #>  [75] \"Buccal Film\"                                 #>  [76] \"Powder for Oral Solution\"                    #>  [77] \"Sublingual Tablet\"                           #>  [78] \"Oral Spray\"                                  #>  [79] \"Mouthwash\"                                   #>  [80] \"Oral Strip\"                                  #>  [81] \"Oral Film\"                                   #>  [82] \"Auto-Injector\"                               #>  [83] \"Vaginal Cream\"                               #>  [84] \"Granules for Oral Solution\"                  #>  [85] \"Vaginal Gel\"                                 #>  [86] \"Topical Suspension\"                          #>  [87] \"Effervescent Oral Tablet\"                    #>  [88] \"Oral Cream\"                                  #>  [89] \"Topical Foam\"                                #>  [90] \"Rectal Solution\"                             #>  [91] \"Nasal Ointment\"                              #>  [92] \"Rectal Cream\"                                #>  [93] \"Nasal Inhaler\"                               #>  [94] \"Vaginal Insert\"                              #>  [95] \"Kit for radiopharmaceutical preparation\"     #>  [96] \"Metered Dose Nasal Spray\"                    #>  [97] \"Delayed Release Oral Granules\"               #>  [98] \"Oral Flakes\"                                 #>  [99] \"Powder\"                                      #> [100] \"Unknown Combination Pack Medical Aids\"       #> [101] \"Medicated nail lacquer\"                      #> [102] \"Shower Powder\"                               #> [103] \"Intravitreal Applicator\"                     #> [104] \"Nasal Pin\"                                   #> [105] \"Nasal Metered-Dose Pump\"                     #> [106] \"Tablet for Opthalmic Solution\"               #> [107] \"Vaginal Powder\"                              #> [108] \"Nasal Aerosol, Metered Dose\"                 #> [109] \"Nasal Spray\"                                 #> [110] \"Oral Gel\"                                    #> [111] \"Vaginal Ring\"                                #> [112] \"Oral Paste\"                                  #> [113] \"Medicated Patch\"                             #> [114] \"Oral Lozenge\"                                #> [115] \"Chewable Tablet\"                             #> [116] \"Metered Dose Inhaler\"                        #> [117] \"Mucous Membrane Topical Solution\"            #> [118] \"Vaginal System\"                              #> [119] \"Urethral Gel\"                                #> [120] \"Dry Powder Inhaler\"                          #> [121] \"Ophthalmic Gel\"                              #> [122] \"Rectal Foam\"                                 #> [123] \"Cartridge\"                                   #> [124] \"Medicated Shampoo\"                           #> [125] \"Medicated Liquid Soap\"                       #> [126] \"Stick\"                                       #> [127] \"Irrigation Solution\"                         #> [128] \"Oral Granules (Effervescents)\"               #> [129] \"Oral Pellet\"                                 #> [130] \"Nasal Suspension\"                            #> [131] \"Intrauterine System\"                         #> [132] \"Vaginal Foam\"                                #> [133] \"Nasal Gel\"                                   #> [134] \"Douche\"                                      #> [135] \"Jet Injector\"                                #> [136] \"Rectal Spray\"                                #> [137] \"Oil\"                                         #> [138] \"Bar Soap\"                                    #> [139] \"Bath Salts\"                                  #> [140] \"Variable Drug Form\"                          #> [141] \"Oral Gas\"                                    #> [142] \"Medicated Tape\"                              #> [143] \"Inhalation Suspension\"                       #> [144] \"Powder for Oral Suspension\"                  #> [145] \"Rectal Suppository\"                          #> [146] \"Topical Powder\"                              #> [147] \"Otic Solution\"                               #> [148] \"Gas for Inhalation\"                          #> [149] \"Ophthalmic Irrigation Solution\"              #> [150] \"Buccal Tablet\"                               #> [151] \"Topical Oil\"                                 #> [152] \"Ophthalmic Suspension\"                       #> [153] \"Medicated Bar Soap\"                          #> [154] \"Drug Implant\"                                #> [155] \"Medicated Pad\"                               #> [156] \"Extended Release Suspension\"                 #> [157] \"Medicated Nail Polish\"                       #> [158] \"Vaginal Suppository\"                         #> [159] \"Pen Injector\"                                #> [160] \"Chewable Extended Release Oral Tablet\"       #> [161] \"Ophthalmic Cream\"                            #> [162] \"Paint\"                                       #> [163] \"Vaginal Tablet\"                              #> [164] \"Vaginal delivery system\"                     #> [165] \"Intramuscular Solution\"                      #> [166] \"Rectal Suspension\"                           #> [167] \"Suspension\"                                  #> [168] \"Nasal Inhalant\"                              #> [169] \"Urethral Suppository\"                        #> [170] \"Oral Wafer\"                                  #> [171] \"Oral Foam\"                                   #> [172] \"Augmented Topical Cream\"                     #> [173] \"Sublingual Powder\"                           #> [174] \"Cement\"                                      #> [175] \"Nasal Cream\"                                 #> [176] \"Injectable Foam\"                             #> [177] \"Subcutaneous Gel\"                            #> [178] \"Vaginal Mechanical Pessaries with Substance\" #> [179] \"Medicated Swab\"                              #> [180] \"Medicated Cottonball\"                        #> [181] \"Medicated Guaze\"                             #> [182] \"Soft Tissue Injection Suspension\"            #> [183] \"Poultice\"                                    #> [184] \"Topical Liquefied Gas\"                       #> [185] \"Subcutaneous Powder\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/articles/a04_codelists_for_medications.html","id":"restrict-on-concept-class","dir":"Articles","previous_headings":"","what":"Restrict on concept class","title":"Code lists for medications","text":"can also restrict concept class, case identifying codes concept class “Quant Clinical Drug” can see concept classes drugs like ","code":"acetaminophen3 <- getCandidateCodes(   cdm = cdm,   keywords = \"acetaminophen\",   domains = \"drug\",   conceptClassId = c(\"Quant Clinical Drug\"),   doseForm = c(\"injection\", \"intravenous\"),   standardConcept = \"standard\",   includeDescendants = TRUE,   verbose = TRUE ) acetaminophen3 %>% dplyr::glimpse() #> Rows: 5 #> Columns: 15 #> $ concept_id                  <int> 740261, 19112656, 36279869, 36778619, 3677… #> $ concept_name                <chr> \"50 ML acetaminophen 10 MG/ML Injection\", … #> $ domain_id                   <chr> \"drug\", \"drug\", \"drug\", \"drug\", \"drug\" #> $ concept_class_id            <chr> \"quant clinical drug\", \"quant clinical dru… #> $ vocabulary_id               <chr> \"rxnorm\", \"rxnorm\", \"rxnorm extension\", \"r… #> $ found_from                  <chr> \"From initial search\", \"From initial searc… #> $ ingredient_concept_id       <int> 1125315, 1125315, 1125315, 1125315, 1125315 #> $ amount_value                <dbl> NA, NA, NA, NA, NA #> $ amount_unit_concept_id      <int> NA, NA, NA, NA, NA #> $ numerator_value             <dbl> 500, 1000, 100, 1000, 500 #> $ numerator_unit_concept_id   <int> 8576, 8576, 8576, 8576, 8576 #> $ denominator_value           <dbl> 50, 100, 10, 100, 50 #> $ denominator_unit_concept_id <int> 8587, 8587, 8587, 8587, 8587 #> $ box_size                    <int> NA, NA, NA, NA, NA #> $ dose_form                   <chr> \"Injection\", \"Injection\", \"Intravenous Sol… getConceptClassId(cdm = cdm, domain = \"drug\") #>  [1] \"Ingredient\"          \"Clinical Drug Comp\"  \"Clinical Drug\"       #>  [4] \"Quant Branded Drug\"  \"Quant Clinical Drug\" \"Branded Drug\"        #>  [7] \"Marketed Product\"    \"Branded Drug Box\"    \"Branded Drug Comp\"   #> [10] \"Quant Clinical Box\"  \"Clinical Drug Box\"   \"Clinical Drug Form\"  #> [13] \"Quant Branded Box\"   \"Branded Drug Form\"   \"Branded Pack\"        #> [16] \"Clinical Pack\"       \"Branded Pack Box\"    \"Clinical Pack Box\"   #> [19] \"HCPCS\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Burn. Author, maintainer.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burn E (2023). CodelistGenerator: Generate Code Lists OMOP Common Data Model. R package version 1.2.0, https://darwin-eu.github.io/CodelistGenerator/.","code":"@Manual{,   title = {CodelistGenerator: Generate Code Lists for the OMOP Common Data Model},   author = {Edward Burn},   year = {2023},   note = {R package version 1.2.0},   url = {https://darwin-eu.github.io/CodelistGenerator/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Generate Code Lists for the OMOP Common Data Model","text":"CodelistGenerator used create candidate set codes helping define patient cohorts data mapped OMOP common data model. little like process systematic review, idea specified search strategy, CodelistGenerator identify set concepts may relevant, screened remove irrelevant codes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Code Lists for the OMOP Common Data Model","text":"can install development version CodelistGenerator like :","code":"install.packages(\"remotes\") remotes::install_github(\"darwin-eu/CodelistGenerator\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Generate Code Lists for the OMOP Common Data Model","text":"example ’ll use Eunomia dataset (contains subset OMOP CDM vocabularies) Although can run search using vocabulary tables database loaded R, fastest approach using arrow. let’s create new cdm reference using arrow (example saved temp directory, practice course save files elsewhere reuse). Every code list specific version OMOP CDM vocabularies, can first check version Eunomia. can search asthma like Perhaps want exclude certain concepts part search strategy, case can added like can compare two code lists like can also see non-standard codes mapped , example can see non-standard ICD10 code maps standard snomed code gastrointestinal hemorrhage returned search","code":"library(dplyr) library(CDMConnector) library(CodelistGenerator) library(kableExtra) db <- DBI::dbConnect(duckdb::duckdb(), dbdir = eunomia_dir()) cdm <- cdm_from_con(db, cdm_schema = \"main\") # save cdm vocabulary tables to temp directory dOut<-here::here(tempdir(), \"db_vocab\") dir.create(dOut) CDMConnector::stow(cdm, dOut) # new cdm reference using arrow cdm_arrow <- CDMConnector::cdm_from_files(path = dOut,                                            as_data_frame = FALSE) getVocabVersion(cdm = cdm_arrow) #> [1] \"v5.0 18-JAN-19\" asthma_codes1 <- getCandidateCodes(   cdm = cdm_arrow,   keywords = \"asthma\",   domains = \"Condition\" )  asthma_codes1 %>%    glimpse() #> Rows: 2 #> Columns: 6 #> $ concept_id       <dbl> 317009, 4051466 #> $ concept_name     <chr> \"Asthma\", \"Childhood asthma\" #> $ domain_id        <chr> \"condition\", \"condition\" #> $ concept_class_id <chr> \"clinical finding\", \"clinical finding\" #> $ vocabulary_id    <chr> \"snomed\", \"snomed\" #> $ found_from       <chr> \"From initial search\", \"From descendants\" asthma_codes2 <- getCandidateCodes(   cdm = cdm_arrow,   keywords = \"asthma\",   exclude = \"childhood\",   domains = \"Condition\" )  asthma_codes2 %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <dbl> 317009 #> $ concept_name     <chr> \"Asthma\" #> $ domain_id        <chr> \"condition\" #> $ concept_class_id <chr> \"clinical finding\" #> $ vocabulary_id    <chr> \"snomed\" #> $ found_from       <chr> \"From initial search\" compareCodelists(asthma_codes1, asthma_codes2) #> # A tibble: 2 × 3 #>   concept_id concept_name     codelist        #>        <dbl> <chr>            <chr>           #> 1     317009 Asthma           Both            #> 2    4051466 Childhood asthma Only codelist 1 Gastrointestinal_hemorrhage <- getCandidateCodes(   cdm = cdm_arrow,   keywords = \"Gastrointestinal hemorrhage\",   domains = \"Condition\" ) Gastrointestinal_hemorrhage %>%    glimpse() #> Rows: 1 #> Columns: 6 #> $ concept_id       <dbl> 192671 #> $ concept_name     <chr> \"Gastrointestinal hemorrhage\" #> $ domain_id        <chr> \"condition\" #> $ concept_class_id <chr> \"clinical finding\" #> $ vocabulary_id    <chr> \"snomed\" #> $ found_from       <chr> \"From initial search\" getMappings(   cdm = cdm_arrow,   candidateCodelist = Gastrointestinal_hemorrhage,   nonStandardVocabularies = \"ICD10CM\" ) %>%    glimpse() #> Rows: 1 #> Columns: 7 #> $ standard_concept_id        <dbl> 192671 #> $ standard_concept_name      <chr> \"Gastrointestinal hemorrhage\" #> $ standard_vocabulary_id     <chr> \"SNOMED\" #> $ non_standard_concept_id    <dbl> 35208414 #> $ non_standard_concept_name  <chr> \"Gastrointestinal hemorrhage, unspecified\" #> $ non_standard_concept_code  <chr> \"K92.2\" #> $ non_standard_vocabulary_id <chr> \"ICD10CM\""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/CodelistGenerator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CodelistGenerator: Generate Code Lists for the OMOP Common Data Model — CodelistGenerator-package","title":"CodelistGenerator: Generate Code Lists for the OMOP Common Data Model — CodelistGenerator-package","text":"Generate candidate code list Observational Medical Outcomes Partnership (OMOP) common data model based string matching. given search strategy, candidate code list returned.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/CodelistGenerator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CodelistGenerator: Generate Code Lists for the OMOP Common Data Model — CodelistGenerator-package","text":"Maintainer: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two codelists — compareCodelists","title":"Compare two codelists — compareCodelists","text":"Compare two codelists","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two codelists — compareCodelists","text":"","code":"compareCodelists(codelist1, codelist2)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two codelists — compareCodelists","text":"codelist1 Output getCandidateCodes codelist2 Output getCandidateCodes","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two codelists — compareCodelists","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/compareCodelists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two codelists — compareCodelists","text":"","code":"cdm <- mockVocabRef() codes1 <- getCandidateCodes(  cdm = cdm,  keywords = \"Arthritis\",  domains = \"Condition\",  includeDescendants = TRUE ) codes2 <- getCandidateCodes(  cdm = cdm,  keywords = c(\"knee osteoarthritis\", \"arthrosis\"),  domains = \"Condition\",  includeDescendants = TRUE ) compareCodelists(  codelist1 = codes1,  codelist2 = codes2 ) #> # A tibble: 4 × 3 #>   concept_id concept_name           codelist        #>        <int> <chr>                  <chr>           #> 1          3 Arthritis              Only codelist 1 #> 2          4 Osteoarthritis of knee Both            #> 3          5 Osteoarthritis of hip  Only codelist 1 #> 4          2 Osteoarthrosis         Only codelist 2 DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant codes for ATC levels — getATCCodes","title":"Get descendant codes for ATC levels — getATCCodes","text":"Get descendant codes ATC levels","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant codes for ATC levels — getATCCodes","text":"","code":"getATCCodes(cdm, level = c(\"ATC 1st\"), name = NULL, doseForm = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant codes for ATC levels — getATCCodes","text":"cdm cdm_reference via CDMConnector level ATC level. Can one \"ATC 1st\", \"ATC 2nd\", \"ATC 3rd\", \"ATC 4th\", \"ATC 5th\" name ATC name interest. example, c(\"Dermatologicals\", \"Nervous System\"), result list length two descendant concepts two particular ATC groups. doseForm descendants codes specified dose form returned. NULL, descendant codes returned regardless dose form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant codes for ATC levels — getATCCodes","text":"named list, element containing descendant concepts particular ATC group","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getATCCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant codes for ATC levels — getATCCodes","text":"","code":"cdm <- mockVocabRef() getATCCodes(cdm = cdm, level = \"ATC 1st\") #> $`ATC 1st: ALIMENTARY TRACT AND METABOLISM (12)` #> [1] 12 13 #>  DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"function generates set codes can considered creating phenotype using OMOP CDM.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"","code":"getCandidateCodes(   cdm,   keywords,   exclude = NULL,   domains = \"Condition\",   conceptClassId = NULL,   doseForm = NULL,   vocabularyId = NULL,   standardConcept = \"Standard\",   exactMatch = FALSE,   searchInSynonyms = FALSE,   searchViaSynonyms = FALSE,   searchNonStandard = FALSE,   includeSequela = FALSE,   includeDescendants = TRUE,   includeAncestor = FALSE,   fuzzyMatch = FALSE,   maxDistanceCost = 0.1,   verbose = FALSE )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"cdm cdm_reference via CDMConnector keywords Character vector words search . one word given (e.g. \"knee osteoarthritis\"), combinations words identified positions (e.g. \"osteoarthritis knee\") identified. exclude Character vector words identify concepts exclude. domains Character vector one OMOP CDM domain. conceptClassId Character vector one concept class Concept doseForm dose form associated drug vocabularyId Character vector one vocabulary Concept standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. exactMatch Either TRUE FALSE. TRUE exact matches keywords identified running initial search. searchInSynonyms Either TRUE FALSE. TRUE code also search using primary name concept table synonyms concept synonym table. searchViaSynonyms Either TRUE FALSE. TRUE code also search via concept synonym table. searchNonStandard Either TRUE FALSE. TRUE code also search via non-standard concepts. includeSequela Either TRUE FALSE. TRUE, codes associated via concept relationship 'Due ' 'Occurs ' also identified. includeDescendants Either TRUE FALSE. TRUE descendant concepts identified concepts included candidate codelist. includeAncestor Either TRUE FALSE. TRUE direct ancestor concepts identified concepts included candidate codelist. fuzzyMatch Either TRUE FALSE. TRUE fuzzy matching used, approximate matches identified. maxDistanceCost, maximum number/fraction match cost (generalized Levenshtein distance) fuzzy matching (see ??base::agrep details). verbose Either TRUE FALSE. TRUE, progress reported.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate candidate codelist for the OMOP CDM — getCandidateCodes","text":"","code":"cdm <- CodelistGenerator::mockVocabRef() CodelistGenerator::getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\"  ) #> # A tibble: 2 × 6 #>   concept_id concept_name    domain_id concept_class_id vocabulary_id found_from #>        <int> <chr>           <chr>     <chr>            <chr>         <chr>      #> 1          4 Osteoarthritis… condition clinical finding snomed        From init… #> 2          5 Osteoarthritis… condition clinical finding snomed        From init… DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":null,"dir":"Reference","previous_headings":"","what":"getDescendants — getDescendants","title":"getDescendants — getDescendants","text":"getDescendants","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDescendants — getDescendants","text":"","code":"getDescendants(cdm, conceptId, withAncestor = FALSE, doseForm = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDescendants — getDescendants","text":"cdm cdm_reference via CDMConnector conceptId concpet_id search withAncestor TRUE, return column ancestor. case multiple ancestors, concepts separated \";\" doseForm descendants codes specified drug dose form returned. NULL, descendant codes returned regardless dose form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDescendants — getDescendants","text":"descendants given concept id","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDescendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDescendants — getDescendants","text":"","code":"cdm <- mockVocabRef() getDescendants(cdm = cdm, conceptId = 1) #> # A tibble: 5 × 10 #>   concept_id concept_name             domain_id vocabulary_id standard_concept #>        <int> <chr>                    <chr>     <chr>         <chr>            #> 1          1 Musculoskeletal disorder Condition SNOMED        S                #> 2          2 Osteoarthrosis           Condition SNOMED        S                #> 3          3 Arthritis                Condition SNOMED        S                #> 4          4 Osteoarthritis of knee   Condition SNOMED        S                #> 5          5 Osteoarthritis of hip    Condition SNOMED        S                #> # ℹ 5 more variables: concept_class_id <chr>, concept_code <chr>, #> #   valid_start_date <lgl>, valid_end_date <lgl>, invalid_reason <lgl> DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":null,"dir":"Reference","previous_headings":"","what":"getDomains — getDomains","title":"getDomains — getDomains","text":"getDomains","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDomains — getDomains","text":"","code":"getDomains(cdm, standardConcept = \"Standard\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDomains — getDomains","text":"cdm cdm_reference via CDMConnector standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDomains — getDomains","text":"domains cdm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDomains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDomains — getDomains","text":"","code":"cdm <- mockVocabRef() getDomains(cdm = cdm) #> [1] \"Condition\"   \"Observation\" \"Drug\"        DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":null,"dir":"Reference","previous_headings":"","what":"getDoseForm — getDoseForm","title":"getDoseForm — getDoseForm","text":"getDoseForm","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDoseForm — getDoseForm","text":"","code":"getDoseForm(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDoseForm — getDoseForm","text":"cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDoseForm — getDoseForm","text":"dose forms available drug concepts","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDoseForm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDoseForm — getDoseForm","text":"","code":"cdm <- mockVocabRef() getDoseForm(cdm = cdm) #> [1] \"Injection\"  \"Injectable\" DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant codes for drug ingredients — getDrugIngredientCodes","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"Get descendant codes drug ingredients","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"","code":"getDrugIngredientCodes(cdm, name = NULL, doseForm = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"cdm cdm_reference via CDMConnector name Names ingredients interest. example, c(\"acetaminophen\", \"codeine\"), result list length two descendant concepts two particular drug ingredients. doseForm descendants codes specified dose form returned. NULL, descendant codes returned regardless dose form.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"named list, item containing descendant concepts ingredient","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant codes for drug ingredients — getDrugIngredientCodes","text":"","code":"cdm <- mockVocabRef() getDrugIngredientCodes(cdm = cdm, name = \"Adalimumab\") #> $`Ingredient: Adalimumab (10)` #> [1] 10 13 #>  DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Show mappings from non-standard vocabularies to standard — getMappings","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"Show mappings non-standard vocabularies standard","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"","code":"getMappings(   candidateCodelist,   cdm = NULL,   nonStandardVocabularies = c(\"ATC\", \"ICD10CM\", \"ICD10PCS\", \"ICD9CM\", \"ICD9Proc\",     \"LOINC\", \"OPCS4\", \"Read\", \"RxNorm\", \"RxNorm Extension\", \"SNOMED\") )"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"candidateCodelist Dataframe cdm cdm_reference via CDMConnector::cdm_from_con() nonStandardVocabularies Character vector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"tibble","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getMappings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show mappings from non-standard vocabularies to standard — getMappings","text":"","code":"cdm <- CodelistGenerator::mockVocabRef() codes <- CodelistGenerator::getCandidateCodes(   cdm = cdm,   keywords = \"osteoarthritis\" ) CodelistGenerator::getMappings(   cdm = cdm,   candidateCodelist = codes,   nonStandardVocabularies = \"READ\" ) #> # A tibble: 1 × 7 #>   standard_concept_id standard_concept_name  standard_vocabulary_id #>                 <int> <chr>                  <chr>                  #> 1                   4 Osteoarthritis of knee SNOMED                 #> # ℹ 4 more variables: non_standard_concept_id <int>, #> #   non_standard_concept_name <chr>, non_standard_concept_code <chr>, #> #   non_standard_vocabulary_id <chr>"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"getVocabVersion — getVocabVersion","title":"getVocabVersion — getVocabVersion","text":"getVocabVersion","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getVocabVersion — getVocabVersion","text":"","code":"getVocabVersion(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getVocabVersion — getVocabVersion","text":"cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getVocabVersion — getVocabVersion","text":"vocabulary version used","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getVocabVersion — getVocabVersion","text":"","code":"cdm <- mockVocabRef() getVocabVersion(cdm = cdm) #> [1] \"v5.0 22-JUN-22\" DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":null,"dir":"Reference","previous_headings":"","what":"getVocabularies — getVocabularies","title":"getVocabularies — getVocabularies","text":"getVocabularies","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getVocabularies — getVocabularies","text":"","code":"getVocabularies(cdm)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getVocabularies — getVocabularies","text":"cdm cdm_reference via CDMConnector","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getVocabularies — getVocabularies","text":"Names available vocabularies","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getVocabularies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getVocabularies — getVocabularies","text":"","code":"cdm <- mockVocabRef() getVocabularies(cdm = cdm) #> [1] \"SNOMED\" \"Read\"   \"LOINC\"  \"RxNorm\" \"OMOP\"   \"ATC\"    DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getconceptClassId.html","id":null,"dir":"Reference","previous_headings":"","what":"getConceptClassId — getConceptClassId","title":"getConceptClassId — getConceptClassId","text":"getConceptClassId","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getconceptClassId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getConceptClassId — getConceptClassId","text":"","code":"getConceptClassId(cdm, standardConcept = \"Standard\", domain = NULL)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getconceptClassId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getConceptClassId — getConceptClassId","text":"cdm cdm_reference via CDMConnector standardConcept Character vector one \"Standard\", \"Classification\", \"Non-standard\". correspond flags used standard_concept field concept table cdm. domain Vocabulary domain","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getconceptClassId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getConceptClassId — getConceptClassId","text":"concept class used given set domains","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/getconceptClassId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getConceptClassId — getConceptClassId","text":"","code":"cdm <- mockVocabRef() getConceptClassId(cdm = cdm, domain = \"drug\") #> [1] \"Ingredient\" \"Drug\"       DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate example vocabulary database — mockVocabRef","title":"Generate example vocabulary database — mockVocabRef","text":"Generate example vocabulary database","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate example vocabulary database — mockVocabRef","text":"","code":"mockVocabRef(backend = \"database\")"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate example vocabulary database — mockVocabRef","text":"backend 'database' (duckdb), 'arrow' (parquet files), 'data_frame'","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate example vocabulary database — mockVocabRef","text":"cdm reference mock vocabulary","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/mockVocabRef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate example vocabulary database — mockVocabRef","text":"","code":"cdm <- mockVocabRef() cdm #> # OMOP CDM reference (tbl_duckdb_connection) #>  #> Tables: concept, concept_relationship, concept_ancestor, concept_synonym, vocabulary, drug_strength DBI::dbDisconnect(attr(cdm, \"dbcon\"), shutdown = TRUE)"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-120","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.2.0","title":"CodelistGenerator 1.2.0","text":"Added functions getATCCodes getDrugIngredientCodes.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-110","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.1.0","title":"CodelistGenerator 1.1.0","text":"CRAN release: 2023-04-01 Added exactMatch includeSequela options getCandidateCodes function.","code":""},{"path":"https://darwin-eu.github.io/CodelistGenerator/news/index.html","id":"codelistgenerator-100","dir":"Changelog","previous_headings":"","what":"CodelistGenerator 1.0.0","title":"CodelistGenerator 1.0.0","text":"CRAN release: 2023-02-07 Added NEWS.md file track changes package.","code":""}]
